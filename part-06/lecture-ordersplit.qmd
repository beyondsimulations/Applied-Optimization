---
title: "Lecture VI - Minimizing Split Orders in E-Commerce"
subtitle: "Applied Optimization with Julia"
author: "Dr. Tobias Vlćek"
#institute: "University of Hamburg - Fall 2024"
title-slide-attributes:
    data-background-color: "#025259"
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"

format:
    revealjs:
        theme: [default, ../styles.scss]
        transition: slide
        transition-speed: fast
        highlight-style: arrow
        slide-number: true
        code-copy: true
        code-link: true
        preview-links: auto
        footer: " {{< meta title >}} | {{< meta author >}} | [Home](lecture-ordersplit.qmd)"
        output-file: lecture-presentation.html
    html:
        theme: [litera, ../styles.scss]

bibliography: ../AppliedBib.bib

execute:
    echo: true

engine: julia
---

# [Introduction]{.flow} {.title}

## [E-Commerce Trends]{.invert-font} {background-color="#000000" background-image="https://images.unsplash.com/photo-1585144860131-245d551c77f6?q=80&w=5404&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" background-size="cover" background-position="center"}

[**Question:** What are current trends in e-commerce?]{.invert-font .fragment}

::: footer
:::


## E-Commerce Sales

{{< include ../include/activate_environment.qmd >}}

- E-Commerce sales [are growing fast]{.highlight}:
    - Products are **no longer bound between borders**
    - Product variety is **rising**
    - Consumer shopping patterns are **shifting **
    - Brick-and-mortar stores **loose customers to the internet**
    - Covid-19 **accelerated this trend even more**

## Parcels Worldwide

- The number of parcels is rising:
    - **2014**: 44 billion parcels [@PitneyBowes2017]
    - **2019**: 103 billion parcels [@PitneyBowes2019]
    - **2026**: 220 – 262 billion parcels [^0] [@PitneyBowes2020]

[^0]: Forecast, not actual number

## Pressure on infrastructure

::: {.columns}
::: {.column width="40%"}
[![](https://images.unsplash.com/photo-1605902711834-8b11c3e3ef2f?q=80&w=2832&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D){width="90%"}](https://unsplash.com/photos/person-holding-black-samsung-android-smartphone-hTUZW7E7krg){width="85%"}
:::

::: {.column width="60%"}
- Consumers nowadays expect [free and fast deliveries and returns]{.highlight}
- Existing warehouses have to store an **increasing range of products**
- Better customer service requires **faster deliveries**
- Incurred fulfillment costs **depend on the number of parcels**
:::
:::

## Pressure on the environment

::: {.columns}
::: {.column width="40%"}
[![](https://images.unsplash.com/photo-1606942298712-8bd250ff40f0?q=80&w=2398&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D){width="90%"}](https://unsplash.com/photos/white-and-red-cars-parked-near-white-concrete-building-during-daytime-4jLpCkGqClE){width="85%"}
:::

::: {.column width="60%"}
- **Each parcel packaging** consumes resources during production
- Every dispatched parcel to the customer [causes CO₂ emissions]{.highlight}
- In case of returns, **more parcels cause more emissions**
:::
:::

---

# [Problem Structure]{.flow} {.title}

## Split Order

[Question:]{.question} **What is a split order?**

. . .

![](https://images.beyondsimulations.com/ao/ao_split-unoptimized.png){width="75%" .center}


## No Split Order

![](https://images.beyondsimulations.com/ao/ao_split-optimized.png){width="75%" .center}

## Reason for Split Orders

[Question:]{.question} **Why might they occur?**

. . .

- **Stock availability**: Some products are [out of stock]{.highlight} at a warehouse and need to be fulfilled from another warehouse
- **Capacity constraints**: Some products are stored at [different warehouses]{.highlight} and need to be shipped from elsewhere

## Impact of Split Orders

[Question:]{.question} **What are the consequences?**

. . .

- **Higher** shipping costs
- **Increased** packaging material
- **More** CO₂ emissions
- [Higher operational complexity]{.highlight}
- **Lower** customer satisfaction

## Mitigations?

[Question:]{.question} **What are possible mitigations?**

. . .

- **Consolidation**: Ship to a central warehouse before dispatch
- **Cross-docking**: Ship directly from supplier to customer
- **Transshipment**: Ship between warehouses before delivery
- **Co-allocation**: Predict [co-appearance of products]{.highlight} and allocate them to the [same warehouse]{.highlight}

## [Case Study]{.invert-font} {background-color="#000000" background-image="https://images.unsplash.com/photo-1672552226380-486fe900b322?q=80&w=3540&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" background-size="cover" background-position="center"}

::: {.invert-font .fragment}
**Key information** about the case:

- a large European e-commerce retailer
- the retailer has two warehouses
- product range cannot be stored in either warehouse
- product deliveries can be made to both warehouses
- products do not have to be stored exclusively
:::

::: footer
:::

---

# [Problem Structure - Version 1]{.flow} {.title}

## Optimizing Co-allocation

::: {.columns}
::: {.column width="40%"}
![](https://images.beyondsimulations.com/ao/ao_split-suppliers.png){width="90%" .center}
:::

::: {.column width="60%"}
[**Question:**]{.question} **What could be our objective?**


::: {.fragment}
We aim to improve the **SKU[^1]-warehouse allocation** to minimize the number of split parcels resulting from **SKUs being stored in different warehouses**.
:::
:::
:::

[^1]: SKU: Stock Keeping Unit

## Available Sets

[Question:]{.question} **What could be the sets here?**

. . .

::: {.incremental}
- $\mathcal{I}$ - Set of products indexed by $i \in \{1,2,...,|\mathcal{I}|\}$
- $\mathcal{K}$ - Set of warehouses indexed by $k \in \{1,\dots,|\mathcal{K}|\}$
- $\mathcal{M}$ - Set of customer orders $m \in \{1,2,...,|\mathcal{M}|\}$
:::


## Available Parameters

[Question:]{.question} **What are possible parameters?**

. . .

::: {.incremental}
- $c_k$ - Storage space of warehouse $k \in \{1,\dots,|\mathcal{K}|\}$
- $\boldsymbol{T}= (t_{m,i})$ - Past customer orders for SKUs
:::

. . .

[**Question:**]{.question} **What could the transactional data look like?**

## Transactional Data {.smaller}

| $t_{m,i}$ | A | B | C | D |
|-----------|---|---|---|---|
| 1         | 1 | 1 | 1 | 0 |
| 2         | 1 | 1 | 1 | 0 |
| 3         | 1 | 1 | 0 | 0 |
| 4         | 1 | 0 | 0 | 1 |
| 5         | 1 | 0 | 0 | 1 |
| 6         | 1 | 0 | 0 | 1 |
| 7         | 1 | 0 | 0 | 1 |
| 8         | 0 | 0 | 1 | 1 |

: Example of $\boldsymbol{T}$

## Past vs. Future

- The [transactional data]{.highlight} $\boldsymbol{T}$ is based on **past orders**
- It is a **binary matrix** of customer orders and SKUs
- We use this data to **assume** future co-occurrence
    - [Past co-occurrence predicts future co-occurrence]{.highlight}

. . .

[Question:]{.question} **What is your opinion on the assumption?**

---

## Split-Order Minimization

[Question:]{.question} **What could be our decision variable/s?**

. . .


::: {.callout-note}
## We have the following sets:
- $\mathcal{I}$ - Set of products indexed by $i \in \{1,2,...,|\mathcal{I}|\}$
- $\mathcal{K}$ - Set of warehouses indexed by $k \in \{1,\dots,|\mathcal{K}|\}$
- $\mathcal{M}$ - Set of customer orders $m \in \{1,2,...,|\mathcal{M}|\}$
:::

. . .

- $X_{i,k}$ - 1, if $i\in\mathcal{I}$ is stored in  $k\in\mathcal{K}$, 0 otherwise
- $Y_{m,i,k}$ - 1, if SKU $i\in\mathcal{I}$ is shipped from warehouse $k\in\mathcal{K}$ for customer order $m\in\mathcal{M}$, 0 otherwise

## Integer Programming Model

- @Catalan2012 created an **integer model**
- Number of SKUs of E-Commerce retailers can easily be **between 10,000 - 100,000**
- Number of customer orders necessary for "stable" results have to be higher in the order of **100,000 - 10,000,000**

. . .

[Question:]{.question} **Anybody an idea what this could mean?**

## Implementation Challenges

- Small instance with 10 SKUs and 1000 customer orders
- **CPLEX 20.1.0** needs 3100 seconds to solve the problem
- Computation times scales exponentially
- $\rightarrow$ **Not applicable** in real world applications!

## {.loud-slide}
::: {.r-fit-text}
Any idea what

could be done?
:::

::: footer
:::

---

# [Problem Structure - Version 2]{.flow} {.title}

## Heuristic Approach

- **Heuristic**: Fast, but not necessarily optimal
- **Approximation**: Not guaranteed to be optimal, but close
- **Computational Effort**: Reasonable even for large instances

. . .

::: {.callout-tip}
## Different view on the problem
Focus on the warehouses and the co-appearance of SKUs! Discard the exact information about the customer orders.
:::

## Objective

::: {.columns}
::: {.column width="40%"}

![](https://images.beyondsimulations.com/ao/ao_split-suppliers.png){width="75%"}

:::

::: {.column width="60%"}
[Question:]{.question} **What could be the objective?**

[Maximize the coappearance of products that are often **part of the same customer orders**.]{.fragment}

:::
:::

## Transaction Matrix

```{julia}
#| eval: true
#| output-location: column-fragment
T = [
    1 1 1 0;
    1 1 1 0;
    1 1 0 0;
    1 0 0 1;
    1 0 0 1;
    1 0 0 1;
    1 0 0 1;
    0 0 1 1
]

# Create the coappearance matrix
Q = T' * T
println("Coappearance matrix Q:")
display(Q)
```

## Coappearance Matrix

- $\boldsymbol{Q}$ is a [symmetric matrix]{.highlight}
- Proposed by @Catalan2012
- $\boldsymbol{Q} = (\boldsymbol{T}^T \cdot \boldsymbol{T})$ where $\boldsymbol{Q} = (q_{ij})_{i \in \{1,\dots,\mathcal{I}\},j \in \{1,\dots,\mathcal{I}\}}$
- $q_{ij}$ shows how often $i$ and $j$ appear **in the same order**

. . .

[Question:]{.question} **What do the principal diagonal values tell us?**

. . .

- How often each SKU appeared over all orders **(binary!)**

---

## How to approach the problem?

::: {.incremental}
- **Greedy Heuristic**[^catalan2012]: Allocation based on matrix
- **Mathematical Model**[^zhu2021]: Maximizes coappearance
- **GRASP**[^graps]: Good on small instances
- [New]{.highlight}: Max. coappearance with non-linear solver
- [New]{.highlight}: Heuristic based on Chi-Square Tests
:::

[^catalan2012]: Simple and very fast, @Catalan2012
[^zhu2021]: Computationally intensive with CPLEX, @Zhu2021
[^graps]: Greedy Randomized Adaptive Search Procedure, @Zhu2021

## Basic Setting

![](https://images.beyondsimulations.com/ao/ao_split-warehouse.png){width="75%"}

## Available Data (Version 2)

[Question:]{.question} **What could be the sets?**

. . .

- $\mathcal{I}$ - Set of products indexed by $i \in \{1,2,...,|\mathcal{I}|\}$
- $\mathcal{K}$ - Set of warehouses indexed by $k \in \{1,\dots,|\mathcal{K}|\}$

. . .

::: {.callout-important}
## No customer order information is needed!
We can focus on the SKUs and the warehouses, making the problem **much smaller**!
:::

---

## Available Parameters

[Question:]{.question} **What are possible parameters?**

::: {.incremental}
- $c_k$ - Storage space of warehouse $k \in \{1,\dots,|\mathcal{K}|\}$
- $\boldsymbol{Q}= (q_{ij})_{i \in \{1,\dots,\mathcal{I}\},j \in \{1,\dots,\mathcal{I}\}}$ - Coappearance matrix
:::

. . .

:::{.callout-important}
## Transactional Data replaced
Instead of the transactional data, we just **use the coappearance matrix** in our model!
:::

---

# [Model Formulation]{.flow} {.title}

## Decision Variables?

::: {.callout-note}
## We have the following sets:
- $\mathcal{I}$ - Set of products indexed by $i \in \{1,2,...,|\mathcal{I}|\}$
- $\mathcal{K}$ - Set of warehouses indexed by $k \in \{1,\dots,|\mathcal{K}|\}$
:::

. . .

::: {.callout-important}
## Our objective is to:
Maximize the coappearance of products that are often part of the same customer orders. **In more mathematical terms:** Maximize the sum of all unique pair-wise values $q_{i,j}$ of all SKUs stored in the same warehouse.
:::

. . .

[Question:]{.question} **What could be our decision variable/s?**

## Decision Variables

- $X_{i,k}$ - 1, if SKU $i\in\mathcal{I}$ is stored in  $k\in\mathcal{K}$, 0 otherwise

. . .

::: {.callout-important}
## Only one variable per SKU and warehouse!
As we don't need the customer order information, we only need to make a decision for each SKU and warehouse pair!
:::

## Decision Variable in Julia

[Question:]{.question} **How could we formulate the variable in Julia?**

```{julia}
#| eval: true
#| output: false
import Pkg; Pkg.add("SCIP")
using JuMP, SCIP # SCIP is a non-commercial MIQCP solver

warehouses = ["Hamburg", "Berlin"] # Add warehouses as a vector
skus = ["Smartphone", "Socks", "Charger"] # Add SKUs as a vector

warehouse_model = Model(SCIP.Optimizer)
```

. . .


```{julia}
#| eval: true
#| output-location: fragment
@variable(warehouse_model, X[i in skus, k in warehouses], Bin)
```

---

## Objective Function

::: {.callout-note}
## We need the following:
- $X_{i,k}$ - 1, if SKU $i\in\mathcal{I}$ is stored in  $k\in\mathcal{K}$, 0 otherwise
- $q_{ij}$ - Coappearance of SKU $i\in\mathcal{I}$ and $j\in\mathcal{I}$
:::

::: {.callout-important}
## Our objective is to:
Maximize the sum of all unique pair-wise values $q_{i,j}$ of all SKUs stored in the same warehouse. Note, that this is a **quadratic objective function**!
:::

. . .

[Question:]{.question} **What could the objective function look like?**

. . .

## Quadratic Objective Function

$$\text{maximize} \quad \sum_{i=2}^{\mathcal{I}} \sum_{j=1}^{i-1} \sum_{k \in \mathcal{K}} X_{ik}\times X_{jk} \times q_{ij}$$

. . .

::: {.callout-note}
## This is a **quadratic objective function**!
The quadratic terms are $X_{ik}\times X_{jk}$. This objective function is based on the **Quadratic Multiple Knapsack Problem (QMKP)**, formulated by @Hiley2006.
:::

## Objective Function in Julia

[Question:]{.question} **How could we formulate this in Julia?**

. . .

```{julia}
#| eval: true
#| output-location: fragment
Q = [2 1 2; 1 2 1; 2 1 2]

@objective(warehouse_model, 
    Max, 
    sum(
        X[skus[i], warehouses[k]] * X[skus[j], warehouses[k]] * Q[i,j]
        for i in 2:length(skus)
        for j in 1:i-1
        for k in 1:length(warehouses)
    )
)
```

---

# [Constraints]{.flow} {.title}

## What constraints?

::: {.columns}
::: {.column width="40%"}

![](https://images.beyondsimulations.com/ao/ao_split-warehouse.png){width="90%"}

:::

::: {.column width="60%"}
[Question:]{.question} **What constraints?**

::: {.fragment}
- Allocate each SKU **at least once**
- Warehouses have a **finite capacity**
- Capacity is **not exceeded**
:::
:::
:::

---

## Single Allocation Constraint?

::: {.callout-important}
## The goal of this constraint is to:
Ensure that each SKU is allocated at least once.
:::

. . .

::: {.callout-note}
## We need the following variable:

- $X_{i,k}$ - 1, if SKU $i\in\mathcal{I}$ is stored in  $k\in\mathcal{K}$, 0 otherwise

:::

. . .

[Question:]{.question} **What could the constraint look like?**

## Single Allocation Constraint

$$\sum_{k \in \mathcal{K}} X_{ik} \geq 1 \quad \forall i \in \mathcal{I}$$

. . .

::: {.callout-note}
## Remember, this is the variable:

- $X_{i,k}$ - 1, if SKU $i\in\mathcal{I}$ is stored in  $k\in\mathcal{K}$, 0 otherwise

:::

. . .

[Question:]{.question} **How could we change the constraint to ensure that each SKU is allocated only once?**

. . .

[Question:]{.question} **How could we add the constraint in Julia?**

## Single Allocation in Julia

```{julia}
#| eval: true
#| output-location: fragment
@constraint(warehouse_model, single_allocation[i in skus], 
    sum(X[i, k] for k in warehouses) >= 1
)
```

---

## Capacity Constraints?

::: {.callout-important}
## The goal of these constraints is to:
Ensure that the capacity of each warehouse is not exceeded.
::: 

. . .

::: {.callout-note}
## We need the following variables and parameters:

- $X_{i,k}$ - 1, if SKU $i\in\mathcal{I}$ is stored in  $k\in\mathcal{K}$, 0 otherwise
- $c_k$ - Storage space of warehouse $k\in\mathcal{K}$

:::

. . .

[Question:]{.question} **What could the second constraint be?**

## Capacity Constraints

$$\sum_{i \in \mathcal{I}} X_{ik} \leq c_k \quad \forall k \in \mathcal{K}$$

. . .

[And that's basically it!]{.highlight}

. . .

[Question:]{.question} **How could we add the second constraint in Julia?**

## Capacity Constraints in Julia

```{julia}
#| eval: true
#| output-location: fragment
capacities = Dict("Hamburg" => 2, "Berlin" => 1) # Add capacities

@constraint(warehouse_model, capacity[k in warehouses], 
    sum(X[i, k] for i in skus) <= capacities[k]
)
```

---

## QMK Model

$$\text{maximize} \quad \sum_{i=2}^{\mathcal{I}} \sum_{j=1}^{i-1} \sum_{k \in \mathcal{K}} X_{ik}\times X_{jk} \times q_{ij}$$


subject to:

$$
\begin{align*}
				& \sum_{k \in \mathcal{K}} X_{ik} \geq 1 && \forall i \in \mathcal{I}\\
				& \sum_{i \in \mathcal{I}} X_{ik} \leq c_{k} && \forall k \in \mathcal{K}\\
				& X_{ik} \in \{0,1\}  && \forall i \in \mathcal{I}, \forall k \in \mathcal{K}
\end{align*}
$$

## QMK Model in Julia

```{julia}
#| eval: true
#| output-location: fragment
set_attribute(warehouse_model, "display/verblevel", 0) # Hide solver output
optimize!(warehouse_model)

println("The optimal objective value is: ", objective_value(warehouse_model))
println("The optimal solution is: ", value.(X))
```

---

# [Model Characteristics]{.flow} {.title}

## Characteristics

::: {.incremental}
- Is the model formulation **linear/ non-linear?**
- What kind of **variable domain** do we have?
- Do we know the **split-orders** based on the **objective value?**
- Why **couldn't we use HiGHS** as solver?
:::


## Choosing a solver

- Identify **problem structure**, e.g. LP, MIP, NLP, QCP, MIQCP, ...
- What is the **size** of the problem?
- Is a **commercial** solver needed?

. . .

::: {.callout-note}
## Commercial Solvers
Commercial solvers are **faster** and **more robust** as open source solvers but also **more expensive**. During your studies, you can use most of them for free though! Nonetheless, we will only use open source solvers in this course.
:::

## Global vs Local Optimality

[![Local vs Global Optimum by Christoph Roser](https://i0.wp.com/www.allaboutlean.com/wp-content/uploads/2018/08/Local-Global-Optimum.png?w=1040&ssl=1){width="80%"}](https://www.allaboutlean.com/polca-pros-and-cons/local-global-optimum/)

---

## Model Assumptions

[Questions:]{.question} **On model assumptions**

::: {.incremental}

- What assumptions have we made?
- Problem with allocating SKUs to multiple warehouses?
- What else might pose a problem in the real world?

:::

# [Impact]{.flow} {.title}

## {.loud-slide}
::: {.r-fit-text}
Can this be 

applied?
:::

::: footer
:::

## Problem Size is Crucial

- Up to 10,000 SKUs →  **commercial solvers**
- More than 10,000 SKUs → **heuristics**
- For example, the [CHI]{.highlight} heuristic

. . .

::: {.callout-note}

## CHI-Heuristic

Detect dependencies between products and allocate them accordingly, as products within orders can have dependencies and products are bought with different frequencies!

:::

## Potential Improvements

![](https://images.beyondsimulations.com/ao/ao_split-reasons){width="80%"}

---

## Case Study

- More than 100,000 SKUs and several millions of orders
- Comparison of **different heuristics**[^opt_not]	
    - **CHI**: based on Chi-Square tests @vlcek_optimizing_2024
    - **GP, GO, GS, BS**: based on greedy algorithms [@Catalan2012]
    - **RA**: Random allocation of SKUs to warehouses

[^opt_not]:QMKP is not applicable for instance in case study

## Real Data Set

![](https://images.beyondsimulations.com/ao/ao_split-case.png){width="80%"}

## Conclusion

- Splits are **of no benefit**, except **faster customer deliveries**
- [Increase workload, packaging and shipping costs]{.highlight}
- Mathematical Optimisation of **"full" problem not solvable**
- **CHI** Heuristic close to mathematical optimisation

::: {.callout-note}
## And that's it for todays lecture!

We now have covered the Quadratic Multiple Knapsack Problem and are ready to start solving some tasks in the upcoming tutorial.
:::

## {.loud-slide}
::: {.r-fit-text}
Questions?
:::

::: footer
:::

---

# [Literature]{.flow} {.title}

## Literature I

For more interesting literature to learn more about Julia, take a look at the [literature list](../general/literature.qmd) of this course.

