[
  {
    "objectID": "part-04/tutorial-04-05-transport.html",
    "href": "part-04/tutorial-04-05-transport.html",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "",
    "text": "Welcome to this tutorial on the transportation problem using JuMP! As always, don’t worry if you’re new to optimization - we’ll walk through everything step by step using a real-world example.\nImagine you’re running a solar panel distribution company. You have several warehouses (suppliers) and need to ship solar panels to various solar farms (customers). Your goal is to minimize the total cost of transportation while meeting all customer demands.\nBy the end of this tutorial, you’ll be able to:\n\nUnderstand what a transportation problem is\nSet up a transportation problem using JuMP\nSolve the problem and interpret the results\n\nLet’s start by loading the necessary packages:\n\nusing JuMP, HiGHS\nusing DataFrames, CSV",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-05-transport.html#exercise-1.1---understand-the-data",
    "href": "part-04/tutorial-04-05-transport.html#exercise-1.1---understand-the-data",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Exercise 1.1 - Understand the Data",
    "text": "Exercise 1.1 - Understand the Data\nTake a moment to look at the data. Can you answer these questions?\n\nHow many warehouses do we have? Save the number in a variable called num_warehouses.\nHow many solar farms are we supplying? Save the number in a variable called num_solar_farms.\n\n\n# YOUR ANSWERS BELOW\n# Hint: Use the `nrow()` function to count rows\n\n\n\nCode\n# Test your understanding\nnum_warehouses = nrow(available)\nnum_solar_farms = nrow(requested)\n\nprintln(\"Great job! Here are the answers:\")\nprintln(\"Number of warehouses: \", num_warehouses)\nprintln(\"Number of solar farms: \", num_solar_farms)",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-05-transport.html#exercise-3.1---creating-the-model-instance",
    "href": "part-04/tutorial-04-05-transport.html#exercise-3.1---creating-the-model-instance",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Exercise 3.1 - Creating the model instance",
    "text": "Exercise 3.1 - Creating the model instance\nFrom the last tutorial, you should know how to do this. Create a model instance called transport_model and set the optimizer to HiGHS.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert typeof(transport_model) == JuMP.Model\nprintln(\"Model instance created successfully!\")",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-05-transport.html#define-the-variables",
    "href": "part-04/tutorial-04-05-transport.html#define-the-variables",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Define the variables",
    "text": "Define the variables\nWe can now define the variables of our model. We need to define a variable for each supplier and customer pair. As before, we can use the @variable macro to define the variables. The syntax is @variable(model, varname[index1,index2] &gt;= 0), where model is the model instance, varname is the name of the variable, and index1 and index2 are the indices of the variable. We can use vectors as input for the indices, but we could also use the keys of the dictionaries. In the following code block we mixed both options, to show you that it is possible.\n\n# Define variable\n@variable(\n    transport_model, \n    X[available.supplier,keys(requested_dict)] &gt;= 0\n)",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-05-transport.html#define-the-objective",
    "href": "part-04/tutorial-04-05-transport.html#define-the-objective",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Define the objective",
    "text": "Define the objective\nNext, we can define the objective of our model. We want to maximize the profit, which is the revenue minus the variable costs and the transportation costs. As before, we can use the @objective macro to define the objective. The syntax is @objective(model, Max, expression), where model is the model instance, Max indicates that we want to maximize the expression, and expression is the expression we want to maximize.\n\n@objective(transport_model, Max, \n    sum((revenue-varCosts-travelCosts_dict[(i,j)]) * X[i,j] \n    for i in keys(available_dict), j in keys(requested_dict))\n)",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-05-transport.html#define-the-constraints",
    "href": "part-04/tutorial-04-05-transport.html#define-the-constraints",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Define the constraints",
    "text": "Define the constraints\nWe can now define the constraints of our model. We need to ensure that the supply from each supplier is enough to cover the demand of each customer. We can use the @constraint macro to define the constraints. The syntax is @constraint(model, expression), where model is the model instance and expression is the expression we want to constrain.\nTo illustrate the use of dictionaries, we will again use the keys of the dictionaries to define the constraints in the following code block.\n\n@constraint(transport_model, \n    restrictAvailable[i in keys(available_dict)], \n    sum(X[i,j] for j in keys(requested_dict)) &lt;= available_dict[i]\n)\n\nNaturally, we could also use the vectors with the names from the DataFrames to define the constraints or we could also just work with ranges from the beginning, e.g. 1:length(available.supplier) and 1:length(requested.solar_farm). Working with names is often more convenient, though.\n\n@constraint(transport_model,\n    restrictDemand[j in requested.solar_farm], \n    sum(X[i,j] for i in available.supplier) &lt;= requested_dict[j]\n)\n\nAnd that’s it! We have now defined the model and can start optimizing.",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-05-transport.html#exercise-5.1---start-optimization",
    "href": "part-04/tutorial-04-05-transport.html#exercise-5.1---start-optimization",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Exercise 5.1 - Start optimization",
    "text": "Exercise 5.1 - Start optimization\nStart the optimization as usual by calling the optimize! function on the model instance.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert termination_status(transport_model) == MOI.OPTIMAL\nprintln(\"Model optimized successfully!\")\n\n\nNow, we can access the values of the variables at the optimal solution. But remember, we defined the variables with the keys of the dictionaries, so we need to convert the result back to a DataFrame. Calling the variable itself will just show the structure of the variable, not the values.\n\nfirst(X,5)\n\nThus, we need to use the value function to extract the values from the variable.\n\ntransport_values = value.(X)\n\nThe result is a DenseAxisArray{Float64,2,...} with index sets. To convert it to a DataFrame, we just need to iterate over the keys dictionaries and store the values in a new DataFrame. As we are not interested in values which are zero, we can skip those.\nFirst, we need to initialize an empty DataFrame with the correct column names.\n\ntransport_df = DataFrame(\n    supplier = [],\n    solar_farm = [],\n    truckloads = []\n)\n\n0×3 DataFrame\n\n\n\nRow\nsupplier\nsolar_farm\ntruckloads\n\n\n\nAny\nAny\nAny\n\n\n\n\n\n\n\n\nThen, we can iterate over the keys of the dictionaries and store the values in the DataFrame if they are greater than zero.\n\nfor i in keys(available_dict)\n    for j in keys(requested_dict)\n        if transport_values[i,j] &gt; 0\n            push!(transport_df, (\n                supplier = i,\n                solar_farm = j,\n                truckloads = transport_values[i,j]\n                )\n            )\n        end\n    end\nend\n\nFinally, we can print the first few rows of the transportation plan to check if it looks correct.\n\nprintln(\"Begining of the transportation plan:\")\nfirst(transport_df,5)\n\n\n\n\n\n\n\nNote\n\n\n\nAlthough the above code looks rather complicated, it is essentially just iterating over the keys of the dictionaries and storing the values in a new DataFrame. This is a common pattern in optimization, as we often want to convert the result of an optimization problem into a more convenient format for reporting or further processing.",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html",
    "href": "part-02/tutorial-02-01-variables.html",
    "title": "Tutorial II.I - Variables and Types",
    "section": "",
    "text": "Welcome to this interactive Julia tutorial which introduces the basics of variables and types. Understanding variables and their types is crucial as they are the building blocks of any program. They determine how data is stored, manipulated, and how efficiently your code runs.\nThis script is designed to be interactive. Follow the instructions, write your code in the designated code blocks, and then execute the corresponding code. Each exercise is followed by an @assert statement that checks your solution.\nThere are two ways to run the code:\n\nThe easiest way to run the code is by using VS Code. First, install the Julia and the Jupyter Extension. Then, you can open the downloaded .ipynb files and run the code from there.\nThe second way is by using IJulia. Start Julia, and type using IJulia; notebook() in the Julia prompt. This will open a new browser window where you can run the code. If you have not installed IJulia yet, you can do so by typing ] in the Julia prompt to open the package manager, and then installing IJulia by typing add IJulia.\n\n\n\n\n\n\n\nNote\n\n\n\nAlways replace ‘YOUR CODE BELOW’ with your actual code.",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-1.1---declare-a-variable",
    "href": "part-02/tutorial-02-01-variables.html#exercise-1.1---declare-a-variable",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 1.1 - Declare a Variable",
    "text": "Exercise 1.1 - Declare a Variable\nDeclare a variable named x and assign it the value 1.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert x == 1 \"Check again, the value of x should be 1. Remember to assign the value directly to x.\"\nprintln(\"Great, you have correctly assigned the value $x to the variable 'x'.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-1.2---declare-a-string-variable",
    "href": "part-02/tutorial-02-01-variables.html#exercise-1.2---declare-a-string-variable",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 1.2 - Declare a String Variable",
    "text": "Exercise 1.2 - Declare a String Variable\nDeclare a variable named hi and assign it the string \"Hello, Optimization!\".\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert hi == \"Hello, Optimization!\" \"Make sure the variable 'hi' contains the exact string \\\"Hello, Optimization\\\"!\"\nprintln(\"Good, the variable 'hi' now states \\\"$hi\\\".\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-2.1---create-an-integer-variable",
    "href": "part-02/tutorial-02-01-variables.html#exercise-2.1---create-an-integer-variable",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 2.1 - Create an Integer Variable",
    "text": "Exercise 2.1 - Create an Integer Variable\nCreate an Integer variable answerUniverse and set it to 42.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert answerUniverse == 42 \"The variable 'answerUniverse' should hold 42.\"\nprintln(\"Great, the answer to all questions on the universe is $answerUniverse now.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-2.2---create-a-float-variable",
    "href": "part-02/tutorial-02-01-variables.html#exercise-2.2---create-a-float-variable",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 2.2 - Create a Float Variable",
    "text": "Exercise 2.2 - Create a Float Variable\nCreate a Float variable money and set it to 1.35.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert money == 1.35 \"The variable 'money' should hold the Float64 1.35.\"\nprintln(\"Perfect, the you have stored $money in the variable 'money'.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-2.3---create-a-boolean-variable",
    "href": "part-02/tutorial-02-01-variables.html#exercise-2.3---create-a-boolean-variable",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 2.3 - Create a Boolean Variable",
    "text": "Exercise 2.3 - Create a Boolean Variable\nCreate a Boolean variable isStudent and set it to true.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert isStudent == true \"The variable 'isStudent' should be set to true.\"\nprintln(\"Correct, you are a student now.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-3.1---type-annotation",
    "href": "part-02/tutorial-02-01-variables.html#exercise-3.1---type-annotation",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 3.1 - Type Annotation",
    "text": "Exercise 3.1 - Type Annotation\nDeclare a variable y with an explicit type annotation of Int64 and assign it the value 5.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert y == 5 && typeof(y) == Int64 \"Make sure 'y' is of type Int64 and has the value 5.\"\nprintln(\"Great! You've created an Int64 variable 'y' with the value $y.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-4.1---string-interpolation",
    "href": "part-02/tutorial-02-01-variables.html#exercise-4.1---string-interpolation",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 4.1 - String Interpolation",
    "text": "Exercise 4.1 - String Interpolation\nCreate a string message that says \"y is [value of y]\" using string interpolation.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert message == \"y is 5\" \"Make sure your string includes the correct value of y.\"\nprintln(\"Excellent! Your interpolated string is: $message\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html",
    "href": "part-02/tutorial-02-03-comparisons.html",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "",
    "text": "Imagine you’re teaching a computer to make decisions. Just like we compare things in everyday life (“Is it raining?”, “Do I have enough money?”), computers need ways to compare values and make choices. This tutorial will show you how to help computers make these comparisons!\nFollow the instructions, write your code in the designated code blocks, and execute the corresponding code cell.",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-1.1---compare-if-10-is-greater-than-5",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-1.1---compare-if-10-is-greater-than-5",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 1.1 - Compare if 10 is greater than 5",
    "text": "Exercise 1.1 - Compare if 10 is greater than 5\nCompare if 10 is greater than 5 and store the result in comparison1.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert comparison1 == true\nprintln(\"comparison1 is \", comparison1)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-1.2---compare-if-x-is-not-equal-to-y",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-1.2---compare-if-x-is-not-equal-to-y",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 1.2 - Compare if x is not equal to y",
    "text": "Exercise 1.2 - Compare if x is not equal to y\nDefine variables x with value \"Hello\" and y with value \"world\". Compare if x is not equal to y and store the result in comparison2.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert x == \"Hello\"\n@assert y == \"world\"\n@assert comparison2 == true\nprintln(\"Comparison2 is \", comparison2)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-2.1---use-the-and-operator",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-2.1---use-the-and-operator",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 2.1 - Use the AND operator",
    "text": "Exercise 2.1 - Use the AND operator\nUse the AND operator to check if 10 is greater than 5 and hello is equal to hello. Store the result in logic1.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert logic1 == true\nprintln(\"logic1 is \", logic1)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-2.2---use-the-or-operator",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-2.2---use-the-or-operator",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 2.2 - Use the OR operator",
    "text": "Exercise 2.2 - Use the OR operator\nUse the OR operator to check if 10 is less than 5 or hello is equal to hello. Store the result in logic2.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert logic2 == true\nprintln(\"logic2 is \", logic2)\n\n\n\n\n\n\n\n\nTip\n\n\n\nJulia uses short-circuit evaluation for && and || operators. This means that the second operand is only evaluated if necessary.",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-2.3---use-the-not-operator",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-2.3---use-the-not-operator",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 2.3 - Use the NOT operator",
    "text": "Exercise 2.3 - Use the NOT operator\nCheck whether 10 is greater than 5 and store the result in logic3. Then, use the NOT operator to invert logic3. Store the result in logic4.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert logic3 == true\n@assert logic4 == false\nprintln(\"logic3 is \", logic3,\" and logic4 is\", logic4)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-2.4---chaining-comparisons",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-2.4---chaining-comparisons",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 2.4 - Chaining Comparisons",
    "text": "Exercise 2.4 - Chaining Comparisons\nJulia has a neat feature that lets you write comparisons the way you think about them:\n# Instead of writing:\nage &gt;= 13 && age &lt;= 19    # Is age between 13 and 19?\n\n# You can write:\n13 &lt;= age &lt;= 19          # Much more natural!\nReal-world examples:\n# Is the body temperature normal?\nnormal_temperature = (36.5 &lt;= body_temp &lt;= 37.5)\n\n# Is the current hour within working hours?\nworking_hours = (9 &lt;= current_hour &lt; 17)\nCheck if x is between 1 and 10 (exclusive) using a chained comparison. Store the result in chained_comparison.\n\nx = 5\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert chained_comparison == true\nprintln(\"chained_comparison is \", chained_comparison)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html",
    "href": "part-02/tutorial-02-04-loops.html",
    "title": "Tutorial II.IV - Loops",
    "section": "",
    "text": "Imagine you need to do the same task many times - like sending emails to 100 people or counting from 1 to 10. Instead of writing the same code over and over, we use loops! Loops are like having a helpful assistant who can repeat tasks for you.\nFollow the instructions, input your code in the designated areas, and verify your implementations with @assert statements.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-1.1---sum-the-numbers-from-1-to-5",
    "href": "part-02/tutorial-02-04-loops.html#exercise-1.1---sum-the-numbers-from-1-to-5",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 1.1 - Sum the Numbers from 1 to 5",
    "text": "Exercise 1.1 - Sum the Numbers from 1 to 5\nSum the numbers from 1 to 5 in a loop. The next lines initialize sum_numbers to 0. The sum you compute should accumulate in this variable.\n\nsum_numbers = 0\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert sum_numbers == 15\nprintln(\"Sum of numbers from 1 to 5: \", sum_numbers)",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-1.2---sum-only-the-even-numbers-from-1-to-10",
    "href": "part-02/tutorial-02-04-loops.html#exercise-1.2---sum-only-the-even-numbers-from-1-to-10",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 1.2 - Sum Only the Even Numbers from 1 to 10",
    "text": "Exercise 1.2 - Sum Only the Even Numbers from 1 to 10\nSum only the even numbers from 1 to 10. Again, we initialize a variable sum_evens to 0. The sum you compute should accumulate in this variable.\n\nsum_evens = 0\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert sum_evens == 30\nprintln(\"Sum of even numbers from 1 to 10: \", sum_evens)\n\n\n\n\n\n\n\nTip\n\n\n\nHint: You can use the modulo operator % to check if a number is even. The modulo operator returns the remainder of the division of two numbers. If a number is divisible by another number, the remainder is 0. The following example checks if 4 is even: 4 % 2 == 0.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-1.3---exit-the-loop-if-the-current-fruit-is-banana",
    "href": "part-02/tutorial-02-04-loops.html#exercise-1.3---exit-the-loop-if-the-current-fruit-is-banana",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 1.3 - Exit the Loop if the Current Fruit is Banana",
    "text": "Exercise 1.3 - Exit the Loop if the Current Fruit is Banana\nIterate over each fruit in the fruits array, store the current fruit in current_fruit, and exit the loop if current_fruit is banana. The next lines initialize the fruits array and current_fruit variable.\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\ncurrent_fruit = \"None\"\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert current_fruit == \"banana\"\nprintln(\"The current fruit is: \", current_fruit)",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-2.1---subtract-from-10-in-increments-of-1-until-the-result-is-less-than-3",
    "href": "part-02/tutorial-02-04-loops.html#exercise-2.1---subtract-from-10-in-increments-of-1-until-the-result-is-less-than-3",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 2.1 - Subtract from 10 in Increments of 1 Until the Result is Less Than 3",
    "text": "Exercise 2.1 - Subtract from 10 in Increments of 1 Until the Result is Less Than 3\nSubtract from 10 in increments of 1 until the result is less than 3. The next line initializes current_value to 10. The result should be in this variable.\n\ncurrent_value = 10\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert current_value == 2\nprintln(\"The first value smaller than 3 is: \", current_value)",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-2.2---find-the-first-multiple-of-7-greater-than-50",
    "href": "part-02/tutorial-02-04-loops.html#exercise-2.2---find-the-first-multiple-of-7-greater-than-50",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 2.2 - Find the First Multiple of 7 Greater Than 50",
    "text": "Exercise 2.2 - Find the First Multiple of 7 Greater Than 50\nFind the first multiple of 7 greater than 50 using an indefinite loop. The next line initializes first_multiple_of_7 to 0. The first multiple should be in this variable.\n\nfirst_multiple_of_7 = 0\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert first_multiple_of_7 == 56\nprintln(\"First multiple of 7 greater than 50: \", first_multiple_of_7)\n\n\n\n\n\n\n\nTip\n\n\n\n‘while true … end’ constructs an infinite loop. You can exit the loop using a ‘break’ statement if a condition is met.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-3.1---compute-the-product-of-each-pair-of-elements-from-two-arrays",
    "href": "part-02/tutorial-02-04-loops.html#exercise-3.1---compute-the-product-of-each-pair-of-elements-from-two-arrays",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 3.1 - Compute the Product of Each Pair of Elements from Two Arrays",
    "text": "Exercise 3.1 - Compute the Product of Each Pair of Elements from Two Arrays\nCompute the product of each pair of elements from two arrays. For example, the product of two numbers a and b is a * b. The next lines initialize numbers1, numbers2 arrays, and the products array to store your results.\n\nnumbers1 = [1, 2, 3]\nnumbers2 = [4, 5, 6]\nproducts = []\n# YOUR CODE BELOW\n\n# Test your answer\n@assert products == [4, 5, 6, 8, 10, 12, 12, 15, 18]\nprintln(\"Products of each pair from two arrays: \", products)\n\n\n\n\n\n\n\nTip\n\n\n\nRemember, you can use push!() to append elements to an array.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-4.1---create-a-list-of-even-numbers",
    "href": "part-02/tutorial-02-04-loops.html#exercise-4.1---create-a-list-of-even-numbers",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 4.1 - Create a List of Even Numbers",
    "text": "Exercise 4.1 - Create a List of Even Numbers\nCreate a list of even numbers from 1 to 10 using a list comprehension.\n\nlet\n# YOUR CODE BELOW\n\n# Test your answer\n@assert even_numbers == [2, 4, 6, 8, 10]\nprintln(\"Even numbers from 1 to 10: \", even_numbers)\nend",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html",
    "href": "part-04/tutorial-04-01-jump.html",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "",
    "text": "Welcome to this beginner-friendly tutorial on mathematical optimization using JuMP and the HiGHS solver in Julia! Don’t worry if these terms sound unfamiliar – we’ll explain everything step by step.\nIn this tutorial, you’ll learn how to: 1. Set up a simple optimization problem 2. Define variables and constraints 3. Create an objective function 4. Solve the problem and interpret the results\nWe’ll use a real-world example to make these concepts more relatable. Imagine you’re managing a small factory that produces two types of products. Your goal is to maximize profit while working within certain limitations. This is exactly the kind of problem that mathematical optimization can solve!\n\n\nJuMP (Julia for Mathematical Programming) is a powerful tool that helps us describe optimization problems in a way that computers can understand and solve. Think of it as a translator between your business problem and the mathematical solver.\n\n\n\nHiGHS is an open-source solver that can find solutions to the optimization problems we describe using JuMP. It’s like a very smart calculator that can handle complex problems quickly and efficiently.\n\n\n\nLet’s break down our factory management problem:\n\nYou produce two products: Product A and Product B\nEach product gives you a different profit:\n\nProduct A: 100 profit per unit\nProduct B: 150 profit per unit\n\nYou have two departments: Cutting and Finishing\nEach product requires different amounts of time in each department:\n\nProduct A: 2 hours in Cutting, 4 hours in Finishing\nProduct B: 4 hours in Cutting, 3 hours in Finishing\n\nYou have limited time available in each department:\n\nCutting: 40 hours total\nFinishing: 60 hours total\n\n\nYour goal is to decide how many of each product to make to maximize your total profit, while not exceeding the available time in each department.\n\n\n\nFirst, we need to install and load the necessary packages. If you haven’t already installed JuMP and HiGHS, run the following code:\n\nimport Pkg; Pkg.add([\"JuMP\",\"HiGHS\"])\n\nNow, let’s load these packages:\n\nusing JuMP, HiGHS\n\nGreat! We’re now ready to start building our optimization model.",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html#what-is-jump",
    "href": "part-04/tutorial-04-01-jump.html#what-is-jump",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "",
    "text": "JuMP (Julia for Mathematical Programming) is a powerful tool that helps us describe optimization problems in a way that computers can understand and solve. Think of it as a translator between your business problem and the mathematical solver.",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html#what-is-highs",
    "href": "part-04/tutorial-04-01-jump.html#what-is-highs",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "",
    "text": "HiGHS is an open-source solver that can find solutions to the optimization problems we describe using JuMP. It’s like a very smart calculator that can handle complex problems quickly and efficiently.",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html#our-example-problem",
    "href": "part-04/tutorial-04-01-jump.html#our-example-problem",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "",
    "text": "Let’s break down our factory management problem:\n\nYou produce two products: Product A and Product B\nEach product gives you a different profit:\n\nProduct A: 100 profit per unit\nProduct B: 150 profit per unit\n\nYou have two departments: Cutting and Finishing\nEach product requires different amounts of time in each department:\n\nProduct A: 2 hours in Cutting, 4 hours in Finishing\nProduct B: 4 hours in Cutting, 3 hours in Finishing\n\nYou have limited time available in each department:\n\nCutting: 40 hours total\nFinishing: 60 hours total\n\n\nYour goal is to decide how many of each product to make to maximize your total profit, while not exceeding the available time in each department.",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html#setting-up",
    "href": "part-04/tutorial-04-01-jump.html#setting-up",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "",
    "text": "First, we need to install and load the necessary packages. If you haven’t already installed JuMP and HiGHS, run the following code:\n\nimport Pkg; Pkg.add([\"JuMP\",\"HiGHS\"])\n\nNow, let’s load these packages:\n\nusing JuMP, HiGHS\n\nGreat! We’re now ready to start building our optimization model.",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html#exercise-2.1---create-variables",
    "href": "part-04/tutorial-04-01-jump.html#exercise-2.1---create-variables",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "Exercise 2.1 - Create Variables",
    "text": "Exercise 2.1 - Create Variables\nNow it’s your turn! Create two continuous variables equal to or larger than 0 called productA and productB that represent the number of units produced in our problem for our model model.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert @isdefined productA\n@assert typeof(productA) == VariableRef\n@assert has_upper_bound(productA) == false\n@assert has_lower_bound(productA) == true\n@assert lower_bound(productA) == 0\n@assert @isdefined productA\n@assert typeof(productB) == VariableRef\n@assert has_upper_bound(productB) == false\n@assert has_lower_bound(productB) == true\n@assert lower_bound(productB) == 0\nprintln(\"Variables added to the model successfully!\")",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html#exercise-3.1---create-constraints",
    "href": "part-04/tutorial-04-01-jump.html#exercise-3.1---create-constraints",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "Exercise 3.1 - Create Constraints",
    "text": "Exercise 3.1 - Create Constraints\nCreate two constraints based on the on the Cutting and Finishing department hours of the problem description in this tutorial. Call the first constraint cutting_constraint and the second constraint finishing_constraint.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert is_valid(model, cutting_constraint)\n@assert is_valid(model, finishing_constraint)\nprintln(\"Constraints added to the model successfully!\")\nprintln(\"Note, that only the existence of these constraints was checked!\")\nprintln(\"The optimization later will show, whether the formulation was correct.\")",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html#exercise-4.1---create-the-objective-function",
    "href": "part-04/tutorial-04-01-jump.html#exercise-4.1---create-the-objective-function",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "Exercise 4.1 - Create the Objective Function",
    "text": "Exercise 4.1 - Create the Objective Function\nCreate the objective function based on the problem description of this tutorial. The objective is to maximize profit based on the values of productA and productB.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert typeof(objective_function(model)) == AffExpr\nprintln(\"An objective function defined successfully!\")\nprintln(\"The optimization later will show, whether the formulation was correct.\")",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html",
    "href": "part-03/tutorial-03-01-functions.html",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "",
    "text": "Imagine you have a helpful worker. Instead of explaining every little task to it each time, you can teach it specific jobs once, and then just ask it to do those jobs later. In programming, these “jobs” are called functions! This tutorial will show you how to create and use functions in Julia, making your code more organized and reusable.\nFollow the instructions, input your code in the designated areas, and verify your implementations with @assert statements.",
    "crumbs": [
      "03 Data",
      "01 - Functions"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#exercise-1.1---define-and-test-a-simple-addition-function",
    "href": "part-03/tutorial-03-01-functions.html#exercise-1.1---define-and-test-a-simple-addition-function",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "Exercise 1.1 - Define and Test a Simple Addition Function",
    "text": "Exercise 1.1 - Define and Test a Simple Addition Function\nDefine and test a simple addition function. Define a function add that takes two parameters and returns their sum.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert add(10, 5) == 15 \"The sum computed is $(add(10, 5)) but should be 15.\"\nprintln(\"The sum computed is $(add(10, 5)), wonderful!\")",
    "crumbs": [
      "03 Data",
      "01 - Functions"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#exercise-2.1---return-a-local-variable",
    "href": "part-03/tutorial-03-01-functions.html#exercise-2.1---return-a-local-variable",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "Exercise 2.1 - Return a Local Variable",
    "text": "Exercise 2.1 - Return a Local Variable\nTry to execute the following block of code. The objective is to understand how to return the local_variable_one from the function scope_test. Your task is to change the function, to return the value of local_variable_one.\n\n# YOUR CHANGES BELOW\nfunction scope_test()\n    local_variable_one = 10\n    local_variable_two = 20\nend\n\n# YOUR CHANGES ABOVE\n# Test your function\n@assert scope_test() == 10 \"The value exported is $(scope_test()).\"\nprintln(\"The value exported is $(scope_test()), you solved it!\")",
    "crumbs": [
      "03 Data",
      "01 - Functions"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#exercise-2.2---define-an-implicit-return-function",
    "href": "part-03/tutorial-03-01-functions.html#exercise-2.2---define-an-implicit-return-function",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "Exercise 2.2 - Define an Implicit Return Function",
    "text": "Exercise 2.2 - Define an Implicit Return Function\nDefine and test an implicit return function. Define a function subtract that takes two parameters and implicitly returns their difference. The implicit return feature makes your code cleaner and more concise.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert subtract(10, 5) == 5  \"The difference computed is $(subtract(10, 5)) but should be 5.\"\nprintln(\"The difference computed is $(subtract(10, 5)), perfect!\")",
    "crumbs": [
      "03 Data",
      "01 - Functions"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#exercise-3.1---match-results-to-assertions",
    "href": "part-03/tutorial-03-01-functions.html#exercise-3.1---match-results-to-assertions",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "Exercise 3.1 - Match Results to Assertions",
    "text": "Exercise 3.1 - Match Results to Assertions\nMatch the results from the previous example to the correct assertions:\n\n# YOUR CHANGES BELOW\n@assert result2 == 30 \"result1 should be the sum of two numbers\"\n@assert result3 == \"Hello, World!\" \"result2 should be the concatenation of two strings\"\n@assert result1 == \"Generic operation for objects of type String and Int64\" \"result3 should use the generic operation\"\nprintln(\"You solved it, the assertions are now correct!\")\n\n\n\n\n\n\n\nTip\n\n\n\nHint: Look at the types of arguments used in each operation call and match them to the appropriate method.",
    "crumbs": [
      "03 Data",
      "01 - Functions"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-03-constraints.html",
    "href": "part-04/tutorial-04-03-constraints.html",
    "title": "Tutorial IV.III - Constraints in JuMP",
    "section": "",
    "text": "Welcome to this tutorial on constraints in JuMP! In this lesson, we’ll explore how to add rules (constraints) to our optimization problems.\nBy the end of this tutorial, you’ll be able to: 1. Create simple constraints for your optimization problems 2. Use containers (like arrays) to manage multiple similar constraints 3. Create more complex constraints based on conditions\nLet’s start by loading the necessary packages:\n\nusing JuMP, HiGHS\n\nNow, let’s create a model that we’ll use throughout this tutorial:\n\nmodel = Model(HiGHS.Optimizer)\nprintln(\"Great! We've created a new optimization model.\")\n\nGreat! We've created a new optimization model.",
    "crumbs": [
      "04 Optimization",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-03-constraints.html#exercise-1.1---define-arrays",
    "href": "part-04/tutorial-04-03-constraints.html#exercise-1.1---define-arrays",
    "title": "Tutorial IV.III - Constraints in JuMP",
    "section": "Exercise 1.1 - Define arrays",
    "text": "Exercise 1.1 - Define arrays\nScenario: Imagine you’re optimizing the production of 8 different products in a factory. Each product has a different profit margin, and you want to maximize total profit.\nDefine an array of variables and an objective function for another_model. The variables should be called profits and have a range from 1:8. It has a lower bound of 0. The objective should be a Maximization of the sum of all profits.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert length(profits) == 8 && all(lower_bound(profits[i]) == 0 for i in 1:8)\n@assert typeof(objective_function(another_model)) == AffExpr\nprintln(\"Objective function with container variables defined successfully!\")",
    "crumbs": [
      "04 Optimization",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-03-constraints.html#exercise-3.1---add-a-conditional-constraints",
    "href": "part-04/tutorial-04-03-constraints.html#exercise-3.1---add-a-conditional-constraints",
    "title": "Tutorial IV.III - Constraints in JuMP",
    "section": "Exercise 3.1 - Add a conditional constraints",
    "text": "Exercise 3.1 - Add a conditional constraints\nScenario extension: The first 4 products are new and have limited market demand.\nAdd a conditional constraint smallProfit to the previous model. Condition: Only the first 4 variables profit have to be lower than 5.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert all(is_valid(another_model, smallProfit[i]) for i in 1:4)\nprintln(\"Conditional constraint implemented successfully!\")\nprintln(\"Checking successful implementation.\")\noptimize!(another_model)\nstatus = termination_status(another_model)\n@assert status == MOI.OPTIMAL \"Sorry, something didn't work out as the model status is $status\"\n@assert objective_value(another_model) ≈ 68 atol=1e-4 \"Although you have an optimal solution, \n    the should be 68 not $(objective_value(another_model)). Is the model correct?\"\nprintln(\"Model components validated successfully!\")",
    "crumbs": [
      "04 Optimization",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html",
    "href": "part-03/tutorial-03-02-handling.html",
    "title": "Tutorial III.II - Package Management",
    "section": "",
    "text": "Welcome to this beginner-friendly guide on understanding packages and package management in Julia!\nThink of packages as pre-written sets of tools that extend what Julia can do. It’s like having a toolbox where you can add new tools (packages) to help you solve specific problems. For example, there are packages for working with data, creating visualizations, or solving complex math problems.\nThe best part? Most Julia packages are free to use, thanks to the open-source community!\n\n\n\n\n\n\nNote\n\n\n\nWhile we’ll practice some commands here, you’ll typically manage packages in Julia’s REPL (Read-Eval-Print Loop), which is like Julia’s command center.",
    "crumbs": [
      "03 Data",
      "02 - Packages"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html#exercise-1.1---import-the-pkg-module",
    "href": "part-03/tutorial-03-02-handling.html#exercise-1.1---import-the-pkg-module",
    "title": "Tutorial III.II - Package Management",
    "section": "Exercise 1.1 - Import the Pkg Module",
    "text": "Exercise 1.1 - Import the Pkg Module\nImport the Pkg module to start managing packages effectively.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\ntry \n    Pkg.update()\n    println(\"Pkg module imported successfully and packages were updated!\")\ncatch e\n    @error \"The Pkg module was not imported yet! Have you used the correct syntax?\"\nend",
    "crumbs": [
      "03 Data",
      "02 - Packages"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html#exercise-2.1---add-the-dataframes-package",
    "href": "part-03/tutorial-03-02-handling.html#exercise-2.1---add-the-dataframes-package",
    "title": "Tutorial III.II - Package Management",
    "section": "Exercise 2.1 - Add the DataFrames Package",
    "text": "Exercise 2.1 - Add the DataFrames Package\nLet’s add a popular package called DataFrames. It’s great for working with structured data, like spreadsheets.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\ntry \n    using DataFrames\n    println(\"Package added successfully!\")\ncatch e\n    @error \"Package was not added yet! Have you used the correct syntax?\"\nend",
    "crumbs": [
      "03 Data",
      "02 - Packages"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html#conclusion",
    "href": "part-03/tutorial-03-02-handling.html#conclusion",
    "title": "Tutorial III.II - Package Management",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You’ve completed the tutorial on packages and package management in Julia. These skills are important for effectively managing and utilizing external libraries. Continue to the next file to learn more.",
    "crumbs": [
      "03 Data",
      "02 - Packages"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html",
    "href": "part-01/lecture-introduction.html",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Field: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: tobias.vlcek@uni-hamburg.de\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI really appreciate active participation and interaction!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#about-me",
    "href": "part-01/lecture-introduction.html#about-me",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Field: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: tobias.vlcek@uni-hamburg.de\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI really appreciate active participation and interaction!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#lectures",
    "href": "part-01/lecture-introduction.html#lectures",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Lectures",
    "text": "Lectures\n\nEvery Tuesday between 10.15 AM and 11.45 AM\nFirst four lectures repeat modelling and programming\nLater lectures discuss practical problems and implementation\nLectures are interactive → We discuss approaches!\nCommunication takes place via OpenOlat and E-Mail",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#tutorials",
    "href": "part-01/lecture-introduction.html#tutorials",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Tutorials",
    "text": "Tutorials\n\nTutorials every Friday between 8.15 AM and 9.45 AM\nIn these tutorials we are working on assignments\nPlease bring a laptop with Windows, macOS, or Linux!\nThis Friday there is no tutorial!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#assignments",
    "href": "part-01/lecture-introduction.html#assignments",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Assignments",
    "text": "Assignments\n\nBased on applied problems of the lecture\nUp to 3 students can solve assignments together\nSubmitted solutions earn bonus points for the exam\nMax. 0.5 point per tutorial\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nBonus points only count if the mark is at least 4.0!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#applied-optimization",
    "href": "part-01/lecture-introduction.html#applied-optimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Applied Optimization",
    "text": "Applied Optimization\n\nReal-world problems can be addressed with models\nOur objective is to foster your interest in the topic\nEnable you to recognize and solve problem structures\nIncludes problem understanding and implementation",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#research-in-operations-research",
    "href": "part-01/lecture-introduction.html#research-in-operations-research",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Research in Operations Research",
    "text": "Research in Operations Research\n\nPart of the University of Hamburg Business School\nAiming to solve real-world problems\nOr improving our theoretical understanding\nPublication in journals and conferences\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nWe are also happy to supervise Bachelor and Master theses!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#national-and-international-journals",
    "href": "part-01/lecture-introduction.html#national-and-international-journals",
    "title": "Lecture I - Welcome and Introduction",
    "section": "National and international journals",
    "text": "National and international journals\n\nEuropean Journal of OR\nJournal of the Operational Research Society\nJournal on Applied Analytics\nManagement Science\nOperations Research\nOR Spectrum",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#brewery-production-planning",
    "href": "part-01/lecture-introduction.html#brewery-production-planning",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Brewery Production Planning",
    "text": "Brewery Production Planning\n\nMickein, Koch, and Haase (2022)",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#police-service-district-planning",
    "href": "part-01/lecture-introduction.html#police-service-district-planning",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Police Service District Planning",
    "text": "Police Service District Planning\n\nVlćek, Haase, Fliedner, et al. (2024)",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#venue-seating-under-covid-19",
    "href": "part-01/lecture-introduction.html#venue-seating-under-covid-19",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Venue Seating under COVID-19",
    "text": "Venue Seating under COVID-19\n\nUsama Dkaidik and Matthes Koch; Current research with a likely paper submission in 2024",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#metro-inflow-management",
    "href": "part-01/lecture-introduction.html#metro-inflow-management",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Metro Inflow Management",
    "text": "Metro Inflow Management\n\nVlćek, Haase, Koch, et al. (2024)",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#split-order-minimization",
    "href": "part-01/lecture-introduction.html#split-order-minimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Split-Order Minimization",
    "text": "Split-Order Minimization\n\nVlćek and Voigt (2024)",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#crowd-management",
    "href": "part-01/lecture-introduction.html#crowd-management",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Crowd Management",
    "text": "Crowd Management\n\nHaase et al. (2016)",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#part-i",
    "href": "part-01/lecture-introduction.html#part-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part I",
    "text": "Part I\n\nWelcome and Introduction\nFirst Steps in Julia\nPackages and Data Management\nModelling with JuMP",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#part-ii",
    "href": "part-01/lecture-introduction.html#part-ii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part II",
    "text": "Part II\n\nBeer Production Planning\nMinimizing Split Orders in E-Commerce\nPeriodic Library Routing\nPolice Districting",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#part-iii",
    "href": "part-01/lecture-introduction.html#part-iii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part III",
    "text": "Part III\n\nSafety Planning for the Islamic Pilgrimage in Mecca\nPassenger Flow Control in Urban Rail\nArena Seat Planning under Distancing Rules\nSales Force Deployment for Teams\nRecap and Discussion",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#choice-of-programming-language",
    "href": "part-01/lecture-introduction.html#choice-of-programming-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Choice of Programming Language",
    "text": "Choice of Programming Language\n\n. . .\nQuestion: Have you ever heard of Julia?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#why-julia",
    "href": "part-01/lecture-introduction.html#why-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Why Julia?",
    "text": "Why Julia?\n\nDesigned to be:\n\nas general as Python\nas statistics-friendly as R\nas fast as C++!\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nAllows for fast data workflows, particularly in scientific computing!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#syntax",
    "href": "part-01/lecture-introduction.html#syntax",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Syntax",
    "text": "Syntax\n\nDynamically-typed syntax just like Python\nSimilar to R, Matlab and Python - not like C++\nIn comparison, accessible and easy to learn!\nNo need to worry about memory management!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#jump",
    "href": "part-01/lecture-introduction.html#jump",
    "title": "Lecture I - Welcome and Introduction",
    "section": "JuMP",
    "text": "JuMP\n\nPackage for algebraic modeling in Julia\nSimplifies solving complex optimization problems\nProvides a high-level, user-friendly interface\nUseful for operations research and data science\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nJuMP is an alternative to Pyomo, GAMS, and AMPL!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#must-it-be-a-new-language",
    "href": "part-01/lecture-introduction.html#must-it-be-a-new-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Must it be a new language?",
    "text": "Must it be a new language?\n\nYes, but no need to worry!\nJulia is quite similar to Python and R\nWe will learn the syntax together in the first part\nIt is helpful to switch languages from time to time",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section",
    "href": "part-01/lecture-introduction.html#section",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nexperience with\nalgebraic modeling?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-is-algebraic-modeling",
    "href": "part-01/lecture-introduction.html#what-is-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is algebraic modeling?",
    "text": "What is algebraic modeling?\n\nA “mathematical language” for optimization problems\nAllows for describing complex systems and constraints\nBased on linear algebra (Equations and Inequalities)\n\n. . .",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#how-to-learn-algebraic-modeling",
    "href": "part-01/lecture-introduction.html#how-to-learn-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to learn algebraic modeling?",
    "text": "How to learn algebraic modeling?\n\nPractice, practice, and practice!\nUnderstand standard models and their approach\nDevelop an understanding of constraints\nUnderstand the structure of a models solution space\nUse an available algorithms to determine solutions",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#central-questions",
    "href": "part-01/lecture-introduction.html#central-questions",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Central Questions",
    "text": "Central Questions\n\nWhat is to be decided?\nWhat is relevant to the decision?\nWhat information is given and relevant?\nWhat parameters (data) are needed?\nWhich variables and of which type are needed?\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nModeling is a creative process!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#model-components",
    "href": "part-01/lecture-introduction.html#model-components",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Model Components",
    "text": "Model Components\n\nObjective function\nConstraints\nVariables\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nWe will go through these components step by step in each lecture!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#linear-optimization-model",
    "href": "part-01/lecture-introduction.html#linear-optimization-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Linear Optimization Model",
    "text": "Linear Optimization Model\n\n\n\nBasic Model Formulation\n\\[\n\\begin{aligned}\n&\\text{maximize} \\quad F = \\sum_{j\\in \\mathcal{J}} c_j \\times X_j\n\\end{aligned}\n\\]\nsubject to\n\\[\n\\begin{aligned}\n&\\sum_{j\\in \\mathcal{J}} a_{i,j} \\times X_j  \\le b_i && \\forall i \\in \\mathcal{I} \\\\\n&X_j \\ge 0 &&  \\forall  j \\in \\mathcal{J}\n\\end{aligned}\n\\]\n\n\n\nModel Components\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{set of $i \\in \\mathcal{I}$,}\\\\\n\\mathcal{J} &: \\text{set of $j \\in \\mathcal{J}$,}\\\\\nF   &: \\text{Objective function variable,}\\\\\nX_{j}   &: \\text{decision variables,}\\\\\nc_{j}   &: \\text{objective function coefficients,}\\\\\na_{i,j} &: \\text{parameters,}\\\\\nb_{i}   &: \\text{parameters}\n\\end{aligned}\n\\]\n\n\n\n. . .\nQuestion: Have you ever seen something like this before?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-is-this-good-for",
    "href": "part-01/lecture-introduction.html#what-is-this-good-for",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is this good for?",
    "text": "What is this good for?\n\nGood Question! A lot of things:\n\nModeling real-world problems\nSolving complex systems\nOptimizing resource allocation\nDecision-making under constraints\nSimulation and prediction",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#case-solar-panel-transport",
    "href": "part-01/lecture-introduction.html#case-solar-panel-transport",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Case: Solar Panel Transport",
    "text": "Case: Solar Panel Transport",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#description",
    "href": "part-01/lecture-introduction.html#description",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nA company is producing solar panels in Dresden and Laupheim and has to transport them to new solar farms near Hamburg, Munich, and Berlin. The quantities offered and demanded (truckloads) and the transport costs per truckload in Euro are summarized in the following table.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#transport-costs",
    "href": "part-01/lecture-introduction.html#transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Costs",
    "text": "Transport Costs\n\n\n\nOrigin/Destination\nHamburg\nMunich\nBerlin\nAvailable\n\n\n\n\nDresden\n5010\n4640\n1980\n34\n\n\nLaupheim\n7120\n1710\n6430\n41\n\n\nDemand\n21\n17\n29\n\n\n\n\nExample: A truckload from Dresden \\(i=1\\) to Munich \\(j=2\\) costs \\(c_{12}=4640\\) Euro. Moreover, it is necessary to fulfil all customer demands, as the contract has been signed.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#graphical-illustration",
    "href": "part-01/lecture-introduction.html#graphical-illustration",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Graphical Illustration",
    "text": "Graphical Illustration",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-are-we-trying",
    "href": "part-01/lecture-introduction.html#what-are-we-trying",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What are we trying?",
    "text": "What are we trying?\nFirst, we always need to understand the objectives.\n. . .\nQuestion: What are our possible objectives?\nMinimizing the transport costs over all truckloads while meeting the demand based on the available solar panels adhering to the available panels.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section-1",
    "href": "part-01/lecture-introduction.html#section-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Let’s break it down\nstep by step!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#sets",
    "href": "part-01/lecture-introduction.html#sets",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Sets",
    "text": "Sets\nRemember, sets are collections of elements\n. . .\nQuestion: What sets are needed?\n. . .\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{Set of production sites, indexed by } i \\text{ with } i \\in \\{1, \\ldots, |\\mathcal{I}|\\}, \\\\\n\\mathcal{J} &: \\text{Set of customers, indexed by } j \\text{ with } j \\in \\{1, \\ldots, |\\mathcal{J}|\\}.\n\\end{aligned}\n\\]\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe often use plural names for sets and a caligraphic letter, e.g., \\(\\mathcal{I}\\) and \\(\\mathcal{J}\\).",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#parameters",
    "href": "part-01/lecture-introduction.html#parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Parameters",
    "text": "Parameters\nParameters are fixed values that are given.\n. . .\nQuestion: What parameters are needed?\n. . .\n\\[\n\\begin{aligned}\nc_{i,j} &: \\text{Costs per truck load for transport from } i \\text{ to } j, \\\\\na_i &: \\text{Available truck loads at } i, \\\\\nb_j &: \\text{Customer demands at } j.\n\\end{aligned}\n\\]\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe usually use the corresponding lower-case letter, e.g., \\(c\\), \\(a\\), and \\(b\\).",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#decision-variable",
    "href": "part-01/lecture-introduction.html#decision-variable",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Decision Variable",
    "text": "Decision Variable\n\nDecision variables are the values we are trying to find\nHere, our objective is to minimize the transport costs\n\n. . .\nQuestion: What decision variables are needed?\n. . .\n\\[\nX_{i,j} \\text{Trucks that deliver panels from site } i \\text{ to customer } j.\n\\]\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe use upper-case letters to distinguish variables from parameters, e.g., \\(X\\).",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section-2",
    "href": "part-01/lecture-introduction.html#section-2",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "These are our\nbuilding blocks!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#objective-function",
    "href": "part-01/lecture-introduction.html#objective-function",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Objective Function",
    "text": "Objective Function\n\nThe objective function is the value we are trying to minimize\nFormalized as a sum of decision variables and parameters\n\n. . .\nQuestion: Do you remember the objective?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#minimizing-the-transport-costs",
    "href": "part-01/lecture-introduction.html#minimizing-the-transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Minimizing the Transport Costs",
    "text": "Minimizing the Transport Costs\nMinimize the transport costs over all truckloads while meeting the demand based on the available solar panels adhering to the available panels.\n. . .\nQuestion: How can we write this down?\n. . .\n\\[\n\\text{Minimize} \\quad \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{i,j}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#constraints",
    "href": "part-01/lecture-introduction.html#constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Constraints",
    "text": "Constraints\n\nConstraints are conditions that must be met\nThey limit the solution space!\n\nQuestion: Objective value without any constraints?\n. . .\n\nThe value is zero\nWe can transport any number of panels\n\n. . .\nQuestion: What constraints are needed?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#supply-constraints",
    "href": "part-01/lecture-introduction.html#supply-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Supply Constraints",
    "text": "Supply Constraints\nEnsure that the number of panels transported from a location does not exceed the available panels.\n. . .\nQuestion: How can we formalize this?\n. . .\n\\[\n\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad \\forall i \\in \\mathcal{I}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#demand-constraints",
    "href": "part-01/lecture-introduction.html#demand-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Demand Constraints",
    "text": "Demand Constraints\nEnsure that the demand of each customer is covered.\n. . .\nQuestion: Any ideas?\n. . .\n\\[\n\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad \\forall j \\in \\mathcal{J}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#non-negativity-constraints",
    "href": "part-01/lecture-introduction.html#non-negativity-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Non-negativity Constraints",
    "text": "Non-negativity Constraints\nEnsure no negative number of truckloads are transported.\n. . .\nQuestion: Has anyone an idea how to write this down?\n. . .\n\\[\nX_{i,j} \\geq 0 \\quad \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#transport-problem",
    "href": "part-01/lecture-introduction.html#transport-problem",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Problem",
    "text": "Transport Problem\nThe complete model can then be written as:\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{ij} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#inequality-constraints",
    "href": "part-01/lecture-introduction.html#inequality-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Inequality Constraints",
    "text": "Inequality Constraints\nQuestion: Could we replace \\(=\\) by \\(\\geq\\) in the demand constraint?\n. . .\n\nYes, we could!\nWe could deliver more than the demand\nBut this would not happen here\n\n. . .\nQuestion: Why won’t we transport more than the demand?\n\nDue to the associated costs",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section-3",
    "href": "part-01/lecture-introduction.html#section-3",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Any\nquestions?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#description-1",
    "href": "part-01/lecture-introduction.html#description-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nUnfortunately, the margins on solar panels are low. After the previous contract has been fulfilled, the company produced the same number of panels as before. In addition, all three customers want to order the same number of truckloads with solar panels again. The sales volume per truckload of panels is 11,000 Euros. The complete production of a truckload of solar panels, including materials, costs 6,300 Euros.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#new-objective",
    "href": "part-01/lecture-introduction.html#new-objective",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Objective",
    "text": "New Objective\nIn the new contract, the company wants to maximize its profits while the demand does not have to be fulfilled.\n. . .\nQuestion: What changes are necessary?\n. . .\n\nWe need to change the objective function\nWe need to change some parameters\n\n. . .\nQuestion: Does our decision variable change?\n. . .\n\nNo, we still transport truckloads of solar panels",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#new-parameters",
    "href": "part-01/lecture-introduction.html#new-parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Parameters",
    "text": "New Parameters\n\\[\n\\begin{aligned}\np &: \\text{Sales volume per truckload of solar panels,} \\\\\nc &: \\text{Production costs per truckload of solar panels.}\n\\end{aligned}\n\\]\n. . .\nQuestion: What is the profit per truckload of solar panels?\n. . .\n\\[\np - c\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#former-model",
    "href": "part-01/lecture-introduction.html#former-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Former Model",
    "text": "Former Model\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\geq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#new-model",
    "href": "part-01/lecture-introduction.html#new-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Model",
    "text": "New Model\n\\[\n\\begin{aligned}\n\\text{Maximize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} (p-c-c_{i,j}) \\times X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\leq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section-4",
    "href": "part-01/lecture-introduction.html#section-4",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nany questions?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#download-and-install-julia",
    "href": "part-01/lecture-introduction.html#download-and-install-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Download and Install Julia",
    "text": "Download and Install Julia\n\nTo prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#installating-julia",
    "href": "part-01/lecture-introduction.html#installating-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installating Julia",
    "text": "Installating Julia\n\n\nHead to julialang.org and follow the instructions.\n\n\n\n\n\n\n\nTip\n\n\n\nIf you are ever asked to add something to your “PATH”, do so!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#vs-code",
    "href": "part-01/lecture-introduction.html#vs-code",
    "title": "Lecture I - Welcome and Introduction",
    "section": "VS Code",
    "text": "VS Code\n\n\nNext, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#installing-vs-code",
    "href": "part-01/lecture-introduction.html#installing-vs-code",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installing VS Code",
    "text": "Installing VS Code\n\nHead to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#verify-the-installation",
    "href": "part-01/lecture-introduction.html#verify-the-installation",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Verify the Installation",
    "text": "Verify the Installation\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#create-a-new-file",
    "href": "part-01/lecture-introduction.html#create-a-new-file",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Create a new file",
    "text": "Create a new file\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#everything-working",
    "href": "part-01/lecture-introduction.html#everything-working",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Everything working?",
    "text": "Everything working?\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry if it is not running right away. We will fix this together!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#how-to-get-started",
    "href": "part-01/lecture-introduction.html#how-to-get-started",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to get started?",
    "text": "How to get started?\n\nLearning a new programming language is a daunting task\nIt is best to start with some small, interactive problems\nThen, slowly increase the scope of the tasks\nWe will do this together in class!\n\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered a first introduction and are ready to start solving some problems in the upcoming lectures.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section-5",
    "href": "part-01/lecture-introduction.html#section-5",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#literature-i",
    "href": "part-01/lecture-introduction.html#literature-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-presentation.html#about-me",
    "href": "part-01/lecture-presentation.html#about-me",
    "title": "Lecture I - Welcome and Introduction",
    "section": "About me",
    "text": "About me\n\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: tobias.vlcek@uni-hamburg.de\n\n\n\n\n\n\n\n\nTip\n\n\nI really appreciate active participation and interaction!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#lectures",
    "href": "part-01/lecture-presentation.html#lectures",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Lectures",
    "text": "Lectures\n\nEvery Tuesday between 10.15 AM and 11.45 AM\nFirst four lectures repeat modelling and programming\nLater lectures discuss practical problems and implementation\nLectures are interactive → We discuss approaches!\nCommunication takes place via OpenOlat and E-Mail"
  },
  {
    "objectID": "part-01/lecture-presentation.html#tutorials",
    "href": "part-01/lecture-presentation.html#tutorials",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Tutorials",
    "text": "Tutorials\n\nTutorials every Friday between 8.15 AM and 9.45 AM\nIn these tutorials we are working on assignments\nPlease bring a laptop with Windows, macOS, or Linux!\nThis Friday there is no tutorial!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#assignments",
    "href": "part-01/lecture-presentation.html#assignments",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Assignments",
    "text": "Assignments\n\nBased on applied problems of the lecture\nUp to 3 students can solve assignments together\nSubmitted solutions earn bonus points for the exam\nMax. 0.5 point per tutorial\n\n\n\n\n\n\n\n\nNote\n\n\nBonus points only count if the mark is at least 4.0!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#applied-optimization",
    "href": "part-01/lecture-presentation.html#applied-optimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Applied Optimization",
    "text": "Applied Optimization\n\nReal-world problems can be addressed with models\nOur objective is to foster your interest in the topic\nEnable you to recognize and solve problem structures\nIncludes problem understanding and implementation"
  },
  {
    "objectID": "part-01/lecture-presentation.html#research-in-operations-research",
    "href": "part-01/lecture-presentation.html#research-in-operations-research",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Research in Operations Research",
    "text": "Research in Operations Research\n\nPart of the University of Hamburg Business School\nAiming to solve real-world problems\nOr improving our theoretical understanding\nPublication in journals and conferences\n\n\n\n\n\n\n\n\nNote\n\n\nWe are also happy to supervise Bachelor and Master theses!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#national-and-international-journals",
    "href": "part-01/lecture-presentation.html#national-and-international-journals",
    "title": "Lecture I - Welcome and Introduction",
    "section": "National and international journals",
    "text": "National and international journals\n\nEuropean Journal of OR\nJournal of the Operational Research Society\nJournal on Applied Analytics\nManagement Science\nOperations Research\nOR Spectrum"
  },
  {
    "objectID": "part-01/lecture-presentation.html#brewery-production-planning",
    "href": "part-01/lecture-presentation.html#brewery-production-planning",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Brewery Production Planning",
    "text": "Brewery Production Planning\n\nMickein, Koch, and Haase (2022)"
  },
  {
    "objectID": "part-01/lecture-presentation.html#police-service-district-planning",
    "href": "part-01/lecture-presentation.html#police-service-district-planning",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Police Service District Planning",
    "text": "Police Service District Planning\n\nVlćek, Haase, Fliedner, et al. (2024)"
  },
  {
    "objectID": "part-01/lecture-presentation.html#venue-seating-under-covid-19",
    "href": "part-01/lecture-presentation.html#venue-seating-under-covid-19",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Venue Seating under COVID-19",
    "text": "Venue Seating under COVID-19\n\nUsama Dkaidik and Matthes Koch; Current research with a likely paper submission in 2024"
  },
  {
    "objectID": "part-01/lecture-presentation.html#metro-inflow-management",
    "href": "part-01/lecture-presentation.html#metro-inflow-management",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Metro Inflow Management",
    "text": "Metro Inflow Management\n\nVlćek, Haase, Koch, et al. (2024)"
  },
  {
    "objectID": "part-01/lecture-presentation.html#split-order-minimization",
    "href": "part-01/lecture-presentation.html#split-order-minimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Split-Order Minimization",
    "text": "Split-Order Minimization\n\nVlćek and Voigt (2024)"
  },
  {
    "objectID": "part-01/lecture-presentation.html#crowd-management",
    "href": "part-01/lecture-presentation.html#crowd-management",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Crowd Management",
    "text": "Crowd Management\n\nHaase et al. (2016)"
  },
  {
    "objectID": "part-01/lecture-presentation.html#part-i",
    "href": "part-01/lecture-presentation.html#part-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part I",
    "text": "Part I\n\nWelcome and Introduction\nFirst Steps in Julia\nPackages and Data Management\nModelling with JuMP"
  },
  {
    "objectID": "part-01/lecture-presentation.html#part-ii",
    "href": "part-01/lecture-presentation.html#part-ii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part II",
    "text": "Part II\n\nBeer Production Planning\nMinimizing Split Orders in E-Commerce\nPeriodic Library Routing\nPolice Districting"
  },
  {
    "objectID": "part-01/lecture-presentation.html#part-iii",
    "href": "part-01/lecture-presentation.html#part-iii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part III",
    "text": "Part III\n\nSafety Planning for the Islamic Pilgrimage in Mecca\nPassenger Flow Control in Urban Rail\nArena Seat Planning under Distancing Rules\nSales Force Deployment for Teams\nRecap and Discussion"
  },
  {
    "objectID": "part-01/lecture-presentation.html#choice-of-programming-language",
    "href": "part-01/lecture-presentation.html#choice-of-programming-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Choice of Programming Language",
    "text": "Choice of Programming Language\n\n\nQuestion: Have you ever heard of Julia?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#why-julia",
    "href": "part-01/lecture-presentation.html#why-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Why Julia?",
    "text": "Why Julia?\n\nDesigned to be:\n\nas general as Python\nas statistics-friendly as R\nas fast as C++!\n\n\n\n\n\n\n\n\n\nTip\n\n\nAllows for fast data workflows, particularly in scientific computing!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#syntax",
    "href": "part-01/lecture-presentation.html#syntax",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Syntax",
    "text": "Syntax\n\nDynamically-typed syntax just like Python\nSimilar to R, Matlab and Python - not like C++\nIn comparison, accessible and easy to learn!\nNo need to worry about memory management!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#jump",
    "href": "part-01/lecture-presentation.html#jump",
    "title": "Lecture I - Welcome and Introduction",
    "section": "JuMP",
    "text": "JuMP\n\nPackage for algebraic modeling in Julia\nSimplifies solving complex optimization problems\nProvides a high-level, user-friendly interface\nUseful for operations research and data science\n\n\n\n\n\n\n\n\nTip\n\n\nJuMP is an alternative to Pyomo, GAMS, and AMPL!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#must-it-be-a-new-language",
    "href": "part-01/lecture-presentation.html#must-it-be-a-new-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Must it be a new language?",
    "text": "Must it be a new language?\n\nYes, but no need to worry!\nJulia is quite similar to Python and R\nWe will learn the syntax together in the first part\nIt is helpful to switch languages from time to time"
  },
  {
    "objectID": "part-01/lecture-presentation.html#section",
    "href": "part-01/lecture-presentation.html#section",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nexperience with\nalgebraic modeling?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-is-algebraic-modeling",
    "href": "part-01/lecture-presentation.html#what-is-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is algebraic modeling?",
    "text": "What is algebraic modeling?\n\nA “mathematical language” for optimization problems\nAllows for describing complex systems and constraints\nBased on linear algebra (Equations and Inequalities)"
  },
  {
    "objectID": "part-01/lecture-presentation.html#how-to-learn-algebraic-modeling",
    "href": "part-01/lecture-presentation.html#how-to-learn-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to learn algebraic modeling?",
    "text": "How to learn algebraic modeling?\n\nPractice, practice, and practice!\nUnderstand standard models and their approach\nDevelop an understanding of constraints\nUnderstand the structure of a models solution space\nUse an available algorithms to determine solutions"
  },
  {
    "objectID": "part-01/lecture-presentation.html#central-questions",
    "href": "part-01/lecture-presentation.html#central-questions",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Central Questions",
    "text": "Central Questions\n\nWhat is to be decided?\nWhat is relevant to the decision?\nWhat information is given and relevant?\nWhat parameters (data) are needed?\nWhich variables and of which type are needed?\n\n\n\n\n\n\n\n\nTip\n\n\nModeling is a creative process!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#model-components",
    "href": "part-01/lecture-presentation.html#model-components",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Model Components",
    "text": "Model Components\n\nObjective function\nConstraints\nVariables\n\n\n\n\n\n\n\n\nNote\n\n\nWe will go through these components step by step in each lecture!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#linear-optimization-model",
    "href": "part-01/lecture-presentation.html#linear-optimization-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Linear Optimization Model",
    "text": "Linear Optimization Model\n\n\nBasic Model Formulation\n\\[\n\\begin{aligned}\n&\\text{maximize} \\quad F = \\sum_{j\\in \\mathcal{J}} c_j \\times X_j\n\\end{aligned}\n\\]\nsubject to\n\\[\n\\begin{aligned}\n&\\sum_{j\\in \\mathcal{J}} a_{i,j} \\times X_j  \\le b_i && \\forall i \\in \\mathcal{I} \\\\\n&X_j \\ge 0 &&  \\forall  j \\in \\mathcal{J}\n\\end{aligned}\n\\]\n\nModel Components\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{set of $i \\in \\mathcal{I}$,}\\\\\n\\mathcal{J} &: \\text{set of $j \\in \\mathcal{J}$,}\\\\\nF   &: \\text{Objective function variable,}\\\\\nX_{j}   &: \\text{decision variables,}\\\\\nc_{j}   &: \\text{objective function coefficients,}\\\\\na_{i,j} &: \\text{parameters,}\\\\\nb_{i}   &: \\text{parameters}\n\\end{aligned}\n\\]\n\n\nQuestion: Have you ever seen something like this before?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-is-this-good-for",
    "href": "part-01/lecture-presentation.html#what-is-this-good-for",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is this good for?",
    "text": "What is this good for?\n\nGood Question! A lot of things:\n\nModeling real-world problems\nSolving complex systems\nOptimizing resource allocation\nDecision-making under constraints\nSimulation and prediction"
  },
  {
    "objectID": "part-01/lecture-presentation.html#case-solar-panel-transport",
    "href": "part-01/lecture-presentation.html#case-solar-panel-transport",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Case: Solar Panel Transport",
    "text": "Case: Solar Panel Transport"
  },
  {
    "objectID": "part-01/lecture-presentation.html#description",
    "href": "part-01/lecture-presentation.html#description",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nA company is producing solar panels in Dresden and Laupheim and has to transport them to new solar farms near Hamburg, Munich, and Berlin. The quantities offered and demanded (truckloads) and the transport costs per truckload in Euro are summarized in the following table."
  },
  {
    "objectID": "part-01/lecture-presentation.html#transport-costs",
    "href": "part-01/lecture-presentation.html#transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Costs",
    "text": "Transport Costs\n\n\n\nOrigin/Destination\nHamburg\nMunich\nBerlin\nAvailable\n\n\n\n\nDresden\n5010\n4640\n1980\n34\n\n\nLaupheim\n7120\n1710\n6430\n41\n\n\nDemand\n21\n17\n29\n\n\n\n\nExample: A truckload from Dresden \\(i=1\\) to Munich \\(j=2\\) costs \\(c_{12}=4640\\) Euro. Moreover, it is necessary to fulfil all customer demands, as the contract has been signed."
  },
  {
    "objectID": "part-01/lecture-presentation.html#graphical-illustration",
    "href": "part-01/lecture-presentation.html#graphical-illustration",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Graphical Illustration",
    "text": "Graphical Illustration"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-are-we-trying",
    "href": "part-01/lecture-presentation.html#what-are-we-trying",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What are we trying?",
    "text": "What are we trying?\nFirst, we always need to understand the objectives.\n\nQuestion: What are our possible objectives?\nMinimizing the transport costs over all truckloads while meeting the demand based on the available solar panels adhering to the available panels."
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-1",
    "href": "part-01/lecture-presentation.html#section-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Let’s break it down\nstep by step!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#sets",
    "href": "part-01/lecture-presentation.html#sets",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Sets",
    "text": "Sets\nRemember, sets are collections of elements\n\nQuestion: What sets are needed?\n\n\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{Set of production sites, indexed by } i \\text{ with } i \\in \\{1, \\ldots, |\\mathcal{I}|\\}, \\\\\n\\mathcal{J} &: \\text{Set of customers, indexed by } j \\text{ with } j \\in \\{1, \\ldots, |\\mathcal{J}|\\}.\n\\end{aligned}\n\\]\n\n\n\n\n\n\n\n\nTip\n\n\nWe often use plural names for sets and a caligraphic letter, e.g., \\(\\mathcal{I}\\) and \\(\\mathcal{J}\\)."
  },
  {
    "objectID": "part-01/lecture-presentation.html#parameters",
    "href": "part-01/lecture-presentation.html#parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Parameters",
    "text": "Parameters\nParameters are fixed values that are given.\n\nQuestion: What parameters are needed?\n\n\n\\[\n\\begin{aligned}\nc_{i,j} &: \\text{Costs per truck load for transport from } i \\text{ to } j, \\\\\na_i &: \\text{Available truck loads at } i, \\\\\nb_j &: \\text{Customer demands at } j.\n\\end{aligned}\n\\]\n\n\n\n\n\n\n\n\nTip\n\n\nWe usually use the corresponding lower-case letter, e.g., \\(c\\), \\(a\\), and \\(b\\)."
  },
  {
    "objectID": "part-01/lecture-presentation.html#decision-variable",
    "href": "part-01/lecture-presentation.html#decision-variable",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Decision Variable",
    "text": "Decision Variable\n\nDecision variables are the values we are trying to find\nHere, our objective is to minimize the transport costs\n\n\nQuestion: What decision variables are needed?\n\n\n\\[\nX_{i,j} \\text{Trucks that deliver panels from site } i \\text{ to customer } j.\n\\]\n\n\n\n\n\n\n\n\nTip\n\n\nWe use upper-case letters to distinguish variables from parameters, e.g., \\(X\\)."
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-2",
    "href": "part-01/lecture-presentation.html#section-2",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "These are our\nbuilding blocks!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#objective-function",
    "href": "part-01/lecture-presentation.html#objective-function",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Objective Function",
    "text": "Objective Function\n\nThe objective function is the value we are trying to minimize\nFormalized as a sum of decision variables and parameters\n\n\nQuestion: Do you remember the objective?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#minimizing-the-transport-costs",
    "href": "part-01/lecture-presentation.html#minimizing-the-transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Minimizing the Transport Costs",
    "text": "Minimizing the Transport Costs\nMinimize the transport costs over all truckloads while meeting the demand based on the available solar panels adhering to the available panels.\n\nQuestion: How can we write this down?\n\n\n\\[\n\\text{Minimize} \\quad \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{i,j}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#constraints",
    "href": "part-01/lecture-presentation.html#constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Constraints",
    "text": "Constraints\n\nConstraints are conditions that must be met\nThey limit the solution space!\n\nQuestion: Objective value without any constraints?\n\n\nThe value is zero\nWe can transport any number of panels\n\n\n\nQuestion: What constraints are needed?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#supply-constraints",
    "href": "part-01/lecture-presentation.html#supply-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Supply Constraints",
    "text": "Supply Constraints\nEnsure that the number of panels transported from a location does not exceed the available panels.\n\nQuestion: How can we formalize this?\n\n\n\\[\n\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad \\forall i \\in \\mathcal{I}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#demand-constraints",
    "href": "part-01/lecture-presentation.html#demand-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Demand Constraints",
    "text": "Demand Constraints\nEnsure that the demand of each customer is covered.\n\nQuestion: Any ideas?\n\n\n\\[\n\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad \\forall j \\in \\mathcal{J}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#non-negativity-constraints",
    "href": "part-01/lecture-presentation.html#non-negativity-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Non-negativity Constraints",
    "text": "Non-negativity Constraints\nEnsure no negative number of truckloads are transported.\n\nQuestion: Has anyone an idea how to write this down?\n\n\n\\[\nX_{i,j} \\geq 0 \\quad \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#transport-problem",
    "href": "part-01/lecture-presentation.html#transport-problem",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Problem",
    "text": "Transport Problem\nThe complete model can then be written as:\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{ij} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#inequality-constraints",
    "href": "part-01/lecture-presentation.html#inequality-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Inequality Constraints",
    "text": "Inequality Constraints\nQuestion: Could we replace \\(=\\) by \\(\\geq\\) in the demand constraint?\n\n\nYes, we could!\nWe could deliver more than the demand\nBut this would not happen here\n\n\n\nQuestion: Why won’t we transport more than the demand?\n\nDue to the associated costs"
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-3",
    "href": "part-01/lecture-presentation.html#section-3",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Any\nquestions?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#description-1",
    "href": "part-01/lecture-presentation.html#description-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nUnfortunately, the margins on solar panels are low. After the previous contract has been fulfilled, the company produced the same number of panels as before. In addition, all three customers want to order the same number of truckloads with solar panels again. The sales volume per truckload of panels is 11,000 Euros. The complete production of a truckload of solar panels, including materials, costs 6,300 Euros."
  },
  {
    "objectID": "part-01/lecture-presentation.html#new-objective",
    "href": "part-01/lecture-presentation.html#new-objective",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Objective",
    "text": "New Objective\nIn the new contract, the company wants to maximize its profits while the demand does not have to be fulfilled.\n\nQuestion: What changes are necessary?\n\n\n\nWe need to change the objective function\nWe need to change some parameters\n\n\n\nQuestion: Does our decision variable change?\n\n\n\nNo, we still transport truckloads of solar panels"
  },
  {
    "objectID": "part-01/lecture-presentation.html#new-parameters",
    "href": "part-01/lecture-presentation.html#new-parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Parameters",
    "text": "New Parameters\n\\[\n\\begin{aligned}\np &: \\text{Sales volume per truckload of solar panels,} \\\\\nc &: \\text{Production costs per truckload of solar panels.}\n\\end{aligned}\n\\]\n\nQuestion: What is the profit per truckload of solar panels?\n\n\n\\[\np - c\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#former-model",
    "href": "part-01/lecture-presentation.html#former-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Former Model",
    "text": "Former Model\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\geq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#new-model",
    "href": "part-01/lecture-presentation.html#new-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Model",
    "text": "New Model\n\\[\n\\begin{aligned}\n\\text{Maximize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} (p-c-c_{i,j}) \\times X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\leq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-4",
    "href": "part-01/lecture-presentation.html#section-4",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nany questions?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#download-and-install-julia",
    "href": "part-01/lecture-presentation.html#download-and-install-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Download and Install Julia",
    "text": "Download and Install Julia\n\nTo prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia."
  },
  {
    "objectID": "part-01/lecture-presentation.html#installating-julia",
    "href": "part-01/lecture-presentation.html#installating-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installating Julia",
    "text": "Installating Julia\n\n\nHead to julialang.org and follow the instructions.\n\n\n\n\n\n\n\nTip\n\n\nIf you are ever asked to add something to your “PATH”, do so!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#vs-code",
    "href": "part-01/lecture-presentation.html#vs-code",
    "title": "Lecture I - Welcome and Introduction",
    "section": "VS Code",
    "text": "VS Code\n\n\nNext, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS"
  },
  {
    "objectID": "part-01/lecture-presentation.html#installing-vs-code",
    "href": "part-01/lecture-presentation.html#installing-vs-code",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installing VS Code",
    "text": "Installing VS Code\n\nHead to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release"
  },
  {
    "objectID": "part-01/lecture-presentation.html#verify-the-installation",
    "href": "part-01/lecture-presentation.html#verify-the-installation",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Verify the Installation",
    "text": "Verify the Installation\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”"
  },
  {
    "objectID": "part-01/lecture-presentation.html#create-a-new-file",
    "href": "part-01/lecture-presentation.html#create-a-new-file",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Create a new file",
    "text": "Create a new file\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\n\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”"
  },
  {
    "objectID": "part-01/lecture-presentation.html#everything-working",
    "href": "part-01/lecture-presentation.html#everything-working",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Everything working?",
    "text": "Everything working?\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nTip\n\n\nDon’t worry if it is not running right away. We will fix this together!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#how-to-get-started",
    "href": "part-01/lecture-presentation.html#how-to-get-started",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to get started?",
    "text": "How to get started?\n\nLearning a new programming language is a daunting task\nIt is best to start with some small, interactive problems\nThen, slowly increase the scope of the tasks\nWe will do this together in class!\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for todays lecture!\nWe now have covered a first introduction and are ready to start solving some problems in the upcoming lectures."
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-5",
    "href": "part-01/lecture-presentation.html#section-5",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#literature-i",
    "href": "part-01/lecture-presentation.html#literature-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "part-01/lecture-presentation.html#literature-ii",
    "href": "part-01/lecture-presentation.html#literature-ii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Literature II",
    "text": "Literature II\n\n\n\nLecture I - Welcome and Introduction | Dr. Tobias Vlćek | Home\n\n\n\n\nHaase, Knut, Habib Zain Al Abideen, Salim Al-Bosta, Mathias Kasper, Matthes Koch, Sven Müller, and Dirk Helbing. 2016. “Improving Pilgrim Safety During the Hajj: An Analytical and Operational Research Approach.” Interfaces 46 (1): 74–90.\n\n\nMickein, Markus, Matthes Koch, and Knut Haase. 2022. “A Decision Support System for Brewery Production Planning at Feldschlösschen.” INFORMS Journal on Applied Analytics 52 (2): 158–72.\n\n\nVlćek, Tobias, Knut Haase, Malte Fliedner, and Tobias Cors. 2024. “Police Service District Planning.” OR Spectrum, February. https://doi.org/10.1007/s00291-024-00745-3.\n\n\nVlćek, Tobias, Knut Haase, Matthes Koch, Lena Dolz, Anneke Weygandt, and Jan Pape. 2024. “Controlling Passenger Flows into Metro Systems to Mitigate Overcrowding During Large-Scale Events.” Submitted to Transportation Science.\n\n\nVlćek, Tobias, and Guido Voigt. 2024. “Optimizing SKU-Warehouse Allocations to Minimize Split Parcels in E-Commerce Environments.” Submitted to Decision Sciences."
  },
  {
    "objectID": "part-03/lecture-presentation.html#variables-and-data-types",
    "href": "part-03/lecture-presentation.html#variables-and-data-types",
    "title": "Lecture III - Packages and Data Management",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\n\nVariables are used to store values\nAssign a value to a variable using the = operator\nYou can use different data types for variables\nYou can change the value of a variable\n\n\n\n\n\n\n\n\nTip\n\n\nYou can use the typeof function to check the type of a variable."
  },
  {
    "objectID": "part-03/lecture-presentation.html#vectors-and-matrices",
    "href": "part-03/lecture-presentation.html#vectors-and-matrices",
    "title": "Lecture III - Packages and Data Management",
    "section": "Vectors and Matrices",
    "text": "Vectors and Matrices\n\nVectors and matrices are used to store multiple values\nYou can create a them using the [ and ] operators\nAccess their elements using square brackets\n\n\n\n\n\n\n\n\nTip\n\n\nYou can use the push! function to add elements to a vector or the pop! function to remove elements from a vector."
  },
  {
    "objectID": "part-03/lecture-presentation.html#comparisons-and-logic",
    "href": "part-03/lecture-presentation.html#comparisons-and-logic",
    "title": "Lecture III - Packages and Data Management",
    "section": "Comparisons and Logic",
    "text": "Comparisons and Logic\n\nComparisons are used to compare values\n== checks if two values are equal\n!= checks if two values are not equal\n&lt; checks if one value is smaller than the other\n&gt;= checks if one value is greater than or equal to the other\n&& checks if two values are true\n|| checks if at least one of two values is true"
  },
  {
    "objectID": "part-03/lecture-presentation.html#loops",
    "href": "part-03/lecture-presentation.html#loops",
    "title": "Lecture III - Packages and Data Management",
    "section": "Loops",
    "text": "Loops\n\nLoops are used to repeat code\nfor loop repeats code for a fixed number of times\nwhile loop repeats code until a condition is met\nif statement checks if a condition is true\nelse executes code if a condition is false\nelseif checks if a condition is true and executes if it is"
  },
  {
    "objectID": "part-03/lecture-presentation.html#scope",
    "href": "part-03/lecture-presentation.html#scope",
    "title": "Lecture III - Packages and Data Management",
    "section": "Scope",
    "text": "Scope\n\nScope determines where a variable is defined and lives\nglobal keyword defines a global variable\nlocal keyword defines a local variable\nlet keyword defines a local variable\n\n\n\n\n\n\n\n\nTip\n\n\nGlobal variables usually make your code much slower, if they are not defined as constants. But for this leeture this is not that important."
  },
  {
    "objectID": "part-03/lecture-presentation.html#solutions-from-last-week",
    "href": "part-03/lecture-presentation.html#solutions-from-last-week",
    "title": "Lecture III - Packages and Data Management",
    "section": "Solutions from last Week",
    "text": "Solutions from last Week\n\nThe tutorials from last week will be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n\n\n\n\n\n\n\nTip\n\n\nYou can ask questions anytime in class or via email!"
  },
  {
    "objectID": "part-03/lecture-presentation.html#topics-of-the-tutorials",
    "href": "part-03/lecture-presentation.html#topics-of-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nFunctions: Learn how to define and use functions\nPackages: Learn how to install and use packages\nDataFrames: Learn how to work with tabular data in Julia\nIO: Learn how to read and write data in Julia\nPlots: Learn how to create plots in Julia"
  },
  {
    "objectID": "part-03/lecture-presentation.html#get-started-with-the-tutorials",
    "href": "part-03/lecture-presentation.html#get-started-with-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload this weeks tutorials and start with the first one\nRemember, you can ask questions anytime!\n\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for this lecture!\nThe remaining time we will already start working on the problems of the third lecture."
  },
  {
    "objectID": "part-03/lecture-presentation.html#literature-1",
    "href": "part-03/lecture-presentation.html#literature-1",
    "title": "Lecture III - Packages and Data Management",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.\n\n\n\nLecture III - Packages and Data Management | Dr. Tobias Vlćek | Home"
  },
  {
    "objectID": "part-03/lecture-packages.html",
    "href": "part-03/lecture-packages.html",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Variables are used to store values\nAssign a value to a variable using the = operator\nYou can use different data types for variables\nYou can change the value of a variable\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the typeof function to check the type of a variable.\n\n\n\n\n\n\nVectors and matrices are used to store multiple values\nYou can create a them using the [ and ] operators\nAccess their elements using square brackets\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the push! function to add elements to a vector or the pop! function to remove elements from a vector.\n\n\n\n\n\n\nComparisons are used to compare values\n== checks if two values are equal\n!= checks if two values are not equal\n&lt; checks if one value is smaller than the other\n&gt;= checks if one value is greater than or equal to the other\n&& checks if two values are true\n|| checks if at least one of two values is true\n\n\n\n\n\nLoops are used to repeat code\nfor loop repeats code for a fixed number of times\nwhile loop repeats code until a condition is met\nif statement checks if a condition is true\nelse executes code if a condition is false\nelseif checks if a condition is true and executes if it is\n\n\n\n\n\nScope determines where a variable is defined and lives\nglobal keyword defines a global variable\nlocal keyword defines a local variable\nlet keyword defines a local variable\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nGlobal variables usually make your code much slower, if they are not defined as constants. But for this leeture this is not that important.\n\n\n\n\n\n\nThe tutorials from last week will be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#variables-and-data-types",
    "href": "part-03/lecture-packages.html#variables-and-data-types",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Variables are used to store values\nAssign a value to a variable using the = operator\nYou can use different data types for variables\nYou can change the value of a variable\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the typeof function to check the type of a variable.",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#vectors-and-matrices",
    "href": "part-03/lecture-packages.html#vectors-and-matrices",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Vectors and matrices are used to store multiple values\nYou can create a them using the [ and ] operators\nAccess their elements using square brackets\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the push! function to add elements to a vector or the pop! function to remove elements from a vector.",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#comparisons-and-logic",
    "href": "part-03/lecture-packages.html#comparisons-and-logic",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Comparisons are used to compare values\n== checks if two values are equal\n!= checks if two values are not equal\n&lt; checks if one value is smaller than the other\n&gt;= checks if one value is greater than or equal to the other\n&& checks if two values are true\n|| checks if at least one of two values is true",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#loops",
    "href": "part-03/lecture-packages.html#loops",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Loops are used to repeat code\nfor loop repeats code for a fixed number of times\nwhile loop repeats code until a condition is met\nif statement checks if a condition is true\nelse executes code if a condition is false\nelseif checks if a condition is true and executes if it is",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#scope",
    "href": "part-03/lecture-packages.html#scope",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Scope determines where a variable is defined and lives\nglobal keyword defines a global variable\nlocal keyword defines a local variable\nlet keyword defines a local variable\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nGlobal variables usually make your code much slower, if they are not defined as constants. But for this leeture this is not that important.",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#solutions-from-last-week",
    "href": "part-03/lecture-packages.html#solutions-from-last-week",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "The tutorials from last week will be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#topics-of-the-tutorials",
    "href": "part-03/lecture-packages.html#topics-of-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nFunctions: Learn how to define and use functions\nPackages: Learn how to install and use packages\nDataFrames: Learn how to work with tabular data in Julia\nIO: Learn how to read and write data in Julia\nPlots: Learn how to create plots in Julia",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#get-started-with-the-tutorials",
    "href": "part-03/lecture-packages.html#get-started-with-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload this weeks tutorials and start with the first one\nRemember, you can ask questions anytime!\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for this lecture!\nThe remaining time we will already start working on the problems of the third lecture.",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#literature-1",
    "href": "part-03/lecture-packages.html#literature-1",
    "title": "Lecture III - Packages and Data Management",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "general/literature.html",
    "href": "general/literature.html",
    "title": "Literature and Resources",
    "section": "",
    "text": "This section provides a curated list of books and resources to enhance your understanding of mathematical Modelling, Julia programming and related topics. Each recommendation includes a brief description to help you choose the most suitable resources for you.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books",
    "href": "general/literature.html#books",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\n\nThis book is great for beginners and covers Julia programming in a comprehensive manner.\n\nKwon, C. (2019). Julia programming for operations research (Second edition). Changhyun Kwon. Link to the free book website.\n\nThis book is a fantastic ressource for students interested in Julia and Operations Research and covers a variety of topics.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources",
    "href": "general/literature.html#resources",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nJulia Documentation\n\nThe official Julia documentation is an good starting point to understand the language’s features and syntax.\n\nJuMP Documentation\n\nThe official documentation of JuMP is a great resource for understanding optimization modeling in Julia, covering everything from simple linear models to advanced nonlinear and mixed-integer problems.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-1",
    "href": "general/literature.html#books-1",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nWilke, C. (2019). Fundamentals of data visualization: A primer on making informative and compelling figures (First edition). O’Reilly Media.\n\nA book that is highly recommended to understand the principles of data visualization and how to create effective visualizations.\nLink to the free book website\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\nA fantasticbook to understand the principles of software development and how to create effective software.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources-1",
    "href": "general/literature.html#resources-1",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nQuarto\n\nA static website generator that is very powerful and flexible. Used to create the slides and the website for the course.\n\nCursor\n\nA code editor based on VS Code that is very powerful and flexible. It uses AI to help you write code.\n\nJupyter\n\nA web application that allows you to create and share documents that contain code, equations, visualizations and text. It is very popular in the field of data science and academia and also part of Quarto.\n\nAdvent of Code\n\nA wonderful website with daily challenges during the christmas time. Highly recommended to playfully improve your skills.\n\nGithub\n\nThe largest provider for git repositories owned by Microsoft. A lot of open source projects are hosted here and you can read the code.\n\nCodewars\n\nA platform to improve your coding skills by solving challenges. You can compete with others, see how other people solved the challenges and read and learn from the code.\n\nDaily Dose of Data Science\n\nA website and a newsletter with lots of easy-to-digest resources to improve your skills in Data Science.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Applied Optimization with Julia!",
    "section": "",
    "text": "Course Description\nIn this module we will focus on solving practical problems with the help of optimization. To this end, over the course of the semester you will become familiar with a number of optimization problems that have been worked on in the past at the Institute of Logistics, Transportation and Production in cooperation with practice partners. Problems include improving the sustainability of parcel delivery companies, Corona-compliant seat allocations of stadiums and theaters, optimizing districts and locations for police departments, and many more. The module consists of the following two parts: Lectures (2 SWS) and Exercises (1 SWS).\n\n\nLearning Outcomes\nYou can find our specific outcomes in the module handbook. Our broader goal is to introduce you to how diversified the solution of practical problems can be. We want to enable you to independently apply methods and concepts from optimization, and to get a feeling for abstracting and modeling problems. Is our module hard? That’s a subjective question. We would say it is exciting and doable. If you have a basic interest in logical relationships and mathematics, you are in the right place. If you also have basic knowledge of programming or want to get into the subject with help, our module is perfect for you.\nUpon completion of the course, you …\n\ncan implement solutions to complex optimization problems in Julia\nknow advanced concepts of optimization such as linear and nonlinear optimization\nknow basic concepts of programming and algorithms such as loops, functions\nwill be able to read and write code in Julia\nwill have experience working with Julia libraries such as JuMP and HiGHS\nwill know how to collaborate in a small team to find solutions for problems at hand\n\nPlease note that this course is specifically designed for business students. That is, it is not required to have any advanced knowledge or experience in programming to attend this course. The teaching format will make it possible to account for different levels of programming skills such that every student can take the most out of the course.\n\n\nCourse Blocks\nThe core content of the course is organized in three blocks:\n\nPart I: Introduction to Julia and Modelling\nPart II: Applied Optimization with Basic Models\nPart III: Applied Optimization with Advanced Models\n\nYou can find more information on the course blocks and the corresponding lectures in the syllabus.\n\n\nTutorials\nThe tutorials accompany the lectures. In the tutorials, you will apply the concepts from the lectures to realistic data sets. You will work in small groups of 3 participants, in which you can work out solutions together. We will help you during the weekly practice sessions by answering your questions or briefly explaining individual issues in case of difficulties. Afterwards, you have the opportunity to submit your jointly developed solution until the next exercise date in order to earn bonus points for the exam. You can earn up to half a bonus point per exercise, up to 6.0 bonus points in total. Important: the bonus points will only be credited to you if you pass the exam with at least a 4.0. Furthermore, we will not award bonus points for exercises in which you have simply copied the results of another group.\n\n\nHow to see the slides\n\nThis course is based on Quarto\nIt uses revealjs to render the slides\nYou find the slides for each lecture in the corresponding lecture\nTo see the slides, click on RevealJS in the top right side in the lecture\n\n\n\nQuestions\nIf you have any questions regarding the course, please contact me under tobias.vlcek@uni-hamburg.de.\n\n\nContributors\nThanks to Matthes Koch and Justus Bonz, who helped to prepare the lecture materials.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "general/faq.html",
    "href": "general/faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to tobias.vlcek@uni-hamburg.de or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#unanswered-questions",
    "href": "general/faq.html#unanswered-questions",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to tobias.vlcek@uni-hamburg.de or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#contribution-and-mistakes",
    "href": "general/faq.html#contribution-and-mistakes",
    "title": "Frequently Asked Questions",
    "section": "Contribution and Mistakes",
    "text": "Contribution and Mistakes\nIf you have found a mistake in the course material or if you have any suggestion on how to improve the course, please let me know in the following form or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#faqs",
    "href": "general/faq.html#faqs",
    "title": "Frequently Asked Questions",
    "section": "FAQs",
    "text": "FAQs\n\nIs the course difficult?\nIn terms of difficulty, this is of course somehow complicated for me to assess. However, I have tried to make all the content as comprehensible as possible and really do ask you many questions in the lectures. If I have the impression that something has not been understood at all, then I take longer at that point. This semester is the first time I think the course is truly finished. I have adapted the slides based on feedback from the last two years and made all the examples as simple as possible. In a nutshell: If you are interested in the subject and equations do not scare you, you will likely do great in the course.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/syllabus.html",
    "href": "general/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Julia and to mathematical modelling is provided. Students will learn the Julia syntax, data types, as well as how to implement loops and functions in Julia. We will introduce core Julia libraries, too, including JuMP and DataFrames. Once these concepts are understood, we will learn how they can be used to solve problems.\n\n\n\nWelcome and Introduction (I)\nIntroduction to the course and mathematical modelling\nFirst Steps in Julia (II)\nVectors, matrices, basic operations loops and functions\nPackages and Data Management (III)\nPackage Management, DataFrames, reading and writing data\nModelling with JuMP (IV)\nModeling with JuMP with variables, parameters and constraints",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#introduction-to-julia-and-modelling",
    "href": "general/syllabus.html#introduction-to-julia-and-modelling",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Julia and to mathematical modelling is provided. Students will learn the Julia syntax, data types, as well as how to implement loops and functions in Julia. We will introduce core Julia libraries, too, including JuMP and DataFrames. Once these concepts are understood, we will learn how they can be used to solve problems.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures",
    "href": "general/syllabus.html#lectures",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome and Introduction (I)\nIntroduction to the course and mathematical modelling\nFirst Steps in Julia (II)\nVectors, matrices, basic operations loops and functions\nPackages and Data Management (III)\nPackage Management, DataFrames, reading and writing data\nModelling with JuMP (IV)\nModeling with JuMP with variables, parameters and constraints",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#applied-optimization-with-basic-models",
    "href": "general/syllabus.html#applied-optimization-with-basic-models",
    "title": "Syllabus",
    "section": "Applied Optimization with Basic Models",
    "text": "Applied Optimization with Basic Models\nIn the second part, we will cover applied optimization based on basic modelling concepts. We will start with the classic capacitated lot-sizing problem and learn how to model and solve it using JuMP.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures-1",
    "href": "general/syllabus.html#lectures-1",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nProduction Planning in Breweries (V)\nA case study on beer brewing based on the classic capacitated lot-sizing problem\nMinimizing Split Orders in E-Commerce (VI)\nA case study in E-Commerce based on a quadratic knapsack problem\nPeriodic Library Routing (VII)\nA case study on routing books to branches based on a capacitated vehicle routing problem\nPolice Districting (VIII)\nA case study on police districting based on a facility location problem",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#applied-optimization-with-advanced-models",
    "href": "general/syllabus.html#applied-optimization-with-advanced-models",
    "title": "Syllabus",
    "section": "Applied Optimization with Advanced Models",
    "text": "Applied Optimization with Advanced Models\nIn the third part, we will cover more advanced optimisation models and concepts. We will start by looking into three different applied optimisation problems in crowd safety.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures-2",
    "href": "general/syllabus.html#lectures-2",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nSafety Planning for the Islamic Pilgrimage in Mecca (IX)\nA case study on safety planning for the hajj pilgrimage based on time-dependent network flows\nPassenger Flow Control in Urban Rail (X)\nA case study on passenger flow control in urban rail based on time-dependent network flows\nArena Seat Planning under Distancing Rules (XI)\nA case study on arena seat planning under distancing rules based on the 2-dimensional knapsack problem\nSales Force Deployment for Teams (XII)\nA case study on sales force deployment for teams based on a linear programming model\nRecap and Discussion (XIII)\nWe repeat the concepts from the course and discuss all your remaining questions",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html",
    "href": "part-04/lecture-jump.html",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "Functions are reusable blocks of code\nDefine functions using the function keyword\nFunctions can take arguments and return values\nUse return to specify the output of a function\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can create anonymous functions using the -&gt; syntax for quick, one-off operations.\n\n\n\n\n\n\nPackages extend Julia’s functionality\nUse using Pkg to access package management\nInstall packages with Pkg.add(\"PackageName\")\nImport packages with using PackageName or import PackageName\n\n\n\n\n\nDataFrames are used for working with tabular data\nCreate DataFrames using the DataFrame constructor\nAccess columns using dot notation or square brackets\nPerform operations on columns and rows\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nUse describe(df) to get a quick summary of your DataFrame.\n\n\n\n\n\n\nIO operations allow reading from and writing to files\nReading and writing CSV files can be done with the CSV package\nUse CSV.read() to read a CSV file into a DataFrame\nUse CSV.write() to write a DataFrame to a CSV file\n\n\n\n\n\nPlotting in Julia is done through packages like Plots.jl\nCreate basic plots with functions like plot(), scatter(), bar()\nCustomize plots with attributes like title, xlabel, ylabel\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nExplore different plot types and in the long term even backends for various output formats and interactivity.\n\n\n\n\n\n\nThe tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#functions",
    "href": "part-04/lecture-jump.html#functions",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "Functions are reusable blocks of code\nDefine functions using the function keyword\nFunctions can take arguments and return values\nUse return to specify the output of a function\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can create anonymous functions using the -&gt; syntax for quick, one-off operations.",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#packages",
    "href": "part-04/lecture-jump.html#packages",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "Packages extend Julia’s functionality\nUse using Pkg to access package management\nInstall packages with Pkg.add(\"PackageName\")\nImport packages with using PackageName or import PackageName",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#dataframes",
    "href": "part-04/lecture-jump.html#dataframes",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "DataFrames are used for working with tabular data\nCreate DataFrames using the DataFrame constructor\nAccess columns using dot notation or square brackets\nPerform operations on columns and rows\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nUse describe(df) to get a quick summary of your DataFrame.",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#inputoutput-io",
    "href": "part-04/lecture-jump.html#inputoutput-io",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "IO operations allow reading from and writing to files\nReading and writing CSV files can be done with the CSV package\nUse CSV.read() to read a CSV file into a DataFrame\nUse CSV.write() to write a DataFrame to a CSV file",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#plots",
    "href": "part-04/lecture-jump.html#plots",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "Plotting in Julia is done through packages like Plots.jl\nCreate basic plots with functions like plot(), scatter(), bar()\nCustomize plots with attributes like title, xlabel, ylabel\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nExplore different plot types and in the long term even backends for various output formats and interactivity.",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#solutions-from-last-week",
    "href": "part-04/lecture-jump.html#solutions-from-last-week",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "The tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#topics-of-the-tutorials",
    "href": "part-04/lecture-jump.html#topics-of-the-tutorials",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nJuMP: Learn how to use JuMP to define optimization problems\nVariable Bounds: Learn how to set variable bounds\nConstrains: Learn how to add constraints to your model\nAdvanced Modeling: Learn how to model more complex problems\nTransport Problem: Learn how to solve a transportation problem",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#get-started-with-the-tutorials",
    "href": "part-04/lecture-jump.html#get-started-with-the-tutorials",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload this weeks tutorials and start with the first one\nRemember, you can ask questions anytime!\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for this lecture!\nThe remaining time we will already start working on the problems of the fourth lecture. From next week, we will start with different optimizations problems and topics, that we address together in the course.",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#literature-1",
    "href": "part-04/lecture-jump.html#literature-1",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-presentation.html#functions",
    "href": "part-04/lecture-presentation.html#functions",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Functions",
    "text": "Functions\n\nFunctions are reusable blocks of code\nDefine functions using the function keyword\nFunctions can take arguments and return values\nUse return to specify the output of a function\n\n\n\n\n\n\n\n\nTip\n\n\nYou can create anonymous functions using the -&gt; syntax for quick, one-off operations."
  },
  {
    "objectID": "part-04/lecture-presentation.html#packages",
    "href": "part-04/lecture-presentation.html#packages",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Packages",
    "text": "Packages\n\nPackages extend Julia’s functionality\nUse using Pkg to access package management\nInstall packages with Pkg.add(\"PackageName\")\nImport packages with using PackageName or import PackageName"
  },
  {
    "objectID": "part-04/lecture-presentation.html#dataframes",
    "href": "part-04/lecture-presentation.html#dataframes",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "DataFrames",
    "text": "DataFrames\n\nDataFrames are used for working with tabular data\nCreate DataFrames using the DataFrame constructor\nAccess columns using dot notation or square brackets\nPerform operations on columns and rows\n\n\n\n\n\n\n\n\nTip\n\n\nUse describe(df) to get a quick summary of your DataFrame."
  },
  {
    "objectID": "part-04/lecture-presentation.html#inputoutput-io",
    "href": "part-04/lecture-presentation.html#inputoutput-io",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Input/Output (IO)",
    "text": "Input/Output (IO)\n\nIO operations allow reading from and writing to files\nReading and writing CSV files can be done with the CSV package\nUse CSV.read() to read a CSV file into a DataFrame\nUse CSV.write() to write a DataFrame to a CSV file"
  },
  {
    "objectID": "part-04/lecture-presentation.html#plots",
    "href": "part-04/lecture-presentation.html#plots",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Plots",
    "text": "Plots\n\nPlotting in Julia is done through packages like Plots.jl\nCreate basic plots with functions like plot(), scatter(), bar()\nCustomize plots with attributes like title, xlabel, ylabel\n\n\n\n\n\n\n\n\nTip\n\n\nExplore different plot types and in the long term even backends for various output formats and interactivity."
  },
  {
    "objectID": "part-04/lecture-presentation.html#solutions-from-last-week",
    "href": "part-04/lecture-presentation.html#solutions-from-last-week",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Solutions from last Week",
    "text": "Solutions from last Week\n\nThe tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n\n\n\n\n\n\n\nTip\n\n\nYou can ask questions anytime in class or via email!"
  },
  {
    "objectID": "part-04/lecture-presentation.html#topics-of-the-tutorials",
    "href": "part-04/lecture-presentation.html#topics-of-the-tutorials",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nJuMP: Learn how to use JuMP to define optimization problems\nVariable Bounds: Learn how to set variable bounds\nConstrains: Learn how to add constraints to your model\nAdvanced Modeling: Learn how to model more complex problems\nTransport Problem: Learn how to solve a transportation problem"
  },
  {
    "objectID": "part-04/lecture-presentation.html#get-started-with-the-tutorials",
    "href": "part-04/lecture-presentation.html#get-started-with-the-tutorials",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload this weeks tutorials and start with the first one\nRemember, you can ask questions anytime!\n\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for this lecture!\nThe remaining time we will already start working on the problems of the fourth lecture. From next week, we will start with different optimizations problems and topics, that we address together in the course."
  },
  {
    "objectID": "part-04/lecture-presentation.html#literature-1",
    "href": "part-04/lecture-presentation.html#literature-1",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.\n\n\n\nLecture IV - Modelling with JuMP | Dr. Tobias Vlćek | Home"
  },
  {
    "objectID": "part-02/lecture-firststeps.html",
    "href": "part-02/lecture-firststeps.html",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "To prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia.\n\n\n\n\n\nHead to julialang.org and follow the instructions.\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nIf you are ever asked to add something to your “PATH”, do so!\n\n\n\n\n\n\n\nNext, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS\n\n\n\n\n\nHead to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release\n\n\n\n\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”\n\n\n\n\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”\n\n\n\n\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry if it is not running right away. We will fix this together!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#download-and-install-julia",
    "href": "part-02/lecture-firststeps.html#download-and-install-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "To prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia.",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#installating-julia",
    "href": "part-02/lecture-firststeps.html#installating-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Head to julialang.org and follow the instructions.\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nIf you are ever asked to add something to your “PATH”, do so!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#vs-code",
    "href": "part-02/lecture-firststeps.html#vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Next, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#installing-vs-code",
    "href": "part-02/lecture-firststeps.html#installing-vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Head to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#verify-the-installation",
    "href": "part-02/lecture-firststeps.html#verify-the-installation",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Start the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#create-a-new-file",
    "href": "part-02/lecture-firststeps.html#create-a-new-file",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Create a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#everything-working",
    "href": "part-02/lecture-firststeps.html#everything-working",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "If the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry if it is not running right away. We will fix this together!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#julia-as-a-programming-language",
    "href": "part-02/lecture-firststeps.html#julia-as-a-programming-language",
    "title": "Lecture II - First Steps in Julia",
    "section": "Julia as a Programming Language",
    "text": "Julia as a Programming Language\n\nFollowing three lectures are dedicated to learning the basics\nStart with the very basics and gradually move on\nFocus in the first two lectures on the programming language\nThird lecture dedicated to Mathematical Optimization",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#notebooks-in-vs-code",
    "href": "part-02/lecture-firststeps.html#notebooks-in-vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "Notebooks in VS Code",
    "text": "Notebooks in VS Code\n\nThe easiest way is by using VS Code\nInstall the Jupyter Extension\nNow, you can open .ipynb files\nHere you can run the code in the cells",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#downloading-the-notebooks",
    "href": "part-02/lecture-firststeps.html#downloading-the-notebooks",
    "title": "Lecture II - First Steps in Julia",
    "section": "Downloading the Notebooks",
    "text": "Downloading the Notebooks\n\nYou will find the tutorial notebooks next to the tutorial pages\nOn each page, you will find a button Jupyter on the right\nClick it to download the notebook and save it\nI’d recommend storing the notebooks in a separate directory for this course",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#learning-by-doing",
    "href": "part-02/lecture-firststeps.html#learning-by-doing",
    "title": "Lecture II - First Steps in Julia",
    "section": "Learning by doing",
    "text": "Learning by doing\n\nThe best way to learn a programming language is by doing\nWe will therefore solve problems the coming weeks\nThe goal is to get you familiar with the language\nYou can discuss the problems with your fellow students\nYou can hand in your solutions to receive bonus points!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#ijulia",
    "href": "part-02/lecture-firststeps.html#ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "IJulia",
    "text": "IJulia\n\nIJulia is an interface between Julia and Jupyter Notebooks\nPopular tool for data analysis and visualization\nYou can use IJulia to run Julia code in the notebooks\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can also copy and paste code from the notebooks into your IDE!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#installing-ijulia",
    "href": "part-02/lecture-firststeps.html#installing-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installing IJulia",
    "text": "Installing IJulia\n\nOpen the VS Code IDE and start a terminal\nStart Julia by typing julia in the terminal\nInstall IJulia by typing ] to open the package manager\nInstall IJulia by typing add IJulia\nPress Enter",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#running-ijulia",
    "href": "part-02/lecture-firststeps.html#running-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Running IJulia",
    "text": "Running IJulia\nusing IJulia; notebook()\n\nStart IJulia by typing the above code in the Julia prompt\nThis will open a new browser window\nYou can now run code in the notebooks\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can also run the notebooks in VS Code, if you prefer!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#submission-of-assignments-1",
    "href": "part-02/lecture-firststeps.html#submission-of-assignments-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Submission of Assignments",
    "text": "Submission of Assignments\n\nYou can work in groups of up to three people\nSubmit the assignment via OpenOlat\nYou will submit your assignment by uploading a notebook\nThe assignment is due the day before the next tutorial\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nDon’t forget to save your notebook before uploading it to OpenOlat!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#grading-of-assignments",
    "href": "part-02/lecture-firststeps.html#grading-of-assignments",
    "title": "Lecture II - First Steps in Julia",
    "section": "Grading of Assignments",
    "text": "Grading of Assignments\n\nEach assignment is worth 0.5 points\nYou can get a maximum of 6.0 points from the assignments\nThe points will be added to your exam points\nYou need to pass the exam first, to receive any bonus points!\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThe assignments are not mandatory, but highly recommended!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#topics-of-the-tutorials",
    "href": "part-02/lecture-firststeps.html#topics-of-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nVariables: Learn how to assign values to variables\nVectors: Learn how to create and manipulate vectors\nComparisons: Learn how to compare values\nLoops: Learn how to use loops to repeat code\nScope: Learn about the scope of variables",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#get-started-with-the-tutorials",
    "href": "part-02/lecture-firststeps.html#get-started-with-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload the first notebook and open it\nStart with the first problem and solve it step by step\nYou can find the tutorials here on the website\nYou can ask questions anytime!\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for this lecture!\nThe remaining time we will already start working on the first problems.",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#literature-1",
    "href": "part-02/lecture-firststeps.html#literature-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-presentation.html#download-and-install-julia",
    "href": "part-02/lecture-presentation.html#download-and-install-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Download and Install Julia",
    "text": "Download and Install Julia\n\nTo prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia."
  },
  {
    "objectID": "part-02/lecture-presentation.html#installating-julia",
    "href": "part-02/lecture-presentation.html#installating-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installating Julia",
    "text": "Installating Julia\n\n\nHead to julialang.org and follow the instructions.\n\n\n\n\n\n\n\n\nTip\n\n\nIf you are ever asked to add something to your “PATH”, do so!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#vs-code",
    "href": "part-02/lecture-presentation.html#vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "VS Code",
    "text": "VS Code\n\n\nNext, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS"
  },
  {
    "objectID": "part-02/lecture-presentation.html#installing-vs-code",
    "href": "part-02/lecture-presentation.html#installing-vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installing VS Code",
    "text": "Installing VS Code\n\nHead to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release"
  },
  {
    "objectID": "part-02/lecture-presentation.html#verify-the-installation",
    "href": "part-02/lecture-presentation.html#verify-the-installation",
    "title": "Lecture II - First Steps in Julia",
    "section": "Verify the Installation",
    "text": "Verify the Installation\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”"
  },
  {
    "objectID": "part-02/lecture-presentation.html#create-a-new-file",
    "href": "part-02/lecture-presentation.html#create-a-new-file",
    "title": "Lecture II - First Steps in Julia",
    "section": "Create a new file",
    "text": "Create a new file\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\n\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”"
  },
  {
    "objectID": "part-02/lecture-presentation.html#everything-working",
    "href": "part-02/lecture-presentation.html#everything-working",
    "title": "Lecture II - First Steps in Julia",
    "section": "Everything working?",
    "text": "Everything working?\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nTip\n\n\nDon’t worry if it is not running right away. We will fix this together!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#julia-as-a-programming-language",
    "href": "part-02/lecture-presentation.html#julia-as-a-programming-language",
    "title": "Lecture II - First Steps in Julia",
    "section": "Julia as a Programming Language",
    "text": "Julia as a Programming Language\n\nFollowing three lectures are dedicated to learning the basics\nStart with the very basics and gradually move on\nFocus in the first two lectures on the programming language\nThird lecture dedicated to Mathematical Optimization"
  },
  {
    "objectID": "part-02/lecture-presentation.html#notebooks-in-vs-code",
    "href": "part-02/lecture-presentation.html#notebooks-in-vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "Notebooks in VS Code",
    "text": "Notebooks in VS Code\n\nThe easiest way is by using VS Code\nInstall the Jupyter Extension\nNow, you can open .ipynb files\nHere you can run the code in the cells"
  },
  {
    "objectID": "part-02/lecture-presentation.html#downloading-the-notebooks",
    "href": "part-02/lecture-presentation.html#downloading-the-notebooks",
    "title": "Lecture II - First Steps in Julia",
    "section": "Downloading the Notebooks",
    "text": "Downloading the Notebooks\n\nYou will find the tutorial notebooks next to the tutorial pages\nOn each page, you will find a button Jupyter on the right\nClick it to download the notebook and save it\nI’d recommend storing the notebooks in a separate directory for this course"
  },
  {
    "objectID": "part-02/lecture-presentation.html#learning-by-doing",
    "href": "part-02/lecture-presentation.html#learning-by-doing",
    "title": "Lecture II - First Steps in Julia",
    "section": "Learning by doing",
    "text": "Learning by doing\n\nThe best way to learn a programming language is by doing\nWe will therefore solve problems the coming weeks\nThe goal is to get you familiar with the language\nYou can discuss the problems with your fellow students\nYou can hand in your solutions to receive bonus points!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#ijulia",
    "href": "part-02/lecture-presentation.html#ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "IJulia",
    "text": "IJulia\n\nIJulia is an interface between Julia and Jupyter Notebooks\nPopular tool for data analysis and visualization\nYou can use IJulia to run Julia code in the notebooks\n\n\n\n\n\n\n\n\nTip\n\n\nYou can also copy and paste code from the notebooks into your IDE!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#installing-ijulia",
    "href": "part-02/lecture-presentation.html#installing-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installing IJulia",
    "text": "Installing IJulia\n\nOpen the VS Code IDE and start a terminal\nStart Julia by typing julia in the terminal\nInstall IJulia by typing ] to open the package manager\nInstall IJulia by typing add IJulia\nPress Enter"
  },
  {
    "objectID": "part-02/lecture-presentation.html#running-ijulia",
    "href": "part-02/lecture-presentation.html#running-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Running IJulia",
    "text": "Running IJulia\nusing IJulia; notebook()\n\nStart IJulia by typing the above code in the Julia prompt\nThis will open a new browser window\nYou can now run code in the notebooks\n\n\n\n\n\n\n\n\nTip\n\n\nYou can also run the notebooks in VS Code, if you prefer!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#submission-of-assignments-1",
    "href": "part-02/lecture-presentation.html#submission-of-assignments-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Submission of Assignments",
    "text": "Submission of Assignments\n\nYou can work in groups of up to three people\nSubmit the assignment via OpenOlat\nYou will submit your assignment by uploading a notebook\nThe assignment is due the day before the next tutorial\n\n\n\n\n\n\n\n\nTip\n\n\nDon’t forget to save your notebook before uploading it to OpenOlat!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#grading-of-assignments",
    "href": "part-02/lecture-presentation.html#grading-of-assignments",
    "title": "Lecture II - First Steps in Julia",
    "section": "Grading of Assignments",
    "text": "Grading of Assignments\n\nEach assignment is worth 0.5 points\nYou can get a maximum of 6.0 points from the assignments\nThe points will be added to your exam points\nYou need to pass the exam first, to receive any bonus points!\n\n\n\n\n\n\n\n\nNote\n\n\nThe assignments are not mandatory, but highly recommended!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#topics-of-the-tutorials",
    "href": "part-02/lecture-presentation.html#topics-of-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nVariables: Learn how to assign values to variables\nVectors: Learn how to create and manipulate vectors\nComparisons: Learn how to compare values\nLoops: Learn how to use loops to repeat code\nScope: Learn about the scope of variables"
  },
  {
    "objectID": "part-02/lecture-presentation.html#get-started-with-the-tutorials",
    "href": "part-02/lecture-presentation.html#get-started-with-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload the first notebook and open it\nStart with the first problem and solve it step by step\nYou can find the tutorials here on the website\nYou can ask questions anytime!\n\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for this lecture!\nThe remaining time we will already start working on the first problems."
  },
  {
    "objectID": "part-02/lecture-presentation.html#literature-1",
    "href": "part-02/lecture-presentation.html#literature-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.\n\n\n\nLecture II - First Steps in Julia | Dr. Tobias Vlćek | Home"
  },
  {
    "objectID": "part-04/tutorial-04-04-advanced.html",
    "href": "part-04/tutorial-04-04-advanced.html",
    "title": "Tutorial IV.IV - Advanced Solver Options with HiGHS in JuMP",
    "section": "",
    "text": "Welcome to this tutorial on advanced solver options in JuMP using the HiGHS solver! Don’t worry if “advanced solver options” sounds intimidating - we’ll break everything down into simple, easy-to-understand concepts.\nImagine you’re using a GPS app to find the best route to a new restaurant. Just like how you can adjust settings in your GPS (like avoiding toll roads or preferring highways), we can adjust settings in our optimization solver to help it find solutions more efficiently or to meet specific requirements.\nBy the end of this tutorial, you’ll be able to: 1. Understand what solver options are and why they’re useful 2. Set basic solver options like time limits and solution tolerances 3. Interpret solver output to understand how well your problem was solved\nLet’s start by loading the necessary packages:\n\nusing JuMP, HiGHS",
    "crumbs": [
      "04 Optimization",
      "04 - Advanced"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-04-advanced.html#exercise-1.1---set-solver-options",
    "href": "part-04/tutorial-04-04-advanced.html#exercise-1.1---set-solver-options",
    "title": "Tutorial IV.IV - Advanced Solver Options with HiGHS in JuMP",
    "section": "Exercise 1.1 - Set Solver Options",
    "text": "Exercise 1.1 - Set Solver Options\nNow it’s your turn! Set the following solver options: 1. A time limit of 120 seconds 2. A MIP gap tolerance of 0.5% 3. Turn off presolve\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert time_limit_sec(model) == 120 \"The time limit should be 120 seconds but is $(time_limit_sec(model))\"\n@assert solver_name(model) == \"HiGHS\" \"The solver should be HiGHS but is $(solver_name(model))\"\n@assert MOI.get(model, MOI.RawOptimizerAttribute(\"mip_rel_gap\")) == 0.005 \"The MIP gap should be 0.5% but is $(MOI.get(model, MOI.RawOptimizerAttribute(\"mip_rel_gap\")))\"\n@assert MOI.get(model, MOI.RawOptimizerAttribute(\"presolve\")) == \"off\" \"Presolve should be off but is $(MOI.get(model, MOI.RawOptimizerAttribute(\"presolve\")))\"\nprintln(\"Great job! You've successfully set advanced solver options.\")",
    "crumbs": [
      "04 Optimization",
      "04 - Advanced"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-04-advanced.html#exercise-2.1---modify-and-solve-the-problem",
    "href": "part-04/tutorial-04-04-advanced.html#exercise-2.1---modify-and-solve-the-problem",
    "title": "Tutorial IV.IV - Advanced Solver Options with HiGHS in JuMP",
    "section": "Exercise 2.1 - Modify and Solve the Problem",
    "text": "Exercise 2.1 - Modify and Solve the Problem\nNow it’s your turn! Modify the problem above by:\n\nChanging the production time constraint to 300 minutes\nIncreasing the profit for widgets to 30\nSolving the modified problem and printing the results\n\n\n# YOUR CODE BELOW\n# Hint: Copy the code above and make the necessary changes\nmodel = Model(HiGHS.Optimizer) # Don't forget to re-initialize the model\n\n\n\nCode\n# Test your answer\n@assert termination_status(model) == MOI.OPTIMAL \"The termination status should be OPTIMAL but is $(termination_status(model))\"\n@assert isapprox(objective_value(model), 3780, atol=1e-6) \"The objective value should be 3780 but is $(objective_value(model))\"\n@assert isapprox(value(widgets), 80, atol=1e-6) \"The number of widgets to produce should be 80 but is $(value(widgets))\"\n@assert isapprox(value(gadgets), 46, atol=1e-6) \"The number of gadgets to produce should be 46 but is $(value(gadgets))\"\nprintln(\"Excellent work! You've successfully modified and solved the optimization problem.\")",
    "crumbs": [
      "04 Optimization",
      "04 - Advanced"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-04-IO.html",
    "href": "part-03/tutorial-03-04-IO.html",
    "title": "Tutorial III.IV - Input and Output",
    "section": "",
    "text": "Welcome to this interactive Julia tutorial on working with external files! File Input/Output (I/O) operations are crucial in programming and data analysis, allowing us to persist data, share information between programs, and work with large datasets that don’t fit in memory. In this tutorial, we’ll cover reading and writing text files, handling CSV files, and working with delimited files using various Julia packages. These skills are fundamental for data preprocessing, analysis, and result storage in real-world applications.\nFollow the instructions, write your code in the designated code blocks, and validate your results with @assert statements.",
    "crumbs": [
      "03 Data",
      "04 - Input and Output"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-04-IO.html#exercise-1.1---read-a-csv-file",
    "href": "part-03/tutorial-03-04-IO.html#exercise-1.1---read-a-csv-file",
    "title": "Tutorial III.IV - Input and Output",
    "section": "Exercise 1.1 - Read a CSV File",
    "text": "Exercise 1.1 - Read a CSV File\nNow it’s your turn! Let’s read the CSV file we just created.\n\n\n\n\n\n\nTip\n\n\n\nTo learn how to use a Julia function, you can type ? followed by the function name in the REPL (Julia’s command-line interface). For example, ?readdlm will show you information about the readdlm() function.\n\n\nUse the readdlm() function to read the ‘matrix.csv’ file we just created. Save the result in a variable called read_matrix.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert read_matrix == new_data\nprintln(\"File 'matrix.csv' read successfully!\")",
    "crumbs": [
      "03 Data",
      "04 - Input and Output"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-04-IO.html#exercise-2.1---write-a-dataframe-to-a-csv-file",
    "href": "part-03/tutorial-03-04-IO.html#exercise-2.1---write-a-dataframe-to-a-csv-file",
    "title": "Tutorial III.IV - Input and Output",
    "section": "Exercise 2.1 - Write a DataFrame to a CSV File",
    "text": "Exercise 2.1 - Write a DataFrame to a CSV File\nWrite the following given DataFrame to a CSV file table_out.csv in the folder ExampleData. This can be done by using the function CSV.write(). To learn the syntax, ask the inbuild help with ? and the function name.\n\nusing CSV, DataFrames\ndata = DataFrame(Name = [\"Elio\", \"Bob\", \"Yola\"], Age = [18, 25, 29])\ncsv_file_path = \"ExampleData/table_out.csv\"\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert isfile(\"ExampleData/table_out.csv\") \"Sorry, the file could not be found. \n    Have you followed all steps?\"\nprintln(\"CSV file 'data.csv' written successfully!\")",
    "crumbs": [
      "03 Data",
      "04 - Input and Output"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-04-IO.html#exercise-2.2---read-a-csv-file-in",
    "href": "part-03/tutorial-03-04-IO.html#exercise-2.2---read-a-csv-file-in",
    "title": "Tutorial III.IV - Input and Output",
    "section": "Exercise 2.2 - Read a CSV File in",
    "text": "Exercise 2.2 - Read a CSV File in\nRead the CSV file table_out.csv in the folder ExampleData into the variable read_data. Here you can use the function CSV.read(), e.g.:\nread_data = CSV.read(\"Path/datatable.csv\", DataFrame)\n\n\n\n\n\n\nNote\n\n\n\nNote, that you need to provide a sink for the data when using CSV.read(), e.g. a DataFrame.\n\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert read_data[1,1] == \"Alice\"\nprintln(\"CSV file 'table_out.csv' read successfully!\")",
    "crumbs": [
      "03 Data",
      "04 - Input and Output"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-05-dicts.html",
    "href": "part-02/tutorial-02-05-dicts.html",
    "title": "Tutorial II.V - Dictionaries",
    "section": "",
    "text": "Imagine you have a school directory where each student’s name is associated with their unique student ID. This is similar to how dictionaries work in programming - they allow you to store and retrieve information using key-value pairs.\nFollow the structured instructions, implement your code in the designated blocks, and affirm your comprehension with @assert statements.",
    "crumbs": [
      "02 First Steps",
      "05 - Dictionaries"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-05-dicts.html#exercise-1.1---create-and-modify-a-dictionary",
    "href": "part-02/tutorial-02-05-dicts.html#exercise-1.1---create-and-modify-a-dictionary",
    "title": "Tutorial II.V - Dictionaries",
    "section": "Exercise 1.1 - Create and Modify a Dictionary",
    "text": "Exercise 1.1 - Create and Modify a Dictionary\nAdd a new book called “Harry Potter and the Philosopher’s Stone” with the author “J.K. Rowling” to the created dictionary.\n\n# Creates a dictionary of books and authors\nbooks = Dict(\n    \"1984\" =&gt; \"George Orwell\", \n    \"Nexus\" =&gt; \"Yuval Noah Harari\"\n)\n# YOUR CODE BELOW\n\n\n# Test your answer\n\n@assert haskey(books, \"Harry Potter and the Philosopher's Stone\")\nprintln(\"Great! You've successfully added a new book to the books dictionary.\")",
    "crumbs": [
      "02 First Steps",
      "05 - Dictionaries"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-05-dicts.html#exercise-1.2---modify-a-dictionary",
    "href": "part-02/tutorial-02-05-dicts.html#exercise-1.2---modify-a-dictionary",
    "title": "Tutorial II.V - Dictionaries",
    "section": "Exercise 1.2 - Modify a Dictionary",
    "text": "Exercise 1.2 - Modify a Dictionary\nChange the author of “1984” to “Eric Blair” (George Orwell’s real name).\n\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert books[\"1984\"] == \"Eric Blair\"\nprintln(\"Great! You've successfully modified the books dictionary.\")",
    "crumbs": [
      "02 First Steps",
      "05 - Dictionaries"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-05-dicts.html#conclusion",
    "href": "part-02/tutorial-02-05-dicts.html#conclusion",
    "title": "Tutorial II.V - Dictionaries",
    "section": "Conclusion",
    "text": "Conclusion\nGreat! You’ve just navigated through the basics of dictionaries in Julia. Dictionaries are powerful data structures that allow for efficient data organization and retrieval. Continue to the next file to learn more advanced Julia concepts.",
    "crumbs": [
      "02 First Steps",
      "05 - Dictionaries"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-02-bounds.html",
    "href": "part-04/tutorial-04-02-bounds.html",
    "title": "Tutorial IV.II - Variables and Bounds in JuMP",
    "section": "",
    "text": "Welcome to this beginner-friendly tutorial on variables and bounds in JuMP! In this lesson, we’ll explore different types of variables and how to set limits (or bounds) on them. Don’t worry if you’re new to optimization - we’ll explain everything step by step using real-world examples.\nFollow the instructions, write your code in the designated code blocks, and confirm your understanding with @assert statements. Make sure to have the JuMP package installed to follow this tutorial.\nLet’s start by loading the JuMP package:\n\nusing JuMP\n\nNow, let’s create a model that we’ll use throughout this tutorial:\n\nmodel = Model()\nprintln(\"Great! We've created a new optimization model.\")\n\nGreat! We've created a new optimization model.",
    "crumbs": [
      "04 Optimization",
      "02 - Bounds"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-02-bounds.html#exercise-1.1---create-variables",
    "href": "part-04/tutorial-04-02-bounds.html#exercise-1.1---create-variables",
    "title": "Tutorial IV.II - Variables and Bounds in JuMP",
    "section": "Exercise 1.1 - Create Variables",
    "text": "Exercise 1.1 - Create Variables\nNow it’s your turn! Create three variables: 1. A continuous variable called water_amount 2. An integer variable called cars_produced 3. A binary variable called build_store\n\n# YOUR CODE BELOW\n# Hint: Use the @variable macro three times, once for each variable\n\n\n\nCode\n# Test your answer\n@assert typeof(water_amount) == VariableRef && !is_integer(water_amount) && !is_binary(water_amount)\n@assert typeof(cars_produced) == VariableRef && is_integer(cars_produced)\n@assert typeof(build_store) == VariableRef && is_binary(build_store)\nprintln(\"Excellent work! You've successfully created continuous, integer, and binary variables.\")",
    "crumbs": [
      "04 Optimization",
      "02 - Bounds"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-02-bounds.html#exercise-2.1---create-an-array",
    "href": "part-04/tutorial-04-02-bounds.html#exercise-2.1---create-an-array",
    "title": "Tutorial IV.II - Variables and Bounds in JuMP",
    "section": "Exercise 2.1 - Create an Array",
    "text": "Exercise 2.1 - Create an Array\nImagine you’re planning production for a week. Create an array daily_production with 7 non-negative variables, one for each day of the week.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert length(daily_production) == 7\n@assert all(lower_bound(daily_production[i]) == 0 for i in 1:7)\nprintln(\"Great job! You've created an array of 7 non-negative variables for daily production.\")",
    "crumbs": [
      "04 Optimization",
      "02 - Bounds"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-02-bounds.html#exercise-2.2---create-a-matrix-of-variables",
    "href": "part-04/tutorial-04-02-bounds.html#exercise-2.2---create-a-matrix-of-variables",
    "title": "Tutorial IV.II - Variables and Bounds in JuMP",
    "section": "Exercise 2.2 - Create a Matrix of Variables",
    "text": "Exercise 2.2 - Create a Matrix of Variables\nNow, imagine you’re deciding whether to stock 4 different products in 3 different stores. Create a 3x4 matrix of binary variables called stock_decision.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert size(stock_decision) == (3, 4)\n@assert all(is_binary(stock_decision[i,j]) for i in 1:3, j in 1:4)\nprintln(\"Excellent! You've created a 3x4 matrix of binary variables for stocking decisions.\")",
    "crumbs": [
      "04 Optimization",
      "02 - Bounds"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-02-bounds.html#exercise-3.1---set-bounds-on-a-variable",
    "href": "part-04/tutorial-04-02-bounds.html#exercise-3.1---set-bounds-on-a-variable",
    "title": "Tutorial IV.II - Variables and Bounds in JuMP",
    "section": "Exercise 3.1 - Set Bounds on a Variable",
    "text": "Exercise 3.1 - Set Bounds on a Variable\nCreate a variable temperature that represents the temperature setting on a thermostat. It should be between 0 and 37 degrees.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert lower_bound(temperature) == 0\n@assert upper_bound(temperature) == 37\nprintln(\"Well done! You've created a variable for temperature with appropriate bounds.\")",
    "crumbs": [
      "04 Optimization",
      "02 - Bounds"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html",
    "href": "part-03/tutorial-03-05-Plotting.html",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "",
    "text": "Welcome to this tutorial on plotting in Julia! We’ll be using the powerful Plots.jl package to create beautiful and informative visualizations. Don’t worry if you’re new to plotting – we’ll start with the basics and gradually build up to more advanced techniques.\nIn this tutorial, you’ll learn how to: 1. Create simple plots like line graphs and scatter plots 2. Customize your plots with colors, labels, and styles 3. Add multiple data series to a single plot 4. Save your plots as image files for use in reports or presentations\nFollow the instructions, write your code in the designated code blocks, and validate your results with @assert statements.\nBefore we begin, let’s make sure you have the necessary packages installed. If you’ve been following the course, you’ll need to install the Plots and StatsPlots packages:\n\nimport Pkg; Pkg.add([\"Plots\",\"StatsPlots\"])\n\nNow, let’s load these packages:\n\nusing Plots, StatsPlots",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#exercise-1.1---create-a-scatter-plot",
    "href": "part-03/tutorial-03-05-Plotting.html#exercise-1.1---create-a-scatter-plot",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "Exercise 1.1 - Create a Scatter Plot",
    "text": "Exercise 1.1 - Create a Scatter Plot\nNow it’s your turn! Create a scatter plot using the scatter() function instead of plot(). Use a range from 1 to 20 for x, and generate 20 random numbers for y.\n\n# YOUR CODE BELOW\n# Hint: Use x = 1:20 and y = rand(20)\n\n\n\nCode\n# Test your answer\n@assert @isdefined scatter_plot\nprintln(\"Great job! You've created your first scatter plot.\")\ndisplay(scatter_plot)",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#exercise-2.1---customize-a-line-plot",
    "href": "part-03/tutorial-03-05-Plotting.html#exercise-2.1---customize-a-line-plot",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "Exercise 2.1 - Customize a Line Plot",
    "text": "Exercise 2.1 - Customize a Line Plot\nNow it’s your turn to get creative! Customize a line plot with your choice of colors, line styles, and markers. Save your masterpiece in the variable custom_line_plot.\n\n# YOUR CODE BELOW\n# Hint: Try different line styles (:dash, :dot), colors (:blue, :green), and markers (:star, :diamond)\n\n\n\nCode\n# Test your answer\n@assert @isdefined custom_line_plot\nprintln(\"Excellent! You've created a custom line plot.\")\ndisplay(custom_line_plot)\n\n\n\n\n\n\n\n\nNote\n\n\n\nFeel free to experiment with different options. There’s no “right” answer here – it’s all about what looks good to you!",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#exercise-3.1---create-a-multiple-series-plot",
    "href": "part-03/tutorial-03-05-Plotting.html#exercise-3.1---create-a-multiple-series-plot",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "Exercise 3.1 - Create a Multiple Series Plot",
    "text": "Exercise 3.1 - Create a Multiple Series Plot\nNYour turn! Create a plot called multi_series_plot with three data series y1, y2, and y3. Make sure to give each series a different color and label.\n\n# YOUR CODE BELOW\n# Hint: Use plot() for the first series, then plot!() for the second and third\n\n\n\nCode\n# Test your answer\n@assert @isdefined y1\n@assert @isdefined y2\n@assert @isdefined y3\n@assert @isdefined multi_series_plot\nprintln(\"Fantastic! You've created a plot with multiple series.\")\ndisplay(multi_series_plot)",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#exercise-3.1---save-a-plot-to-a-file",
    "href": "part-03/tutorial-03-05-Plotting.html#exercise-3.1---save-a-plot-to-a-file",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "Exercise 3.1 - Save a Plot to a File",
    "text": "Exercise 3.1 - Save a Plot to a File\nSave your multi_series_plot as a PNG file named “saved_plot.png” in the “ExampleData” folder.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert isfile(\"ExampleData/saved_plot.png\") \"File does not exist yet.\"\nprintln(\"Well done! You've saved your plot as an image file.\")",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#bar-plot",
    "href": "part-03/tutorial-03-05-Plotting.html#bar-plot",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "Bar Plot",
    "text": "Bar Plot\n\n# Bar plot\nx_categories = [\"A\", \"B\", \"C\", \"D\"]\ny_values = [15, 23, 18, 30]\nbar_plot = bar(\n    x_categories, \n    y_values, \n    title=\"Bar Plot Example\"\n)\ndisplay(bar_plot)",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#histogram",
    "href": "part-03/tutorial-03-05-Plotting.html#histogram",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "Histogram",
    "text": "Histogram\n\ndata = randn(1000)\nhist_plot = histogram(\n    data, \n    bins=30, \n    title=\"Histogram Example\"\n)\ndisplay(hist_plot)",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#box-plot",
    "href": "part-03/tutorial-03-05-Plotting.html#box-plot",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "Box Plot",
    "text": "Box Plot\n\n# Box plot\ngroup = repeat(1:4, inner=50)\ny = randn(200) .+ group\nbox_plot = boxplot(\n    group, \n    y, \n    title=\"Box Plot Example\"\n)\ndisplay(box_plot)",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html",
    "href": "part-03/tutorial-03-03-DataFrames.html",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "Imagine a DataFrame as a digital spreadsheet. It’s a way to organize and work with data in rows and columns. Each column can hold different types of information, like names, ages, or salaries. In this tutorial, we’ll learn how to create DataFrames, add and change data, and perform simple operations on our data.\n\n\n\n\n\n\nNote\n\n\n\nBefore we start, make sure you have the DataFrames package installed. If you’re not sure how to do this, check the previous tutorial on package management!\n\n\nLet’s begin by importing the DataFrames package:\n\n# Import the DataFrames package\nusing DataFrames",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-1.1---create-a-dataframe",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-1.1---create-a-dataframe",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 1.1 - Create a DataFrame",
    "text": "Exercise 1.1 - Create a DataFrame\nCreate and Test a DataFrame. Create a DataFrame named employees with the columns Name, Age, and Salary, and populate it with the specified data: John is 28 years old and earns 50000, Mike is 23 years old and earns 62000. Frank is 37 years old and earns 90000.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert employees == DataFrame(\n    Name = [\"John\", \"Mike\", \"Frank\"], \n    Age = [28, 23, 37], \n    Salary = [50000, 62000, 90000]\n)\nprintln(\"DataFrame created successfully!\")\nprintln(employees)\n\n\n\n\n\n\n\n\nTip\n\n\n\nRemember, for more help, use ? in the REPL and type DataFrame.",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-2.1---access-the-age-column",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-2.1---access-the-age-column",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 2.1 - Access the Age Column",
    "text": "Exercise 2.1 - Access the Age Column\nAccess the Age column from the DataFrame and save it in a new variable ages.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert ages == [28, 23, 37]\nprintln(\"Correct, the Ages column is: \", ages)",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-2.2---update-johns-salary",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-2.2---update-johns-salary",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 2.2 - Update John’s Salary",
    "text": "Exercise 2.2 - Update John’s Salary\nUpdate John’s salary to 59000.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert employees.Salary[1] == 59000\nprintln(\"Modified DataFrame: \")\nprintln(employees)",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-3.1---filter-the-dataframe",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-3.1---filter-the-dataframe",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 3.1 - Filter the DataFrame",
    "text": "Exercise 3.1 - Filter the DataFrame\nFilter the DataFrame to include only employees with salaries above 60000. Save the resulting employees in the DataFrame high_earners.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert nrow(high_earners) == 2\nprintln(\"High earners: \")\nprintln(high_earners)",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-4.1---sort-the-dataframe",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-4.1---sort-the-dataframe",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 4.1 - Sort the DataFrame",
    "text": "Exercise 4.1 - Sort the DataFrame\nSort the DataFrame based on the Age column and save it as sorted_df.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert sorted_df.Age[1] == 23\nprintln(\"DataFrame sorted by age: \")\nprintln(sorted_df)\n\n\n\n\n\n\n\n\nTip\n\n\n\nIf you have more complicated data structures, take a look at JSON files which can be used to work with all kind of differently structured data sets.",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-5.1---loop-over-dataframe",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-5.1---loop-over-dataframe",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 5.1 - Loop over DataFrame",
    "text": "Exercise 5.1 - Loop over DataFrame\nCreate a new column called Bonus in the employees DataFrame. The bonus should be calculated as 10% of the salary for employees over 30, and 5% for those 30 and under. Use a loop to iterate over the rows and calculate the bonus.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert filter(\n    row -&gt; row.Bonus == 2500, \n    employees\n).Name == [\"John\"] \"John should have a bonus of 2500\"\n@assert filter(\n    row -&gt; row.Bonus == 3100, \n    employees\n).Name == [\"Mike\"] \"Mike should have a bonus of 3100\"\n@assert filter(\n    row -&gt; row.Bonus == 9000, \n    employees\n).Name == [\"Frank\"] \"Frank should have a bonus of 9000\"\nprintln(\"Great job! All the bonuses are correct!\")",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html",
    "href": "part-02/tutorial-02-02-vectors.html",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "",
    "text": "This interactive Julia script introduces the basics of vectors, matrices, and tuples.\n\nA vector is like a single row in a spreadsheet or a shopping list - it stores items in a line\nA matrix is like a spreadsheet - it has rows and columns\nA tuple is like a sealed package containing different types of items\n\nUnderstanding these data structures and how to manipulate them is crucial in Julia. Follow the instructions, write your code in the designated code blocks, and execute the corresponding code cell.\n\n\n\n\n\n\nNote\n\n\n\nIf a cell is marked with YOUR CODE BELOW, you are expected to write your code in that cell.",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-1.1---create-a-vector",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-1.1---create-a-vector",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.1 - Create a Vector",
    "text": "Exercise 1.1 - Create a Vector\nCreate a vector ‘fib’ with the first five Fibonacci numbers: 1, 1, 2, 3, 5.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert fib == [1, 1, 2, 3, 5]\nprintln(\"The 'fib' vector: \", fib)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-1.2---append-to-a-vector",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-1.2---append-to-a-vector",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.2 - Append to a Vector",
    "text": "Exercise 1.2 - Append to a Vector\nAppend the number 8 to the fib vector.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert fib == [1, 1, 2, 3, 5, 8]\nprintln(\"The 'fib' vector after appending 8: \", fib)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-1.3---remove-the-first-element",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-1.3---remove-the-first-element",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.3 - Remove the First Element",
    "text": "Exercise 1.3 - Remove the First Element\nRemove the first element of the fib vector.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert fib == [1, 2, 3, 5, 8]\nprintln(\"The 'fib' vector after removing the first element: \", fib)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-1.4---access-and-save-the-first-three-elements",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-1.4---access-and-save-the-first-three-elements",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.4 - Access and Save the First Three Elements",
    "text": "Exercise 1.4 - Access and Save the First Three Elements\nAccess and save the first three elements of fib, to first_three_elements.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert first_three_elements == fib[1:3]\nprintln(\"The first three elements of the 'fib' vector: \", first_three_elements)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-2.1---create-a-matrix",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-2.1---create-a-matrix",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.1 - Create a Matrix",
    "text": "Exercise 2.1 - Create a Matrix\nCreate a 2x3 matrix my_matrix with the values: 1 2 3; 4 5 6.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert my_matrix == [1 2 3; 4 5 6]\nprintln(\"The 'my_matrix':\\n\", my_matrix)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-2.2---change-the-3rd-column-of-the-2nd-row",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-2.2---change-the-3rd-column-of-the-2nd-row",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.2 - Change the 3rd Column of the 2nd Row",
    "text": "Exercise 2.2 - Change the 3rd Column of the 2nd Row\nChange the 3rd column of the 2nd row to 17 by accessing and changing the element.\n\n# YOUR CODE BELOW\n\n\n\n\nCode\n# Test your answer\n@assert my_matrix == [1 2 3; 4 5 17]\nprintln(\"The 'my_matrix' after modification:\\n\", my_matrix)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-2.3---perform-matrix-addition",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-2.3---perform-matrix-addition",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.3 - Perform Matrix Addition",
    "text": "Exercise 2.3 - Perform Matrix Addition\nPerform matrix addition with my_matrix and another_matrix. Call the resulting matrix added_matrices.\n\nanother_matrix = [10 20 30; 40 50 60]\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert added_matrices == [11 22 33; 44 55 77]\nprintln(\"Result of adding 'my_matrix' and 'another_matrix':\\n\", added_matrices)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-2.4---add-10-to-each-element",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-2.4---add-10-to-each-element",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.4 - Add 10 to Each Element",
    "text": "Exercise 2.4 - Add 10 to Each Element\nAdd 10 to each element in added_matrices.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert added_matrices == [21 32 43; 54 65 87]\nprintln(\"Result of adding 10 to each element in 'added_matrices':\\n\", added_matrices)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-3.1---create-a-tuple",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-3.1---create-a-tuple",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 3.1 - Create a Tuple",
    "text": "Exercise 3.1 - Create a Tuple\nCreate a tuple my_tuple with three elements: 4.0, your matrix added_matrices, and \"Hi there!\".\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert my_tuple == (4.0, added_matrices, \"Hi there!\")\nprintln(\"The 'my_tuple': \", my_tuple)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-3.2---access-the-second-element",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-3.2---access-the-second-element",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 3.2 - Access the Second Element",
    "text": "Exercise 3.2 - Access the Second Element\nAccess the second element of my_tuple, store it in second_element.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert second_element == [21 32 43; 54 65 87]\nprintln(\"The second element of 'my_tuple':\\n\", second_element)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  }
]