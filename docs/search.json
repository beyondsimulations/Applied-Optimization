[
  {
    "objectID": "part-02/tutorial-02-02-vectors.html",
    "href": "part-02/tutorial-02-02-vectors.html",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "",
    "text": "This interactive Julia script introduces the basics of vectors, matrices, and tuples. Vectors and matrices are fundamental in numerical computing and data analysis, while tuples are essential for grouping different types of data. Understanding these data structures and how to manipulate them is crucial in Julia. Follow the instructions, write your code in the designated code blocks, and execute the corresponding code cell.\n\n\n\n\n\n\nNote\n\n\n\nAlways replace ‘YOUR CODE BELOW’ with your actual code.",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-1.1",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-1.1",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.1",
    "text": "Exercise 1.1\nCreate a vector ‘fib’ with the first five Fibonacci numbers: 1, 1, 2, 3, 5.\n\n# Create a vector 'fib' with the first five Fibonacci numbers: 1, 1, 2, 3, 5\n# YOUR CODE BELOW\n\n# Test your answer\n@assert fib == [1, 1, 2, 3, 5]\nprintln(\"The 'fib' vector: \", fib)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-1.2",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-1.2",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.2",
    "text": "Exercise 1.2\nAppend the number 8 to the fib vector.\n\n# Append the number 8 to the 'fib' vector.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert fib == [1, 1, 2, 3, 5, 8]\nprintln(\"The 'fib' vector after appending 8: \", fib)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-1.3",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-1.3",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.3",
    "text": "Exercise 1.3\nRemove the first element of the fib vector.\n\n# Remove the first element of the 'fib' vector. \n# YOUR CODE BELOW\n\n# Test your answer\n@assert fib == [1, 2, 3, 5, 8]\nprintln(\"The 'fib' vector after removing the first element: \", fib)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-1.4",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-1.4",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.4",
    "text": "Exercise 1.4\nAccess and save the first three elements of fib, to first_three_elements.\n\n# Access and save the first three elements of 'fib', to 'first_three_elements'.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert first_three_elements == fib[1:3]\nprintln(\"The first three elements of the 'fib' vector: \", first_three_elements)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-2.1",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-2.1",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.1",
    "text": "Exercise 2.1\nCreate a 2x3 matrix my_matrix with the values: 1 2 3; 4 5 6.\n\n# Create a 2x3 matrix 'my_matrix' with the values: 1 2 3; 4 5 6\n# YOUR CODE BELOW\n\n# Test your answer\n@assert my_matrix == [1 2 3; 4 5 6]\nprintln(\"The 'my_matrix':\\n\", my_matrix)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-2.2",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-2.2",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.2",
    "text": "Exercise 2.2\nChange the 3rd column of the 2nd row to 17 by accessing and changing the element.\n\n# Change the 3rd column of the 2nd row to 17 by accessing and changing the element.\n\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert my_matrix == [1 2 3; 4 5 17]\nprintln(\"The 'my_matrix' after modification:\\n\", my_matrix)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-2.3",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-2.3",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.3",
    "text": "Exercise 2.3\nPerform matrix addition with my_matrix and another_matrix. Call the resulting matrix added_matrices.\n\n# Perform matrix addition with 'my_matrix' and 'another_matrix'. Call the resulting matrix 'added_matrices'.\nanother_matrix = [10 20 30; 40 50 60]\n# YOUR CODE BELOW\n\n# Test your answer\n@assert added_matrices == [11 22 33; 44 55 77]\nprintln(\"Result of adding 'my_matrix' and 'another_matrix':\\n\", added_matrices)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-2.4",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-2.4",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.4",
    "text": "Exercise 2.4\nAdd 10 to each element in added_matrices.\n\n# Add '10' to each element in 'added_matrices'.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert added_matrices == [21 32 43; 54 65 87]\nprintln(\"Result of adding 10 to each element in 'added_matrices':\\n\", added_matrices)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-3.1",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-3.1",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 3.1",
    "text": "Exercise 3.1\nCreate a tuple my_tuple with three elements: 4.0, your matrix added_matrices, and \"Hi there!\".\n\n# Create a tuple 'my_tuple' with three elements: 4.0, your matrix 'added_matrices', and \"Hi there!\".\n# YOUR CODE BELOW\n\n# Test your answer\n@assert my_tuple == (4.0, added_matrices, \"Hi there!\")\nprintln(\"The 'my_tuple': \", my_tuple)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-3.2",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-3.2",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 3.2",
    "text": "Exercise 3.2\nAccess the second element of my_tuple, store it in second_element.\n\n# Access the second element of 'my_tuple', store it in 'second_element'.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert second_element == [21 32 43; 54 65 87]\nprintln(\"The second element of 'my_tuple':\\n\", second_element)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#conclusion",
    "href": "part-02/tutorial-02-02-vectors.html#conclusion",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Conclusion",
    "text": "Conclusion\nWell done! You’ve completed the tutorial on Vectors, Matrices, and Tuples. You’ve learned to create, manipulate, and interact with these fundamental data structures. Experiment with the code, try different operations, and see how Julia behaves. Continue to the next file to learn more.",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html",
    "href": "part-03/tutorial-03-05-Plotting.html",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "",
    "text": "This interactive Julia script introduces the basics of plotting in Julia using the Plots.jl package. It covers creating basic plots, customizing them to your needs, and saving them as files for further use. Follow the instructions, write your code in the designated code blocks, and validate your results with @assert statements.\nEnsure you have the Plots package installed to follow along with this tutorial. If you followed the course so far, you first have to install the Plots Package before you can start using it:\n\nimport Pkg; Pkg.add(\"Plots\")\n\n\nusing Plots\n\n\n\nThe Plots.jl package simplifies the process of creating a wide array of plots, from simple line plots to complex 3D visualizations. The following illustrates the basic syntax of a line plot for some random data. First, we define a variable x with a range from 1 to 10 for the x axis. Then, we define y with 10 random numbers. For example:\n\nx = 1:10      \ny = rand(10)\nline_plot = plot(x, y, title=\"Simple Line Plot\", xlabel=\"x axis\", ylabel=\"y axis\", legend=false)\ndisplay(line_plot)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe call plot() and use x and y as main arguments. Furthermore, we have a variety of choices to add further information, such as the title, labels, a legend, colors, opacity and so on. More on this later.\n\n\n\nCreate a scatter plot called scatter_plot for some random data on a range from 1 to 20. The arguments inside the functions can be the same as before, but we need to replace plot by scatter. Note, that the test are not so sophisticated here due to the structure of plots and their exploratory nature.\n\n# Create a scatter plot called 'scatter_plot' for some random data on a range from 1 to 20. The arguments inside the functions can be the same as before, but we need to replace 'plot' by 'scatter'. Note, that the test are not so sophisticated here due to the structure of plots and their exploratory nature.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert @isdefined scatter_plot\nprintln(\"Simple scatter plot created successfully!\")\ndisplay(scatter_plot)\n\n\n\n\nPlots.jl allows extensive customization options to tailor your plots. You can change colors, markers, line styles, and much more. For example, you could dash the line by adding line=:dash, change the width with linewidth=3 and the color by adding color=:red.\n\n\n\nCustomize a line plot and save the plot in the variable custom_line_plot.\n\n# Customize a line plot and save the plot in the variable `custom_line_plot`.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert @isdefined custom_line_plot\nprintln(\"Customized line plot created successfully!\")\ndisplay(custom_line_plot)\n\n\n\n\n\n\n\nNote\n\n\n\nYou can customize the appearance of a random line plot as you like.\n\n\nAdd multiple series to a plot. Instead of one series, we can also add multiple series. This is done, for example, by defining one plot (as before) and then calling plot!() while using the first plot as first argument in the function plot!().\nFor example:\n\nx = 1:20\na = rand(20)\nb = rand(20)\nmulti_plot = plot(x, a, title=\"Many Series\", xlabel=\"x axis\", ylabel=\"y axis\", label=\"a\")\nplot!(multi_plot, x, b, label=\"b\")\ndisplay(multi_plot)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe ! after plot adds to the existing plot.\n\n\n\n\n\nNow, create a plot called multi_series_plot with three data series y1, y2 and y3.\n\n# Now, create a plot called `multi_series_plot` with three data series `y1`, `y2` and `y3`.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert @isdefined y1\n@assert @isdefined y2\n@assert @isdefined y3\n@assert @isdefined multi_series_plot\nprintln(\"Multiple series plot created successfully!\")\ndisplay(multi_series_plot)\n\n\n\n\nPlots.jl supports saving your plots to various file formats including PNG, SVG, and PDF, enabling you to use your plots outside of Julia. The function to save plots is savefig(), the first argument is the plot itself and the second argument is the path/filename format as string. Replace path with the path, the filename with the actual name and format with the file format, e.g. pdf, png, … . For example, if you want to save your file as PDF, you would just name it path/filename.pdf.\n\n\n\nSave the previously created plot multi_series_plot to a file as PNG. Save it in the folder ExampleData and name it saved_plot.png.\n\n# Save the previously created plot `multi_series_plot` to a file as PNG. Save it in the folder `ExampleData` and name it `saved_plot.png`.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert  isfile(\"ExampleData/saved_plot.png\") \"File does not exist yet.\"\nprintln(\"Plot saved to 'saved_plot.pdf' successfully!\")\n\n\n\n\nFantastic! You’ve completed the tutorial on basic plotting in Julia. You’ve learned how to create basic plots and customize and save them. Continue to the next file to learn more."
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#section-1-creating-basic-plots",
    "href": "part-03/tutorial-03-05-Plotting.html#section-1-creating-basic-plots",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "",
    "text": "The Plots.jl package simplifies the process of creating a wide array of plots, from simple line plots to complex 3D visualizations. The following illustrates the basic syntax of a line plot for some random data. First, we define a variable x with a range from 1 to 10 for the x axis. Then, we define y with 10 random numbers. For example:\n\nx = 1:10      \ny = rand(10)\nline_plot = plot(x, y, title=\"Simple Line Plot\", xlabel=\"x axis\", ylabel=\"y axis\", legend=false)\ndisplay(line_plot)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe call plot() and use x and y as main arguments. Furthermore, we have a variety of choices to add further information, such as the title, labels, a legend, colors, opacity and so on. More on this later."
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#exercise-1.1",
    "href": "part-03/tutorial-03-05-Plotting.html#exercise-1.1",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "",
    "text": "Create a scatter plot called scatter_plot for some random data on a range from 1 to 20. The arguments inside the functions can be the same as before, but we need to replace plot by scatter. Note, that the test are not so sophisticated here due to the structure of plots and their exploratory nature.\n\n# Create a scatter plot called 'scatter_plot' for some random data on a range from 1 to 20. The arguments inside the functions can be the same as before, but we need to replace 'plot' by 'scatter'. Note, that the test are not so sophisticated here due to the structure of plots and their exploratory nature.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert @isdefined scatter_plot\nprintln(\"Simple scatter plot created successfully!\")\ndisplay(scatter_plot)"
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#section-2-customizing-plots",
    "href": "part-03/tutorial-03-05-Plotting.html#section-2-customizing-plots",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "",
    "text": "Plots.jl allows extensive customization options to tailor your plots. You can change colors, markers, line styles, and much more. For example, you could dash the line by adding line=:dash, change the width with linewidth=3 and the color by adding color=:red."
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#exercise-2.1",
    "href": "part-03/tutorial-03-05-Plotting.html#exercise-2.1",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "",
    "text": "Customize a line plot and save the plot in the variable custom_line_plot.\n\n# Customize a line plot and save the plot in the variable `custom_line_plot`.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert @isdefined custom_line_plot\nprintln(\"Customized line plot created successfully!\")\ndisplay(custom_line_plot)\n\n\n\n\n\n\n\nNote\n\n\n\nYou can customize the appearance of a random line plot as you like.\n\n\nAdd multiple series to a plot. Instead of one series, we can also add multiple series. This is done, for example, by defining one plot (as before) and then calling plot!() while using the first plot as first argument in the function plot!().\nFor example:\n\nx = 1:20\na = rand(20)\nb = rand(20)\nmulti_plot = plot(x, a, title=\"Many Series\", xlabel=\"x axis\", ylabel=\"y axis\", label=\"a\")\nplot!(multi_plot, x, b, label=\"b\")\ndisplay(multi_plot)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe ! after plot adds to the existing plot."
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#exercise-2.2",
    "href": "part-03/tutorial-03-05-Plotting.html#exercise-2.2",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "",
    "text": "Now, create a plot called multi_series_plot with three data series y1, y2 and y3.\n\n# Now, create a plot called `multi_series_plot` with three data series `y1`, `y2` and `y3`.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert @isdefined y1\n@assert @isdefined y2\n@assert @isdefined y3\n@assert @isdefined multi_series_plot\nprintln(\"Multiple series plot created successfully!\")\ndisplay(multi_series_plot)"
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#section-3-saving-plots-to-files",
    "href": "part-03/tutorial-03-05-Plotting.html#section-3-saving-plots-to-files",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "",
    "text": "Plots.jl supports saving your plots to various file formats including PNG, SVG, and PDF, enabling you to use your plots outside of Julia. The function to save plots is savefig(), the first argument is the plot itself and the second argument is the path/filename format as string. Replace path with the path, the filename with the actual name and format with the file format, e.g. pdf, png, … . For example, if you want to save your file as PDF, you would just name it path/filename.pdf."
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#exercise-3.1",
    "href": "part-03/tutorial-03-05-Plotting.html#exercise-3.1",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "",
    "text": "Save the previously created plot multi_series_plot to a file as PNG. Save it in the folder ExampleData and name it saved_plot.png.\n\n# Save the previously created plot `multi_series_plot` to a file as PNG. Save it in the folder `ExampleData` and name it `saved_plot.png`.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert  isfile(\"ExampleData/saved_plot.png\") \"File does not exist yet.\"\nprintln(\"Plot saved to 'saved_plot.pdf' successfully!\")"
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#conclusion",
    "href": "part-03/tutorial-03-05-Plotting.html#conclusion",
    "title": "Tutorial III.V - Plotting Graphs",
    "section": "",
    "text": "Fantastic! You’ve completed the tutorial on basic plotting in Julia. You’ve learned how to create basic plots and customize and save them. Continue to the next file to learn more."
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html",
    "href": "part-03/tutorial-03-01-functions.html",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "",
    "text": "This interactive Julia script is a comprehensive guide to understanding functions in Julia. Dive into the creation and usage of functions, grasp the concept of scope within functions, explore returning values, use anonymous functions, and leverage multiple dispatch for versatile function behavior. Follow the instructions, input your code in the designated areas, and verify your implementations with @assert statements.\n\n\nFunctions in Julia encapsulate reusable code and can be defined using the function keyword or shorthand syntax. After the keyword, you name the function and write the parameters in parentheses. For example:\nfunction multiply(a,b)\n   a * b\nend\nThis function takes two parameters, multiplies them, and returns the result implicitly. In Julia, the last expression is automatically returned, making the return keyword optional. If you explicitly use the return keyword in the function, it will return the value immediately once the function encounters the keyword and stops the further execution of the function. That way, you can also use the keyword in conditional statements and use it to return a value based on a condition.\n\n\n\nDefine and Test a Simple Addition Function. Define a function add that takes two parameters and returns their sum.\n\n# Define and Test a Simple Addition Function. Define a function `add` that takes two parameters and returns their sum.\n# YOUR CODE BELOW\n\n# Test your function\n@assert add(10, 5) == 15 \"The sum computed is $(add(10, 5)) but should be 15.\"\nprintln(\"The sum computed is $(add(10, 5)), wonderful!\")\n\n\n\n\nVariables declared inside a function are local to that function and are not accessible outside. If you want to access the variable outside of the function, you have to explicitly return it. You can do this by passing return in front of the variable you want to return from the function.\n\n\n\nTry to execude the following block of code. The objective is to understand how to return the local_variable_one from the function scope_test. Your task is to change the function, to return the value of local_variable_one.\n\n# Try to execude the following block of code. The objective is to understand how to return the 'local_variable_one' from the function 'scope_test'. Your task is to change the function, to return the value of 'local_variable_one'.\n\n# YOUR CHANGES BELOW\nfunction scope_test()\n    local_variable_one = 10\n    local_variable_two = 20\nend\n\n# YOUR CHANGES ABOVE\n# Test your function\n@assert scope_test() == 10 \"The value exported is $(scope_test()).\"\nprintln(\"The value exported is $(scope_test()), you solved it!\")\n\n\n\n\nDefine and test an implicit return function. Define a function subtract that takes two parameters and implicitly returns their difference. The implicit return feature makes your code cleaner and more concise.\n\n# Define and test an implicit return function. Define a function 'subtract' that takes two parameters and implicitly returns their difference. The implicit return feature makes your code cleaner and more concise.\n# YOUR CODE BELOW\n\n# Test your function\n@assert subtract(10, 5) == 5  \"The difference computed is $(subtract(10, 5)) but should be 5.\"\nprintln(\"The difference computed is $(subtract(10, 5)), perfect!\")\n\n\n\n\nAnonymous functions in Julia are unnamed functions, useful for concise and short operations. They are particularly useful for operations that are passed as arguments to higher-order functions or used for short, one-off computations. Syntax for anonymous functions can be either of the following:\nadd_two = (a,b) -&gt; a + b\nadd_two(a,b) = a + b\n\n\n\nCreate an anonymous function multiply that multiplies two numbers.\n\n# Create an anonymous function 'multiply' that multiplies two numbers.\n# YOUR CODE BELOW\n\n# Test your function\n@assert multiply(10, 5) == 50  \"The result is $(multiply(10, 5)) but should be 50.\"\nprintln(\"Great job! You created an anonymous function that multiplies two numbers.\")\n\n\n\n\nMultiple dispatch in Julia allows defining function behavior based on argument types, promoting code reuse and clarity. It’s a powerful feature for designing flexible and extensible functions. We first define a generic version and then provide specific implementations for different types:\n\n# Generic operation for objects of all types.\nfunction operation(a, b)\n    \"Generic operation for objects of type $(typeof(a)) and $(typeof(b))\"\nend\n\n# The specific implementations are:\noperation(a::Number, b::Number) = a + b        # Specific method for Number types.\noperation(a::String, b::String) = string(a, b) # Specific method for String types.\n\n# Test with different types of arguments.\nresult1 = operation(10, 20)               # Numeric addition.\nresult2 = operation(\"Hello, \", \"World!\")  # String concatenation.\nresult3 = operation(\"Hello, \", 20)        # Generic implementation.\n\n\"Generic operation for objects of type String and Int64\"\n\n\n\n\n\nChoose the result that should be asserted in the following to equal the expected value on the right side of the conditional statement.\n\n# Choose the result that should be asserted in the following to equal the expected value on the right side of the conditional statement. Hint: The answer is easy, you just have to change the comparisons.\n\n# YOUR CHANGES BELOW\n@assert result1 == \"Hello, World!\"\n@assert result3 == 30\n@assert result2 == \"Generic operation for objects of type String and Int64\"\nprintln(\"You solved it, the order is now correct!\")\n\n\n\n\n\n\n\nTip\n\n\n\nHint: The answer is easy, you just have to change the comparisons.\n\n\n\n\n\nGreat work! You’ve just completed the tutorial on functions in Julia. You now have a first understanding of how to create, use, and understand functions in Julia. Continue to the next file to learn more."
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#section-1-creating-and-calling-functions",
    "href": "part-03/tutorial-03-01-functions.html#section-1-creating-and-calling-functions",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "",
    "text": "Functions in Julia encapsulate reusable code and can be defined using the function keyword or shorthand syntax. After the keyword, you name the function and write the parameters in parentheses. For example:\nfunction multiply(a,b)\n   a * b\nend\nThis function takes two parameters, multiplies them, and returns the result implicitly. In Julia, the last expression is automatically returned, making the return keyword optional. If you explicitly use the return keyword in the function, it will return the value immediately once the function encounters the keyword and stops the further execution of the function. That way, you can also use the keyword in conditional statements and use it to return a value based on a condition."
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#exercise-1.1",
    "href": "part-03/tutorial-03-01-functions.html#exercise-1.1",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "",
    "text": "Define and Test a Simple Addition Function. Define a function add that takes two parameters and returns their sum.\n\n# Define and Test a Simple Addition Function. Define a function `add` that takes two parameters and returns their sum.\n# YOUR CODE BELOW\n\n# Test your function\n@assert add(10, 5) == 15 \"The sum computed is $(add(10, 5)) but should be 15.\"\nprintln(\"The sum computed is $(add(10, 5)), wonderful!\")"
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#section-2-scope-within-functions",
    "href": "part-03/tutorial-03-01-functions.html#section-2-scope-within-functions",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "",
    "text": "Variables declared inside a function are local to that function and are not accessible outside. If you want to access the variable outside of the function, you have to explicitly return it. You can do this by passing return in front of the variable you want to return from the function."
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#exercise-2.1",
    "href": "part-03/tutorial-03-01-functions.html#exercise-2.1",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "",
    "text": "Try to execude the following block of code. The objective is to understand how to return the local_variable_one from the function scope_test. Your task is to change the function, to return the value of local_variable_one.\n\n# Try to execude the following block of code. The objective is to understand how to return the 'local_variable_one' from the function 'scope_test'. Your task is to change the function, to return the value of 'local_variable_one'.\n\n# YOUR CHANGES BELOW\nfunction scope_test()\n    local_variable_one = 10\n    local_variable_two = 20\nend\n\n# YOUR CHANGES ABOVE\n# Test your function\n@assert scope_test() == 10 \"The value exported is $(scope_test()).\"\nprintln(\"The value exported is $(scope_test()), you solved it!\")"
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#exercise-2.2",
    "href": "part-03/tutorial-03-01-functions.html#exercise-2.2",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "",
    "text": "Define and test an implicit return function. Define a function subtract that takes two parameters and implicitly returns their difference. The implicit return feature makes your code cleaner and more concise.\n\n# Define and test an implicit return function. Define a function 'subtract' that takes two parameters and implicitly returns their difference. The implicit return feature makes your code cleaner and more concise.\n# YOUR CODE BELOW\n\n# Test your function\n@assert subtract(10, 5) == 5  \"The difference computed is $(subtract(10, 5)) but should be 5.\"\nprintln(\"The difference computed is $(subtract(10, 5)), perfect!\")"
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#section-3-anonymous-functions",
    "href": "part-03/tutorial-03-01-functions.html#section-3-anonymous-functions",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "",
    "text": "Anonymous functions in Julia are unnamed functions, useful for concise and short operations. They are particularly useful for operations that are passed as arguments to higher-order functions or used for short, one-off computations. Syntax for anonymous functions can be either of the following:\nadd_two = (a,b) -&gt; a + b\nadd_two(a,b) = a + b"
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#exercise-3.1",
    "href": "part-03/tutorial-03-01-functions.html#exercise-3.1",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "",
    "text": "Create an anonymous function multiply that multiplies two numbers.\n\n# Create an anonymous function 'multiply' that multiplies two numbers.\n# YOUR CODE BELOW\n\n# Test your function\n@assert multiply(10, 5) == 50  \"The result is $(multiply(10, 5)) but should be 50.\"\nprintln(\"Great job! You created an anonymous function that multiplies two numbers.\")"
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#section-4-multiple-dispatch",
    "href": "part-03/tutorial-03-01-functions.html#section-4-multiple-dispatch",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "",
    "text": "Multiple dispatch in Julia allows defining function behavior based on argument types, promoting code reuse and clarity. It’s a powerful feature for designing flexible and extensible functions. We first define a generic version and then provide specific implementations for different types:\n\n# Generic operation for objects of all types.\nfunction operation(a, b)\n    \"Generic operation for objects of type $(typeof(a)) and $(typeof(b))\"\nend\n\n# The specific implementations are:\noperation(a::Number, b::Number) = a + b        # Specific method for Number types.\noperation(a::String, b::String) = string(a, b) # Specific method for String types.\n\n# Test with different types of arguments.\nresult1 = operation(10, 20)               # Numeric addition.\nresult2 = operation(\"Hello, \", \"World!\")  # String concatenation.\nresult3 = operation(\"Hello, \", 20)        # Generic implementation.\n\n\"Generic operation for objects of type String and Int64\""
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#exercise-4.1",
    "href": "part-03/tutorial-03-01-functions.html#exercise-4.1",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "",
    "text": "Choose the result that should be asserted in the following to equal the expected value on the right side of the conditional statement.\n\n# Choose the result that should be asserted in the following to equal the expected value on the right side of the conditional statement. Hint: The answer is easy, you just have to change the comparisons.\n\n# YOUR CHANGES BELOW\n@assert result1 == \"Hello, World!\"\n@assert result3 == 30\n@assert result2 == \"Generic operation for objects of type String and Int64\"\nprintln(\"You solved it, the order is now correct!\")\n\n\n\n\n\n\n\nTip\n\n\n\nHint: The answer is easy, you just have to change the comparisons."
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#conclusion",
    "href": "part-03/tutorial-03-01-functions.html#conclusion",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "",
    "text": "Great work! You’ve just completed the tutorial on functions in Julia. You now have a first understanding of how to create, use, and understand functions in Julia. Continue to the next file to learn more."
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html",
    "href": "part-02/tutorial-02-01-variables.html",
    "title": "Tutorial II.I - Variables and Types",
    "section": "",
    "text": "Welcome to this interactive Julia tutorial which introduces the basics of variables and types. Understanding variables and their types is crucial as they are the building blocks of any program. They determine how data is stored, manipulated, and how efficiently your code runs.\nThis script is designed to be interactive. Follow the instructions, write your code in the designated code blocks, and then execute the corresponding code. Each exercise is followed by an @assert statement that checks your solution.\nThe easiest way to run the code is by using IJulia. Start Julia, and type using IJulia; notebook() in the Julia prompt. This will open a new browser window where you can run the code. If you have not installed IJulia yet, you can do so by typing ] in the Julia prompt to open the package manager, and then installing IJulia by typing add IJulia.\n\n\n\n\n\n\nNote\n\n\n\nAlways replace ‘YOUR CODE BELOW’ with your actual code.",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-1.1",
    "href": "part-02/tutorial-02-01-variables.html#exercise-1.1",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 1.1",
    "text": "Exercise 1.1\nDeclare a variable named ‘x’ and assign it the value 1.\n\n# Declare a variable named 'x' and assign it the value 1\n# YOUR CODE BELOW\n\n# Test your answer\n@assert x == 1 \"Check again, the value of x should be 1. Remember to assign the value directly to x.\"\nprintln(\"Great, you have correctly assigned the value $x to the variable 'x'.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-1.2",
    "href": "part-02/tutorial-02-01-variables.html#exercise-1.2",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 1.2",
    "text": "Exercise 1.2\nDeclare a variable named ‘hi’ and assign it the string “Hello, Optimization!”.\n\n# Declare a variable named 'hi' and assign it the string  \"Hello, Optimization!\"\n# YOUR CODE BELOW\n\n# Test your answer\n@assert hi == \"Hello, Optimization!\" \"Make sure the variable 'hi' contains the exact string \\\"Hello, Optimization\\\"!\"\nprintln(\"Good, the variable 'hi' now states \\\"$hi\\\".\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-2.1",
    "href": "part-02/tutorial-02-01-variables.html#exercise-2.1",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 2.1",
    "text": "Exercise 2.1\nCreate an Integer variable ‘answerUniverse’ and set it to 42.\n\n# Create an Integer variable 'answerUniverse' and set it to 42\n# YOUR CODE BELOW\n\n# Test your answer\n@assert answerUniverse == 42 \"The variable 'answerUniverse' should hold 42.\"\nprintln(\"Great, the answer to all questions on the universe is $answerUniverse now.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-2.2",
    "href": "part-02/tutorial-02-01-variables.html#exercise-2.2",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 2.2",
    "text": "Exercise 2.2\nCreate a Float variable ‘money’ and set it to 1.35.\n\n# Create a Float variable 'money' and set it to 1.35\n# YOUR CODE BELOW\n\n# Test your answer\n@assert money == 1.35 \"The variable 'money' should hold the Float64 1.35.\"\nprintln(\"Perfect, the you have stored $money in the variable 'money'.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-2.3",
    "href": "part-02/tutorial-02-01-variables.html#exercise-2.3",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 2.3",
    "text": "Exercise 2.3\nCreate a Boolean variable ‘isStudent’ and set it to true.\n\n# Create a Boolean variable 'isStudent' and set it to true\n# YOUR CODE BELOW\n\n# Test your answer\n@assert isStudent == true \"The variable 'isStudent' should be set to true.\"\nprintln(\"Correct, you are a student now.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#conclusion",
    "href": "part-02/tutorial-02-01-variables.html#conclusion",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You have completed the first tutorial on Variables and Types. You’ve learned about the basics of variables, integers, floats, booleans, and strings. Continue to the next file to learn more.",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-05-scope.html",
    "href": "part-02/tutorial-02-05-scope.html",
    "title": "Tutorial II.V - Variable Scope",
    "section": "",
    "text": "This interactive Julia script is a look on variable scopes in Julia. Understand the intricacies of local and global scopes, comprehend the significance of ‘local’ and ‘global’ keywords, and discern the scope behaviors in different contexts. Follow the structured instructions, implement your code in the designated blocks, and affirm your comprehension with @assert statements.\n\n\nIn Julia, variables within a function or a loop are encapsulated in a local scope, meaning their visibility and lifespan are confined to that block of code. Variables declared in the main body of a script are in the global scope, making them accessible and modifiable across your entire program. We have seen this in the previous tutorial on Loops, where we have created scope blocks with let … end to prevent us from creating global variables.\n\n\n\nExperiment with local variables in a for loop and try to execute the following block of code.\n\n# Experiment with local variables in a `for` loop and try to execute the following block of code:\n\nprintln(\"Defining a local variable within a loop:\")\nfor i in 1:3\n    loop_variable = i\n    println(\"Inside the loop, loop_variable is: \", loop_variable)\nend\nprintln(\"Outside the loop, loop_variable is: \", loop_variable)\n\n# Test your answer\n@assert loop_variable == 3\nprintln(\"Now, the loop works and the value of the 'loop_variable' is: \", loop_variable)\n\n\n\n\n\n\n\nNote\n\n\n\nAttempting to access loop_variable here should result in an error because its scope is local to the loop. Can you come up with a way to solve this issue? Extend the code above to allow the execution of the code.\n\n\n\n\n\nExperiment with local variables in a nested loop. Try to execute the following block of code.\n\n# Experiment with local variables in a nested loop. Try to execute the following block of code:\n\nprintln(\"Defining a local variable within a loop:\")\nfor i in 1:3\n    nestedloop_variable = 0\n    for j in 1:3\n        nestedloop_variable = i * 3\n        println(\"Inside the nested loop, loop_variable is: \", nestedloop_variable)\n    end\nend\nprintln(\"Outside the nested loop, loop_variable is: \", nestedloop_variable)\n\n# Test your answer\n@assert nestedloop_variable == 9\nprintln(\"Now, the loop works and the value of the 'nestedloop_variable' is: \", nestedloop_variable)\n\n\n\n\n\n\n\nNote\n\n\n\nAttempting to access nestedloop_variable here should result in an error because its scope is only accessible in the first loop, where it is defined, and the second loop below. Can you come up with a way to solve this issue? Extend the code above to allow the execution of the code.\n\n\n\n\n\nUse ‘global’ to designate a global variable inside a local scope. Conversely, ‘local’ explicitly defines a local variable, particularly in contexts where global inference might occur.\n\n\n\nExperiment with local variables in a potentially global context using local. The objective is to redefine the value of ‘explicit_local_variable’ to “end” within the following loop. Try to execute the following block of code.\n\n# Experiment with local variables in a potentially global context using `local`. The objective is to redefine the value of 'explicit_local_variable' to \"end\" within the following loop. Try to execute the following block of code:\n\nexplicit_local_variable = \"start\"\nprintln(\"At the start of the loop, explicit_local_variable is: \", explicit_local_variable)\nfor i in 1:3\n    local explicit_local_variable = \"end\"\n    println(\"Inside the loop, explicit_local_variable is: \", explicit_local_variable)\nend\nprintln(\"Outside the loop, explicit_local_variable is: \", explicit_local_variable)\n\n# Test your answer\n@assert explicit_local_variable == \"end\" \"Currently, the value of 'explicit_local_variable' is $explicit_local_variable.\"\n\n\n\n\n\n\n\nNote\n\n\n\nAttempting to access explicit_local_variable here should result in an error because its scope is local to the loop. Can you come up with a way to solve this issue? Extend the code above to allow the execution of the code.\n\n\n\n\n\nGreat You’ve just navigated through the variable scopes in Julia. Use this knowledge to create precise, robust, and efficient programs. Continue to the next file to learn more.",
    "crumbs": [
      "02 First Steps",
      "05 - Scope"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-05-scope.html#section-1-the-local-and-global-scope",
    "href": "part-02/tutorial-02-05-scope.html#section-1-the-local-and-global-scope",
    "title": "Tutorial II.V - Variable Scope",
    "section": "",
    "text": "In Julia, variables within a function or a loop are encapsulated in a local scope, meaning their visibility and lifespan are confined to that block of code. Variables declared in the main body of a script are in the global scope, making them accessible and modifiable across your entire program. We have seen this in the previous tutorial on Loops, where we have created scope blocks with let … end to prevent us from creating global variables.",
    "crumbs": [
      "02 First Steps",
      "05 - Scope"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-05-scope.html#exercise-1.1",
    "href": "part-02/tutorial-02-05-scope.html#exercise-1.1",
    "title": "Tutorial II.V - Variable Scope",
    "section": "",
    "text": "Experiment with local variables in a for loop and try to execute the following block of code.\n\n# Experiment with local variables in a `for` loop and try to execute the following block of code:\n\nprintln(\"Defining a local variable within a loop:\")\nfor i in 1:3\n    loop_variable = i\n    println(\"Inside the loop, loop_variable is: \", loop_variable)\nend\nprintln(\"Outside the loop, loop_variable is: \", loop_variable)\n\n# Test your answer\n@assert loop_variable == 3\nprintln(\"Now, the loop works and the value of the 'loop_variable' is: \", loop_variable)\n\n\n\n\n\n\n\nNote\n\n\n\nAttempting to access loop_variable here should result in an error because its scope is local to the loop. Can you come up with a way to solve this issue? Extend the code above to allow the execution of the code.",
    "crumbs": [
      "02 First Steps",
      "05 - Scope"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-05-scope.html#exercise-1.2",
    "href": "part-02/tutorial-02-05-scope.html#exercise-1.2",
    "title": "Tutorial II.V - Variable Scope",
    "section": "",
    "text": "Experiment with local variables in a nested loop. Try to execute the following block of code.\n\n# Experiment with local variables in a nested loop. Try to execute the following block of code:\n\nprintln(\"Defining a local variable within a loop:\")\nfor i in 1:3\n    nestedloop_variable = 0\n    for j in 1:3\n        nestedloop_variable = i * 3\n        println(\"Inside the nested loop, loop_variable is: \", nestedloop_variable)\n    end\nend\nprintln(\"Outside the nested loop, loop_variable is: \", nestedloop_variable)\n\n# Test your answer\n@assert nestedloop_variable == 9\nprintln(\"Now, the loop works and the value of the 'nestedloop_variable' is: \", nestedloop_variable)\n\n\n\n\n\n\n\nNote\n\n\n\nAttempting to access nestedloop_variable here should result in an error because its scope is only accessible in the first loop, where it is defined, and the second loop below. Can you come up with a way to solve this issue? Extend the code above to allow the execution of the code.",
    "crumbs": [
      "02 First Steps",
      "05 - Scope"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-05-scope.html#section-2-working-with-global-and-local-keywords",
    "href": "part-02/tutorial-02-05-scope.html#section-2-working-with-global-and-local-keywords",
    "title": "Tutorial II.V - Variable Scope",
    "section": "",
    "text": "Use ‘global’ to designate a global variable inside a local scope. Conversely, ‘local’ explicitly defines a local variable, particularly in contexts where global inference might occur.",
    "crumbs": [
      "02 First Steps",
      "05 - Scope"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-05-scope.html#exercise-2.1",
    "href": "part-02/tutorial-02-05-scope.html#exercise-2.1",
    "title": "Tutorial II.V - Variable Scope",
    "section": "",
    "text": "Experiment with local variables in a potentially global context using local. The objective is to redefine the value of ‘explicit_local_variable’ to “end” within the following loop. Try to execute the following block of code.\n\n# Experiment with local variables in a potentially global context using `local`. The objective is to redefine the value of 'explicit_local_variable' to \"end\" within the following loop. Try to execute the following block of code:\n\nexplicit_local_variable = \"start\"\nprintln(\"At the start of the loop, explicit_local_variable is: \", explicit_local_variable)\nfor i in 1:3\n    local explicit_local_variable = \"end\"\n    println(\"Inside the loop, explicit_local_variable is: \", explicit_local_variable)\nend\nprintln(\"Outside the loop, explicit_local_variable is: \", explicit_local_variable)\n\n# Test your answer\n@assert explicit_local_variable == \"end\" \"Currently, the value of 'explicit_local_variable' is $explicit_local_variable.\"\n\n\n\n\n\n\n\nNote\n\n\n\nAttempting to access explicit_local_variable here should result in an error because its scope is local to the loop. Can you come up with a way to solve this issue? Extend the code above to allow the execution of the code.",
    "crumbs": [
      "02 First Steps",
      "05 - Scope"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-05-scope.html#conclusion",
    "href": "part-02/tutorial-02-05-scope.html#conclusion",
    "title": "Tutorial II.V - Variable Scope",
    "section": "",
    "text": "Great You’ve just navigated through the variable scopes in Julia. Use this knowledge to create precise, robust, and efficient programs. Continue to the next file to learn more.",
    "crumbs": [
      "02 First Steps",
      "05 - Scope"
    ]
  },
  {
    "objectID": "part-02/lecture-presentation.html#download-and-install-julia",
    "href": "part-02/lecture-presentation.html#download-and-install-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Download and Install Julia",
    "text": "Download and Install Julia\n\nTo prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia."
  },
  {
    "objectID": "part-02/lecture-presentation.html#installating-julia",
    "href": "part-02/lecture-presentation.html#installating-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installating Julia",
    "text": "Installating Julia\n\n\nHead to julialang.org and follow the instructions.\n\n\n\n\n\n\n\n\nTip\n\n\nIf you are ever asked to add something to your “PATH”, do so!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#vs-code",
    "href": "part-02/lecture-presentation.html#vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "VS Code",
    "text": "VS Code\n\n\nNext, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS"
  },
  {
    "objectID": "part-02/lecture-presentation.html#installing-vs-code",
    "href": "part-02/lecture-presentation.html#installing-vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installing VS Code",
    "text": "Installing VS Code\n\nHead to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release"
  },
  {
    "objectID": "part-02/lecture-presentation.html#verify-the-installation",
    "href": "part-02/lecture-presentation.html#verify-the-installation",
    "title": "Lecture II - First Steps in Julia",
    "section": "Verify the Installation",
    "text": "Verify the Installation\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”"
  },
  {
    "objectID": "part-02/lecture-presentation.html#create-a-new-file",
    "href": "part-02/lecture-presentation.html#create-a-new-file",
    "title": "Lecture II - First Steps in Julia",
    "section": "Create a new file",
    "text": "Create a new file\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\n\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”"
  },
  {
    "objectID": "part-02/lecture-presentation.html#everything-working",
    "href": "part-02/lecture-presentation.html#everything-working",
    "title": "Lecture II - First Steps in Julia",
    "section": "Everything working?",
    "text": "Everything working?\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nTip\n\n\nDon’t worry if it is not running right away. We will fix this together!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#julia-as-a-programming-language",
    "href": "part-02/lecture-presentation.html#julia-as-a-programming-language",
    "title": "Lecture II - First Steps in Julia",
    "section": "Julia as a Programming Language",
    "text": "Julia as a Programming Language\n\nFollowing three lectures are dedicated to learning the basics\nStart with the very basics and gradually move on\nFocus in the first two lectures on the programming language\nThird lecture dedicated to Mathematical Optimization"
  },
  {
    "objectID": "part-02/lecture-presentation.html#ijulia",
    "href": "part-02/lecture-presentation.html#ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "IJulia",
    "text": "IJulia\n\nIJulia is an interface between Julia and Jupyter Notebooks\nPopular tool for data analysis and visualization\nYou can use IJulia to run Julia code in the notebooks\n\n\n\n\n\n\n\n\nTip\n\n\nYou can also copy and paste code from the notebooks into your IDE!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#installing-ijulia",
    "href": "part-02/lecture-presentation.html#installing-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installing IJulia",
    "text": "Installing IJulia\n\nOpen the VS Code IDE and start a terminal\nStart Julia by typing julia in the terminal\nInstall IJulia by typing ] to open the package manager\nInstall IJulia by typing add IJulia\nPress Enter"
  },
  {
    "objectID": "part-02/lecture-presentation.html#running-ijulia",
    "href": "part-02/lecture-presentation.html#running-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Running IJulia",
    "text": "Running IJulia\nusing IJulia; notebook()\n\nStart IJulia by typing the above code in the Julia prompt\nThis will open a new browser window\nYou can now run code in the notebooks\n\n\n\n\n\n\n\n\nTip\n\n\nYou can also run the notebooks in VS Code, if you prefer!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#downloading-the-notebooks",
    "href": "part-02/lecture-presentation.html#downloading-the-notebooks",
    "title": "Lecture II - First Steps in Julia",
    "section": "Downloading the Notebooks",
    "text": "Downloading the Notebooks\n\nYou will find the tutorial notebooks next to the tutorial pages\nOn each page, you will find a button Jupyter on the right\nClick it to download the notebook and save it\nI’d recommend storing the notebooks in a separate directory for this course"
  },
  {
    "objectID": "part-02/lecture-presentation.html#learning-by-doing",
    "href": "part-02/lecture-presentation.html#learning-by-doing",
    "title": "Lecture II - First Steps in Julia",
    "section": "Learning by doing",
    "text": "Learning by doing\n\nThe best way to learn a programming language is by doing\nWe will therefore solve problems the coming weeks\nThe goal is to get you familiar with the language\nYou can discuss the problems with your fellow students\nYou can hand in your solutions to receive bonus points!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#submission-of-assignments-1",
    "href": "part-02/lecture-presentation.html#submission-of-assignments-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Submission of Assignments",
    "text": "Submission of Assignments\n\nYou can work in groups of up to three people\nSubmit the assignment via OpenOlat\nYou will submit your assignment by uploading a notebook\nThe assignment is due the day before the next tutorial\n\n\n\n\n\n\n\n\nTip\n\n\nDon’t forget to save your notebook before uploading it to OpenOlat!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#grading-of-assignments",
    "href": "part-02/lecture-presentation.html#grading-of-assignments",
    "title": "Lecture II - First Steps in Julia",
    "section": "Grading of Assignments",
    "text": "Grading of Assignments\n\nEach assignment is worth 0.5 points\nYou can get a maximum of 6.0 points from the assignments\nThe points will be added to your exam points\nYou need to pass the exam first, to receive any bonus points!\n\n\n\n\n\n\n\n\nNote\n\n\nThe assignments are not mandatory, but highly recommended!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#topics-of-the-tutorials",
    "href": "part-02/lecture-presentation.html#topics-of-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nVariables: Learn how to assign values to variables\nVectors: Learn how to create and manipulate vectors\nComparisons: Learn how to compare values\nLoops: Learn how to use loops to repeat code\nScope: Learn about the scope of variables"
  },
  {
    "objectID": "part-02/lecture-presentation.html#get-started-with-the-tutorials",
    "href": "part-02/lecture-presentation.html#get-started-with-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload the first notebook and open it\nStart with the first problem and solve it step by step\nYou can find the tutorials here on the website\nYou can ask questions anytime!\n\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for this lecture!\nThe remaining time we will already start working on the first problems."
  },
  {
    "objectID": "part-02/lecture-presentation.html#literature-1",
    "href": "part-02/lecture-presentation.html#literature-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.\n\n\n\nLecture II - First Steps in Julia | Dr. Tobias Vlćek | Home"
  },
  {
    "objectID": "part-02/lecture-firststeps.html",
    "href": "part-02/lecture-firststeps.html",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "To prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia.\n\n\n\n\n\nHead to julialang.org and follow the instructions.\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nIf you are ever asked to add something to your “PATH”, do so!\n\n\n\n\n\n\n\nNext, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS\n\n\n\n\n\nHead to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release\n\n\n\n\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”\n\n\n\n\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”\n\n\n\n\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry if it is not running right away. We will fix this together!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#download-and-install-julia",
    "href": "part-02/lecture-firststeps.html#download-and-install-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "To prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia.",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#installating-julia",
    "href": "part-02/lecture-firststeps.html#installating-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Head to julialang.org and follow the instructions.\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nIf you are ever asked to add something to your “PATH”, do so!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#vs-code",
    "href": "part-02/lecture-firststeps.html#vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Next, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#installing-vs-code",
    "href": "part-02/lecture-firststeps.html#installing-vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Head to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#verify-the-installation",
    "href": "part-02/lecture-firststeps.html#verify-the-installation",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Start the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#create-a-new-file",
    "href": "part-02/lecture-firststeps.html#create-a-new-file",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Create a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#everything-working",
    "href": "part-02/lecture-firststeps.html#everything-working",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "If the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry if it is not running right away. We will fix this together!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#julia-as-a-programming-language",
    "href": "part-02/lecture-firststeps.html#julia-as-a-programming-language",
    "title": "Lecture II - First Steps in Julia",
    "section": "Julia as a Programming Language",
    "text": "Julia as a Programming Language\n\nFollowing three lectures are dedicated to learning the basics\nStart with the very basics and gradually move on\nFocus in the first two lectures on the programming language\nThird lecture dedicated to Mathematical Optimization",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#ijulia",
    "href": "part-02/lecture-firststeps.html#ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "IJulia",
    "text": "IJulia\n\nIJulia is an interface between Julia and Jupyter Notebooks\nPopular tool for data analysis and visualization\nYou can use IJulia to run Julia code in the notebooks\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can also copy and paste code from the notebooks into your IDE!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#installing-ijulia",
    "href": "part-02/lecture-firststeps.html#installing-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installing IJulia",
    "text": "Installing IJulia\n\nOpen the VS Code IDE and start a terminal\nStart Julia by typing julia in the terminal\nInstall IJulia by typing ] to open the package manager\nInstall IJulia by typing add IJulia\nPress Enter",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#running-ijulia",
    "href": "part-02/lecture-firststeps.html#running-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Running IJulia",
    "text": "Running IJulia\nusing IJulia; notebook()\n\nStart IJulia by typing the above code in the Julia prompt\nThis will open a new browser window\nYou can now run code in the notebooks\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can also run the notebooks in VS Code, if you prefer!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#downloading-the-notebooks",
    "href": "part-02/lecture-firststeps.html#downloading-the-notebooks",
    "title": "Lecture II - First Steps in Julia",
    "section": "Downloading the Notebooks",
    "text": "Downloading the Notebooks\n\nYou will find the tutorial notebooks next to the tutorial pages\nOn each page, you will find a button Jupyter on the right\nClick it to download the notebook and save it\nI’d recommend storing the notebooks in a separate directory for this course",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#learning-by-doing",
    "href": "part-02/lecture-firststeps.html#learning-by-doing",
    "title": "Lecture II - First Steps in Julia",
    "section": "Learning by doing",
    "text": "Learning by doing\n\nThe best way to learn a programming language is by doing\nWe will therefore solve problems the coming weeks\nThe goal is to get you familiar with the language\nYou can discuss the problems with your fellow students\nYou can hand in your solutions to receive bonus points!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#submission-of-assignments-1",
    "href": "part-02/lecture-firststeps.html#submission-of-assignments-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Submission of Assignments",
    "text": "Submission of Assignments\n\nYou can work in groups of up to three people\nSubmit the assignment via OpenOlat\nYou will submit your assignment by uploading a notebook\nThe assignment is due the day before the next tutorial\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nDon’t forget to save your notebook before uploading it to OpenOlat!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#grading-of-assignments",
    "href": "part-02/lecture-firststeps.html#grading-of-assignments",
    "title": "Lecture II - First Steps in Julia",
    "section": "Grading of Assignments",
    "text": "Grading of Assignments\n\nEach assignment is worth 0.5 points\nYou can get a maximum of 6.0 points from the assignments\nThe points will be added to your exam points\nYou need to pass the exam first, to receive any bonus points!\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThe assignments are not mandatory, but highly recommended!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#topics-of-the-tutorials",
    "href": "part-02/lecture-firststeps.html#topics-of-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nVariables: Learn how to assign values to variables\nVectors: Learn how to create and manipulate vectors\nComparisons: Learn how to compare values\nLoops: Learn how to use loops to repeat code\nScope: Learn about the scope of variables",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#get-started-with-the-tutorials",
    "href": "part-02/lecture-firststeps.html#get-started-with-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload the first notebook and open it\nStart with the first problem and solve it step by step\nYou can find the tutorials here on the website\nYou can ask questions anytime!\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for this lecture!\nThe remaining time we will already start working on the first problems.",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#literature-1",
    "href": "part-02/lecture-firststeps.html#literature-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-presentation.html#variables-and-data-types",
    "href": "part-03/lecture-presentation.html#variables-and-data-types",
    "title": "Lecture III - Packages and Data Management",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\n\nVariables are used to store values\nAssign a value to a variable using the = operator\nYou can use different data types for variables\nYou can change the value of a variable\n\n\n\n\n\n\n\n\nTip\n\n\nYou can use the typeof function to check the type of a variable."
  },
  {
    "objectID": "part-03/lecture-presentation.html#vectors-and-matrices",
    "href": "part-03/lecture-presentation.html#vectors-and-matrices",
    "title": "Lecture III - Packages and Data Management",
    "section": "Vectors and Matrices",
    "text": "Vectors and Matrices\n\nVectors and matrices are used to store multiple values\nYou can create a them using the [ and ] operators\nAccess their elements using square brackets\n\n\n\n\n\n\n\n\nTip\n\n\nYou can use the push! function to add elements to a vector or the pop! function to remove elements from a vector."
  },
  {
    "objectID": "part-03/lecture-presentation.html#comparisons-and-logic",
    "href": "part-03/lecture-presentation.html#comparisons-and-logic",
    "title": "Lecture III - Packages and Data Management",
    "section": "Comparisons and Logic",
    "text": "Comparisons and Logic\n\nComparisons are used to compare values\n== checks if two values are equal\n!= checks if two values are not equal\n&lt; checks if one value is smaller than the other\n&gt;= checks if one value is greater than or equal to the other\n&& checks if two values are true\n|| checks if at least one of two values is true"
  },
  {
    "objectID": "part-03/lecture-presentation.html#loops",
    "href": "part-03/lecture-presentation.html#loops",
    "title": "Lecture III - Packages and Data Management",
    "section": "Loops",
    "text": "Loops\n\nLoops are used to repeat code\nfor loop repeats code for a fixed number of times\nwhile loop repeats code until a condition is met\nif statement checks if a condition is true\nelse executes code if a condition is false\nelseif checks if a condition is true and executes if it is"
  },
  {
    "objectID": "part-03/lecture-presentation.html#scope",
    "href": "part-03/lecture-presentation.html#scope",
    "title": "Lecture III - Packages and Data Management",
    "section": "Scope",
    "text": "Scope\n\nScope determines where a variable is defined and lives\nglobal keyword defines a global variable\nlocal keyword defines a local variable\nlet keyword defines a local variable\n\n\n\n\n\n\n\n\nTip\n\n\nGlobal variables usually make your code much slower, if they are not defined as constants. But for this leeture this is not that important."
  },
  {
    "objectID": "part-03/lecture-presentation.html#solutions-from-last-week",
    "href": "part-03/lecture-presentation.html#solutions-from-last-week",
    "title": "Lecture III - Packages and Data Management",
    "section": "Solutions from last Week",
    "text": "Solutions from last Week\n\nThe tutorials from last week will be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n\n\n\n\n\n\n\nTip\n\n\nYou can ask questions anytime in class or via email!"
  },
  {
    "objectID": "part-03/lecture-presentation.html#topics-of-the-tutorials",
    "href": "part-03/lecture-presentation.html#topics-of-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nFunctions: Learn how to define and use functions\nPackages: Learn how to install and use packages\nDataFrames: Learn how to work with tabular data in Julia\nIO: Learn how to read and write data in Julia\nPlots: Learn how to create plots in Julia"
  },
  {
    "objectID": "part-03/lecture-presentation.html#get-started-with-the-tutorials",
    "href": "part-03/lecture-presentation.html#get-started-with-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload this weeks tutorials and start with the first one\nRemember, you can ask questions anytime!\n\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for this lecture!\nThe remaining time we will already start working on the problems of the third lecture."
  },
  {
    "objectID": "part-03/lecture-presentation.html#literature-1",
    "href": "part-03/lecture-presentation.html#literature-1",
    "title": "Lecture III - Packages and Data Management",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.\n\n\n\nLecture III - Packages and Data Management | Dr. Tobias Vlćek | Home"
  },
  {
    "objectID": "part-03/lecture-packages.html",
    "href": "part-03/lecture-packages.html",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Variables are used to store values\nAssign a value to a variable using the = operator\nYou can use different data types for variables\nYou can change the value of a variable\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the typeof function to check the type of a variable.\n\n\n\n\n\n\nVectors and matrices are used to store multiple values\nYou can create a them using the [ and ] operators\nAccess their elements using square brackets\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the push! function to add elements to a vector or the pop! function to remove elements from a vector.\n\n\n\n\n\n\nComparisons are used to compare values\n== checks if two values are equal\n!= checks if two values are not equal\n&lt; checks if one value is smaller than the other\n&gt;= checks if one value is greater than or equal to the other\n&& checks if two values are true\n|| checks if at least one of two values is true\n\n\n\n\n\nLoops are used to repeat code\nfor loop repeats code for a fixed number of times\nwhile loop repeats code until a condition is met\nif statement checks if a condition is true\nelse executes code if a condition is false\nelseif checks if a condition is true and executes if it is\n\n\n\n\n\nScope determines where a variable is defined and lives\nglobal keyword defines a global variable\nlocal keyword defines a local variable\nlet keyword defines a local variable\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nGlobal variables usually make your code much slower, if they are not defined as constants. But for this leeture this is not that important.\n\n\n\n\n\n\nThe tutorials from last week will be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!"
  },
  {
    "objectID": "part-03/lecture-packages.html#variables-and-data-types",
    "href": "part-03/lecture-packages.html#variables-and-data-types",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Variables are used to store values\nAssign a value to a variable using the = operator\nYou can use different data types for variables\nYou can change the value of a variable\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the typeof function to check the type of a variable."
  },
  {
    "objectID": "part-03/lecture-packages.html#vectors-and-matrices",
    "href": "part-03/lecture-packages.html#vectors-and-matrices",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Vectors and matrices are used to store multiple values\nYou can create a them using the [ and ] operators\nAccess their elements using square brackets\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the push! function to add elements to a vector or the pop! function to remove elements from a vector."
  },
  {
    "objectID": "part-03/lecture-packages.html#comparisons-and-logic",
    "href": "part-03/lecture-packages.html#comparisons-and-logic",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Comparisons are used to compare values\n== checks if two values are equal\n!= checks if two values are not equal\n&lt; checks if one value is smaller than the other\n&gt;= checks if one value is greater than or equal to the other\n&& checks if two values are true\n|| checks if at least one of two values is true"
  },
  {
    "objectID": "part-03/lecture-packages.html#loops",
    "href": "part-03/lecture-packages.html#loops",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Loops are used to repeat code\nfor loop repeats code for a fixed number of times\nwhile loop repeats code until a condition is met\nif statement checks if a condition is true\nelse executes code if a condition is false\nelseif checks if a condition is true and executes if it is"
  },
  {
    "objectID": "part-03/lecture-packages.html#scope",
    "href": "part-03/lecture-packages.html#scope",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Scope determines where a variable is defined and lives\nglobal keyword defines a global variable\nlocal keyword defines a local variable\nlet keyword defines a local variable\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nGlobal variables usually make your code much slower, if they are not defined as constants. But for this leeture this is not that important."
  },
  {
    "objectID": "part-03/lecture-packages.html#solutions-from-last-week",
    "href": "part-03/lecture-packages.html#solutions-from-last-week",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "The tutorials from last week will be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!"
  },
  {
    "objectID": "part-03/lecture-packages.html#topics-of-the-tutorials",
    "href": "part-03/lecture-packages.html#topics-of-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nFunctions: Learn how to define and use functions\nPackages: Learn how to install and use packages\nDataFrames: Learn how to work with tabular data in Julia\nIO: Learn how to read and write data in Julia\nPlots: Learn how to create plots in Julia"
  },
  {
    "objectID": "part-03/lecture-packages.html#get-started-with-the-tutorials",
    "href": "part-03/lecture-packages.html#get-started-with-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload this weeks tutorials and start with the first one\nRemember, you can ask questions anytime!\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for this lecture!\nThe remaining time we will already start working on the problems of the third lecture."
  },
  {
    "objectID": "part-03/lecture-packages.html#literature-1",
    "href": "part-03/lecture-packages.html#literature-1",
    "title": "Lecture III - Packages and Data Management",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "general/literature.html",
    "href": "general/literature.html",
    "title": "Literature and Resources",
    "section": "",
    "text": "This section provides a curated list of books and resources to enhance your understanding of mathematical Modelling, Julia programming and related topics. Each recommendation includes a brief description to help you choose the most suitable resources for you.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books",
    "href": "general/literature.html#books",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\n\nThis book is great for beginners and covers Julia programming in a comprehensive manner.\n\nKwon, C. (2019). Julia programming for operations research (Second edition). Changhyun Kwon. Link to the free book website.\n\nThis book is a fantastic ressource for students interested in Julia and Operations Research and covers a variety of topics.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources",
    "href": "general/literature.html#resources",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nJulia Documentation\n\nThe official Julia documentation is an good starting point to understand the language’s features and syntax.\n\nJuMP Documentation\n\nThe official documentation of JuMP is a great resource for understanding optimization modeling in Julia, covering everything from simple linear models to advanced nonlinear and mixed-integer problems.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-1",
    "href": "general/literature.html#books-1",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nWilke, C. (2019). Fundamentals of data visualization: A primer on making informative and compelling figures (First edition). O’Reilly Media.\n\nA book that is highly recommended to understand the principles of data visualization and how to create effective visualizations.\nLink to the free book website\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\nA fantasticbook to understand the principles of software development and how to create effective software.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources-1",
    "href": "general/literature.html#resources-1",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nQuarto\n\nA static website generator that is very powerful and flexible. Used to create the slides and the website for the course.\n\nCursor\n\nA code editor based on VS Code that is very powerful and flexible. It uses AI to help you write code.\n\nJupyter\n\nA web application that allows you to create and share documents that contain code, equations, visualizations and text. It is very popular in the field of data science and academia and also part of Quarto.\n\nAdvent of Code\n\nA wonderful website with daily challenges during the christmas time. Highly recommended to playfully improve your skills.\n\nGithub\n\nThe largest provider for git repositories owned by Microsoft. A lot of open source projects are hosted here and you can read the code.\n\nCodewars\n\nA platform to improve your coding skills by solving challenges. You can compete with others, see how other people solved the challenges and read and learn from the code.\n\nDaily Dose of Data Science\n\nA website and a newsletter with lots of easy-to-digest resources to improve your skills in Data Science.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Applied Optimization with Julia!",
    "section": "",
    "text": "Course Description\nIn this module we will focus on solving practical problems with the help of optimization. To this end, over the course of the semester you will become familiar with a number of optimization problems that have been worked on in the past at the Institute of Logistics, Transportation and Production in cooperation with practice partners. Problems include improving the sustainability of parcel delivery companies, Corona-compliant seat allocations of stadiums and theaters, optimizing districts and locations for police departments, and many more. The module consists of the following two parts: Lectures (2 SWS) and Exercises (1 SWS).\n\n\nLearning Outcomes\nYou can find our specific outcomes in the module handbook. Our broader goal is to introduce you to how diversified the solution of practical problems can be. We want to enable you to independently apply methods and concepts from optimization, and to get a feeling for abstracting and modeling problems. Is our module hard? That’s a subjective question. We would say it is exciting and doable. If you have a basic interest in logical relationships and mathematics, you are in the right place. If you also have basic knowledge of programming or want to get into the subject with help, our module is perfect for you.\nUpon completion of the course, you …\n\ncan implement solutions to complex optimization problems in Julia\nknow advanced concepts of optimization such as linear and nonlinear optimization\nknow basic concepts of programming and algorithms such as loops, functions\nwill be able to read and write code in Julia\nwill have experience working with Julia libraries such as JuMP and HiGHS\nwill know how to collaborate in a small team to find solutions for problems at hand\n\nPlease note that this course is specifically designed for business students. That is, it is not required to have any advanced knowledge or experience in programming to attend this course. The teaching format will make it possible to account for different levels of programming skills such that every student can take the most out of the course.\n\n\nCourse Blocks\nThe core content of the course is organized in three blocks:\n\nPart I: Introduction to Julia and Modelling\nPart II: Applied Optimization with Basic Models\nPart III: Applied Optimization with Advanced Models\n\nYou can find more information on the course blocks and the corresponding lectures in the syllabus.\n\n\nTutorials\nThe tutorials accompany the lectures. In the tutorials, you will apply the concepts from the lectures to realistic data sets. You will work in small groups of 3 participants, in which you can work out solutions together. We will help you during the weekly practice sessions by answering your questions or briefly explaining individual issues in case of difficulties. Afterwards, you have the opportunity to submit your jointly developed solution until the next exercise date in order to earn bonus points for the exam. You can earn up to half a bonus point per exercise, up to 6.0 bonus points in total. Important: the bonus points will only be credited to you if you pass the exam with at least a 4.0. Furthermore, we will not award bonus points for exercises in which you have simply copied the results of another group.\n\n\nHow to see the slides\n\nThis course is based on Quarto\nIt uses revealjs to render the slides\nYou find the slides for each lecture in the corresponding lecture\nTo see the slides, click on RevealJS in the top right side in the lecture\n\n\n\nQuestions\nIf you have any questions regarding the course, please contact me under tobias.vlcek@uni-hamburg.de.\n\n\nContributors\nThanks to Matthes Koch and Justus Bonz, who helped to prepare the lecture materials.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "general/faq.html",
    "href": "general/faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to tobias.vlcek@uni-hamburg.de or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#unanswered-questions",
    "href": "general/faq.html#unanswered-questions",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to tobias.vlcek@uni-hamburg.de or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#contribution-and-mistakes",
    "href": "general/faq.html#contribution-and-mistakes",
    "title": "Frequently Asked Questions",
    "section": "Contribution and Mistakes",
    "text": "Contribution and Mistakes\nIf you have found a mistake in the course material or if you have any suggestion on how to improve the course, please let me know in the following form or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#faqs",
    "href": "general/faq.html#faqs",
    "title": "Frequently Asked Questions",
    "section": "FAQs",
    "text": "FAQs\nSo far, I haven’t received any questions.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/syllabus.html",
    "href": "general/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Julia and to mathematical modelling is provided. Students will learn the Julia syntax, data types, as well as how to implement loops and functions in Julia. We will introduce core Julia libraries, too, including JuMP and DataFrames. Once these concepts are understood, we will learn how they can be used to solve problems.\n\n\n\nWelcome and Introduction (I)\nIntroduction to the course and mathematical modelling\nFirst Steps in Julia (II)\nVectors, matrices, basic operations loops and functions\nPackages and Data Management (III)\nPackage Management, DataFrames, reading and writing data\nModelling with JuMP (IV)\nModeling with JuMP with variables, parameters and constraints",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#introduction-to-julia-and-modelling",
    "href": "general/syllabus.html#introduction-to-julia-and-modelling",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Julia and to mathematical modelling is provided. Students will learn the Julia syntax, data types, as well as how to implement loops and functions in Julia. We will introduce core Julia libraries, too, including JuMP and DataFrames. Once these concepts are understood, we will learn how they can be used to solve problems.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures",
    "href": "general/syllabus.html#lectures",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome and Introduction (I)\nIntroduction to the course and mathematical modelling\nFirst Steps in Julia (II)\nVectors, matrices, basic operations loops and functions\nPackages and Data Management (III)\nPackage Management, DataFrames, reading and writing data\nModelling with JuMP (IV)\nModeling with JuMP with variables, parameters and constraints",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#applied-optimization-with-basic-models",
    "href": "general/syllabus.html#applied-optimization-with-basic-models",
    "title": "Syllabus",
    "section": "Applied Optimization with Basic Models",
    "text": "Applied Optimization with Basic Models\nIn the second part, we will cover applied optimization based on basic modelling concepts. We will start with the classic capacitated lot-sizing problem and learn how to model and solve it using JuMP.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures-1",
    "href": "general/syllabus.html#lectures-1",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nProduction Planning in Breweries (V)\nA case study on beer brewing based on the classic capacitated lot-sizing problem\nMinimizing Split Orders in E-Commerce (VI)\nA case study in E-Commerce based on a quadratic knapsack problem\nPeriodic Library Routing (VII)\nA case study on routing books to branches based on a capacitated vehicle routing problem\nPolice Districting (VIII)\nA case study on police districting based on a facility location problem",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#applied-optimization-with-advanced-models",
    "href": "general/syllabus.html#applied-optimization-with-advanced-models",
    "title": "Syllabus",
    "section": "Applied Optimization with Advanced Models",
    "text": "Applied Optimization with Advanced Models\nIn the third part, we will cover more advanced optimisation models and concepts. We will start by looking into three different applied optimisation problems in crowd safety.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures-2",
    "href": "general/syllabus.html#lectures-2",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nSafety Planning for the Islamic Pilgrimage in Mecca (IX)\nA case study on safety planning for the hajj pilgrimage based on time-dependent network flows\nPassenger Flow Control in Urban Rail (X)\nA case study on passenger flow control in urban rail based on time-dependent network flows\nArena Seat Planning under Distancing Rules (XI)\nA case study on arena seat planning under distancing rules based on the 2-dimensional knapsack problem\nSales Force Deployment for Teams (XII)\nA case study on sales force deployment for teams based on a linear programming model\nRecap and Discussion (XIII)\nWe repeat the concepts from the course and discuss all your remaining questions",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "part-01/lecture-presentation.html#about-me",
    "href": "part-01/lecture-presentation.html#about-me",
    "title": "Lecture I - Welcome and Introduction",
    "section": "About me",
    "text": "About me\n\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: tobias.vlcek@uni-hamburg.de\n\n\n\n\n\n\n\n\nTip\n\n\nI really appreciate active participation and interaction!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#lectures",
    "href": "part-01/lecture-presentation.html#lectures",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Lectures",
    "text": "Lectures\n\nEvery Tuesday between 10.15 AM and 11.45 AM\nFirst four lectures repeat modelling and programming\nLater lectures discuss practical problems and implementation\nLectures are interactive → We discuss approaches!\nCommunication takes place via OpenOlat and E-Mail"
  },
  {
    "objectID": "part-01/lecture-presentation.html#tutorials",
    "href": "part-01/lecture-presentation.html#tutorials",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Tutorials",
    "text": "Tutorials\n\nTutorials every Friday between 8.15 AM and 9.45 AM\nIn these tutorials we are working on assignments\nPlease bring a laptop with Windows, macOS, or Linux!\nThis Friday there is no tutorial!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#assignments",
    "href": "part-01/lecture-presentation.html#assignments",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Assignments",
    "text": "Assignments\n\nBased on applied problems of the lecture\nUp to 3 students can solve assignments together\nSubmitted solutions earn bonus points for the exam\nMax. 0.5 point per tutorial\n\n\n\n\n\n\n\n\nNote\n\n\nBonus points only count if the mark is at least 4.0!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#applied-optimization",
    "href": "part-01/lecture-presentation.html#applied-optimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Applied Optimization",
    "text": "Applied Optimization\n\nReal-world problems can be addressed with models\nOur objective is to foster your interest in the topic\nEnable you to recognize and solve problem structures\nIncludes problem understanding and implementation"
  },
  {
    "objectID": "part-01/lecture-presentation.html#research-in-operations-research",
    "href": "part-01/lecture-presentation.html#research-in-operations-research",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Research in Operations Research",
    "text": "Research in Operations Research\n\nPart of the University of Hamburg Business School\nAiming to solve real-world problems\nOr improving our theoretical understanding\nPublication in journals and conferences\n\n\n\n\n\n\n\n\nNote\n\n\nWe are also happy to supervise Bachelor and Master theses!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#national-and-international-journals",
    "href": "part-01/lecture-presentation.html#national-and-international-journals",
    "title": "Lecture I - Welcome and Introduction",
    "section": "National and international journals",
    "text": "National and international journals\n\nEuropean Journal of OR\nJournal of the Operational Research Society\nJournal on Applied Analytics\nManagement Science\nOperations Research\nOR Spectrum"
  },
  {
    "objectID": "part-01/lecture-presentation.html#brewery-production-planning",
    "href": "part-01/lecture-presentation.html#brewery-production-planning",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Brewery Production Planning",
    "text": "Brewery Production Planning\n\nMickein, Koch, and Haase (2022)"
  },
  {
    "objectID": "part-01/lecture-presentation.html#police-service-district-planning",
    "href": "part-01/lecture-presentation.html#police-service-district-planning",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Police Service District Planning",
    "text": "Police Service District Planning\n\nVlćek, Haase, Fliedner, et al. (2024)"
  },
  {
    "objectID": "part-01/lecture-presentation.html#venue-seating-under-covid-19",
    "href": "part-01/lecture-presentation.html#venue-seating-under-covid-19",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Venue Seating under COVID-19",
    "text": "Venue Seating under COVID-19\n\nUsama Dkaidik and Matthes Koch; Current research with a likely paper submission in 2024"
  },
  {
    "objectID": "part-01/lecture-presentation.html#metro-inflow-management",
    "href": "part-01/lecture-presentation.html#metro-inflow-management",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Metro Inflow Management",
    "text": "Metro Inflow Management\n\nVlćek, Haase, Koch, et al. (2024)"
  },
  {
    "objectID": "part-01/lecture-presentation.html#split-order-minimization",
    "href": "part-01/lecture-presentation.html#split-order-minimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Split-Order Minimization",
    "text": "Split-Order Minimization\n\nVlćek and Voigt (2024)"
  },
  {
    "objectID": "part-01/lecture-presentation.html#crowd-management",
    "href": "part-01/lecture-presentation.html#crowd-management",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Crowd Management",
    "text": "Crowd Management\n\nHaase et al. (2016)"
  },
  {
    "objectID": "part-01/lecture-presentation.html#part-i",
    "href": "part-01/lecture-presentation.html#part-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part I",
    "text": "Part I\n\nWelcome and Introduction\nFirst Steps in Julia\nPackages and Data Management\nModelling with JuMP"
  },
  {
    "objectID": "part-01/lecture-presentation.html#part-ii",
    "href": "part-01/lecture-presentation.html#part-ii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part II",
    "text": "Part II\n\nBeer Production Planning\nMinimizing Split Orders in E-Commerce\nPeriodic Library Routing\nPolice Districting"
  },
  {
    "objectID": "part-01/lecture-presentation.html#part-iii",
    "href": "part-01/lecture-presentation.html#part-iii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part III",
    "text": "Part III\n\nSafety Planning for the Islamic Pilgrimage in Mecca\nPassenger Flow Control in Urban Rail\nArena Seat Planning under Distancing Rules\nSales Force Deployment for Teams\nRecap and Discussion"
  },
  {
    "objectID": "part-01/lecture-presentation.html#choice-of-programming-language",
    "href": "part-01/lecture-presentation.html#choice-of-programming-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Choice of Programming Language",
    "text": "Choice of Programming Language\n\n\nQuestion: Have you ever heard of Julia?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#why-julia",
    "href": "part-01/lecture-presentation.html#why-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Why Julia?",
    "text": "Why Julia?\n\nDesigned to be:\n\nas general as Python\nas statistics-friendly as R\nas fast as C++!\n\n\n\n\n\n\n\n\n\nTip\n\n\nAllows for fast data workflows, particularly in scientific computing!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#syntax",
    "href": "part-01/lecture-presentation.html#syntax",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Syntax",
    "text": "Syntax\n\nDynamically-typed syntax just like Python\nSimilar to R, Matlab and Python - not like C++\nIn comparison, accessible and easy to learn!\nNo need to worry about memory management!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#jump",
    "href": "part-01/lecture-presentation.html#jump",
    "title": "Lecture I - Welcome and Introduction",
    "section": "JuMP",
    "text": "JuMP\n\nPackage for algebraic modeling in Julia\nSimplifies solving complex optimization problems\nProvides a high-level, user-friendly interface\nUseful for operations research and data science\n\n\n\n\n\n\n\n\nTip\n\n\nJuMP is an alternative to Pyomo, GAMS, and AMPL!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#must-it-be-a-new-language",
    "href": "part-01/lecture-presentation.html#must-it-be-a-new-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Must it be a new language?",
    "text": "Must it be a new language?\n\nYes, but no need to worry!\nJulia is quite similar to Python and R\nWe will learn the syntax together in the first part\nIt is helpful to switch languages from time to time"
  },
  {
    "objectID": "part-01/lecture-presentation.html#section",
    "href": "part-01/lecture-presentation.html#section",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nexperience with\nalgebraic modeling?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-is-algebraic-modeling",
    "href": "part-01/lecture-presentation.html#what-is-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is algebraic modeling?",
    "text": "What is algebraic modeling?\n\nA “mathematical language” for optimization problems\nAllows for describing complex systems and constraints\nBased on linear algebra (Equations and Inequalities)"
  },
  {
    "objectID": "part-01/lecture-presentation.html#how-to-learn-algebraic-modeling",
    "href": "part-01/lecture-presentation.html#how-to-learn-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to learn algebraic modeling?",
    "text": "How to learn algebraic modeling?\n\nPractice, practice, and practice!\nUnderstand standard models and their approach\nDevelop an understanding of constraints\nUnderstand the structure of a models solution space\nUse an available algorithms to determine solutions"
  },
  {
    "objectID": "part-01/lecture-presentation.html#central-questions",
    "href": "part-01/lecture-presentation.html#central-questions",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Central Questions",
    "text": "Central Questions\n\nWhat is to be decided?\nWhat is relevant to the decision?\nWhat information is given and relevant?\nWhat parameters (data) are needed?\nWhich variables and of which type are needed?\n\n\n\n\n\n\n\n\nTip\n\n\nModeling is a creative process!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#model-components",
    "href": "part-01/lecture-presentation.html#model-components",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Model Components",
    "text": "Model Components\n\nObjective function\nConstraints\nVariables\n\n\n\n\n\n\n\n\nNote\n\n\nWe will go through these components step by step in each lecture!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#linear-optimization-model",
    "href": "part-01/lecture-presentation.html#linear-optimization-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Linear Optimization Model",
    "text": "Linear Optimization Model\n\n\nBasic Model Formulation\n\\[\n\\begin{aligned}\n&\\text{maximize} \\quad F = \\sum_{j\\in \\mathcal{J}} c_j \\times X_j\n\\end{aligned}\n\\]\nsubject to\n\\[\n\\begin{aligned}\n&\\sum_{j\\in \\mathcal{J}} a_{i,j} \\times X_j  \\le b_i && \\forall i \\in \\mathcal{I} \\\\\n&X_j \\ge 0 &&  \\forall  j \\in \\mathcal{J}\n\\end{aligned}\n\\]\n\nModel Components\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{set of $i \\in \\mathcal{I}$,}\\\\\n\\mathcal{J} &: \\text{set of $j \\in \\mathcal{J}$,}\\\\\nF   &: \\text{Objective function variable,}\\\\\nX_{j}   &: \\text{decision variables,}\\\\\nc_{j}   &: \\text{objective function coefficients,}\\\\\na_{i,j} &: \\text{parameters,}\\\\\nb_{i}   &: \\text{parameters}\n\\end{aligned}\n\\]\n\n\nQuestion: Have you ever seen something like this before?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-is-this-good-for",
    "href": "part-01/lecture-presentation.html#what-is-this-good-for",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is this good for?",
    "text": "What is this good for?\n\nGood Question! A lot of things:\n\nModeling real-world problems\nSolving complex systems\nOptimizing resource allocation\nDecision-making under constraints\nSimulation and prediction"
  },
  {
    "objectID": "part-01/lecture-presentation.html#case-solar-panel-transport",
    "href": "part-01/lecture-presentation.html#case-solar-panel-transport",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Case: Solar Panel Transport",
    "text": "Case: Solar Panel Transport"
  },
  {
    "objectID": "part-01/lecture-presentation.html#description",
    "href": "part-01/lecture-presentation.html#description",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nA company is producing solar panels in Dresden and Laupheim and has to transport them to new solar farms near Hamburg, Munich, and Berlin. The quantities offered and demanded (truckloads) and the transport costs per truckload in Euro are summarized in the following table."
  },
  {
    "objectID": "part-01/lecture-presentation.html#transport-costs",
    "href": "part-01/lecture-presentation.html#transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Costs",
    "text": "Transport Costs\n\n\n\nOrigin/Destination\nHamburg\nMunich\nBerlin\nAvailable\n\n\n\n\nDresden\n5010\n4640\n1980\n34\n\n\nLaupheim\n7120\n1710\n6430\n41\n\n\nDemand\n21\n17\n29\n\n\n\n\nExample: A truckload from Dresden \\(i=1\\) to Munich \\(j=2\\) costs \\(c_{12}=4640\\) Euro. Moreover, it is necessary to fulfil all customer demands, as the contract has been signed."
  },
  {
    "objectID": "part-01/lecture-presentation.html#graphical-illustration",
    "href": "part-01/lecture-presentation.html#graphical-illustration",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Graphical Illustration",
    "text": "Graphical Illustration"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-are-we-trying",
    "href": "part-01/lecture-presentation.html#what-are-we-trying",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What are we trying?",
    "text": "What are we trying?\nFirst, we always need to understand the objectives.\n\nQuestion: What are our possible objectives?\nMinimizing the transport costs over all truckloads while meeting the demand based on the available solar panels adhering to the available panels."
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-1",
    "href": "part-01/lecture-presentation.html#section-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Let’s break it down\nstep by step!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#sets",
    "href": "part-01/lecture-presentation.html#sets",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Sets",
    "text": "Sets\nRemember, sets are collections of elements\n\nQuestion: What sets are needed?\n\n\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{Set of production sites, indexed by } i \\text{ with } i \\in \\{1, \\ldots, |\\mathcal{I}|\\}, \\\\\n\\mathcal{J} &: \\text{Set of customers, indexed by } j \\text{ with } j \\in \\{1, \\ldots, |\\mathcal{J}|\\}.\n\\end{aligned}\n\\]\n\n\n\n\n\n\n\n\nTip\n\n\nWe often use plural names for sets and a caligraphic letter, e.g., \\(\\mathcal{I}\\) and \\(\\mathcal{J}\\)."
  },
  {
    "objectID": "part-01/lecture-presentation.html#parameters",
    "href": "part-01/lecture-presentation.html#parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Parameters",
    "text": "Parameters\nParameters are fixed values that are given.\n\nQuestion: What parameters are needed?\n\n\n\\[\n\\begin{aligned}\nc_{i,j} &: \\text{Costs per truck load for transport from } i \\text{ to } j, \\\\\na_i &: \\text{Available truck loads at } i, \\\\\nb_j &: \\text{Customer demands at } j.\n\\end{aligned}\n\\]\n\n\n\n\n\n\n\n\nTip\n\n\nWe usually use the corresponding lower-case letter, e.g., \\(c\\), \\(a\\), and \\(b\\)."
  },
  {
    "objectID": "part-01/lecture-presentation.html#decision-variable",
    "href": "part-01/lecture-presentation.html#decision-variable",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Decision Variable",
    "text": "Decision Variable\n\nDecision variables are the values we are trying to find\nHere, our objective is to minimize the transport costs\n\n\nQuestion: What decision variables are needed?\n\n\n\\[\nX_{i,j} \\text{Trucks that deliver panels from site } i \\text{ to customer } j.\n\\]\n\n\n\n\n\n\n\n\nTip\n\n\nWe use upper-case letters to distinguish variables from parameters, e.g., \\(X\\)."
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-2",
    "href": "part-01/lecture-presentation.html#section-2",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "These are our\nbuilding blocks!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#objective-function",
    "href": "part-01/lecture-presentation.html#objective-function",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Objective Function",
    "text": "Objective Function\n\nThe objective function is the value we are trying to minimize\nFormalized as a sum of decision variables and parameters\n\n\nQuestion: Do you remember the objective?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#minimizing-the-transport-costs",
    "href": "part-01/lecture-presentation.html#minimizing-the-transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Minimizing the Transport Costs",
    "text": "Minimizing the Transport Costs\nMinimize the transport costs over all truckloads while meeting the demand based on the available solar panels adhering to the available panels.\n\nQuestion: How can we write this down?\n\n\n\\[\n\\text{Minimize} \\quad \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{i,j}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#constraints",
    "href": "part-01/lecture-presentation.html#constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Constraints",
    "text": "Constraints\n\nConstraints are conditions that must be met\nThey limit the solution space!\n\nQuestion: Objective value without any constraints?\n\n\nThe value is zero\nWe can transport any number of panels\n\n\n\nQuestion: What constraints are needed?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#supply-constraints",
    "href": "part-01/lecture-presentation.html#supply-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Supply Constraints",
    "text": "Supply Constraints\nEnsure that the number of panels transported from a location does not exceed the available panels.\n\nQuestion: How can we formalize this?\n\n\n\\[\n\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad \\forall i \\in \\mathcal{I}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#demand-constraints",
    "href": "part-01/lecture-presentation.html#demand-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Demand Constraints",
    "text": "Demand Constraints\nEnsure that the demand of each customer is covered.\n\nQuestion: Any ideas?\n\n\n\\[\n\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad \\forall j \\in \\mathcal{J}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#non-negativity-constraints",
    "href": "part-01/lecture-presentation.html#non-negativity-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Non-negativity Constraints",
    "text": "Non-negativity Constraints\nEnsure no negative number of truckloads are transported.\n\nQuestion: Has anyone an idea how to write this down?\n\n\n\\[\nX_{i,j} \\geq 0 \\quad \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#transport-problem",
    "href": "part-01/lecture-presentation.html#transport-problem",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Problem",
    "text": "Transport Problem\nThe complete model can then be written as:\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{ij} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#inequality-constraints",
    "href": "part-01/lecture-presentation.html#inequality-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Inequality Constraints",
    "text": "Inequality Constraints\nQuestion: Could we replace \\(=\\) by \\(\\geq\\) in the demand constraint?\n\n\nYes, we could!\nWe could deliver more than the demand\nBut this would not happen here\n\n\n\nQuestion: Why won’t we transport more than the demand?\n\nDue to the associated costs"
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-3",
    "href": "part-01/lecture-presentation.html#section-3",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Any\nquestions?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#description-1",
    "href": "part-01/lecture-presentation.html#description-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nUnfortunately, the margins on solar panels are low. After the previous contract has been fulfilled, the company produced the same number of panels as before. In addition, all three customers want to order the same number of truckloads with solar panels again. The sales volume per truckload of panels is 11,000 Euros. The complete production of a truckload of solar panels, including materials, costs 6,300 Euros."
  },
  {
    "objectID": "part-01/lecture-presentation.html#new-objective",
    "href": "part-01/lecture-presentation.html#new-objective",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Objective",
    "text": "New Objective\nIn the new contract, the company wants to maximize its profits while the demand does not have to be fulfilled.\n\nQuestion: What changes are necessary?\n\n\n\nWe need to change the objective function\nWe need to change some parameters\n\n\n\nQuestion: Does our decision variable change?\n\n\n\nNo, we still transport truckloads of solar panels"
  },
  {
    "objectID": "part-01/lecture-presentation.html#new-parameters",
    "href": "part-01/lecture-presentation.html#new-parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Parameters",
    "text": "New Parameters\n\\[\n\\begin{aligned}\np &: \\text{Sales volume per truckload of solar panels,} \\\\\nc &: \\text{Production costs per truckload of solar panels.}\n\\end{aligned}\n\\]\n\nQuestion: What is the profit per truckload of solar panels?\n\n\n\\[\np - c\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#former-model",
    "href": "part-01/lecture-presentation.html#former-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Former Model",
    "text": "Former Model\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\geq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#new-model",
    "href": "part-01/lecture-presentation.html#new-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Model",
    "text": "New Model\n\\[\n\\begin{aligned}\n\\text{Maximize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} (p-c-c_{i,j}) \\times X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\leq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-4",
    "href": "part-01/lecture-presentation.html#section-4",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nany questions?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#download-and-install-julia",
    "href": "part-01/lecture-presentation.html#download-and-install-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Download and Install Julia",
    "text": "Download and Install Julia\n\nTo prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia."
  },
  {
    "objectID": "part-01/lecture-presentation.html#installating-julia",
    "href": "part-01/lecture-presentation.html#installating-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installating Julia",
    "text": "Installating Julia\n\n\nHead to julialang.org and follow the instructions.\n\n\n\n\n\n\n\nTip\n\n\nIf you are ever asked to add something to your “PATH”, do so!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#vs-code",
    "href": "part-01/lecture-presentation.html#vs-code",
    "title": "Lecture I - Welcome and Introduction",
    "section": "VS Code",
    "text": "VS Code\n\n\nNext, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS"
  },
  {
    "objectID": "part-01/lecture-presentation.html#installing-vs-code",
    "href": "part-01/lecture-presentation.html#installing-vs-code",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installing VS Code",
    "text": "Installing VS Code\n\nHead to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release"
  },
  {
    "objectID": "part-01/lecture-presentation.html#verify-the-installation",
    "href": "part-01/lecture-presentation.html#verify-the-installation",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Verify the Installation",
    "text": "Verify the Installation\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”"
  },
  {
    "objectID": "part-01/lecture-presentation.html#create-a-new-file",
    "href": "part-01/lecture-presentation.html#create-a-new-file",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Create a new file",
    "text": "Create a new file\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\n\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”"
  },
  {
    "objectID": "part-01/lecture-presentation.html#everything-working",
    "href": "part-01/lecture-presentation.html#everything-working",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Everything working?",
    "text": "Everything working?\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nTip\n\n\nDon’t worry if it is not running right away. We will fix this together!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#how-to-get-started",
    "href": "part-01/lecture-presentation.html#how-to-get-started",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to get started?",
    "text": "How to get started?\n\nLearning a new programming language is a daunting task\nIt is best to start with some small, interactive problems\nThen, slowly increase the scope of the tasks\nWe will do this together in class!\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for todays lecture!\nWe now have covered a first introduction and are ready to start solving some problems in the upcoming lectures."
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-5",
    "href": "part-01/lecture-presentation.html#section-5",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#literature-i",
    "href": "part-01/lecture-presentation.html#literature-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "part-01/lecture-presentation.html#literature-ii",
    "href": "part-01/lecture-presentation.html#literature-ii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Literature II",
    "text": "Literature II\n\n\n\nLecture I - Welcome and Introduction | Dr. Tobias Vlćek | Home\n\n\n\n\nHaase, Knut, Habib Zain Al Abideen, Salim Al-Bosta, Mathias Kasper, Matthes Koch, Sven Müller, and Dirk Helbing. 2016. “Improving Pilgrim Safety During the Hajj: An Analytical and Operational Research Approach.” Interfaces 46 (1): 74–90.\n\n\nMickein, Markus, Matthes Koch, and Knut Haase. 2022. “A Decision Support System for Brewery Production Planning at Feldschlösschen.” INFORMS Journal on Applied Analytics 52 (2): 158–72.\n\n\nVlćek, Tobias, Knut Haase, Malte Fliedner, and Tobias Cors. 2024. “Police Service District Planning.” OR Spectrum, February. https://doi.org/10.1007/s00291-024-00745-3.\n\n\nVlćek, Tobias, Knut Haase, Matthes Koch, Lena Dolz, Anneke Weygandt, and Jan Pape. 2024. “Controlling Passenger Flows into Metro Systems to Mitigate Overcrowding During Large-Scale Events.” Submitted to Transportation Science.\n\n\nVlćek, Tobias, and Guido Voigt. 2024. “Optimizing SKU-Warehouse Allocations to Minimize Split Parcels in E-Commerce Environments.” Submitted to Decision Sciences."
  },
  {
    "objectID": "part-01/lecture-introduction.html",
    "href": "part-01/lecture-introduction.html",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Field: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: tobias.vlcek@uni-hamburg.de\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI really appreciate active participation and interaction!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#about-me",
    "href": "part-01/lecture-introduction.html#about-me",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Field: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: tobias.vlcek@uni-hamburg.de\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI really appreciate active participation and interaction!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#lectures",
    "href": "part-01/lecture-introduction.html#lectures",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Lectures",
    "text": "Lectures\n\nEvery Tuesday between 10.15 AM and 11.45 AM\nFirst four lectures repeat modelling and programming\nLater lectures discuss practical problems and implementation\nLectures are interactive → We discuss approaches!\nCommunication takes place via OpenOlat and E-Mail",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#tutorials",
    "href": "part-01/lecture-introduction.html#tutorials",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Tutorials",
    "text": "Tutorials\n\nTutorials every Friday between 8.15 AM and 9.45 AM\nIn these tutorials we are working on assignments\nPlease bring a laptop with Windows, macOS, or Linux!\nThis Friday there is no tutorial!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#assignments",
    "href": "part-01/lecture-introduction.html#assignments",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Assignments",
    "text": "Assignments\n\nBased on applied problems of the lecture\nUp to 3 students can solve assignments together\nSubmitted solutions earn bonus points for the exam\nMax. 0.5 point per tutorial\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nBonus points only count if the mark is at least 4.0!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#applied-optimization",
    "href": "part-01/lecture-introduction.html#applied-optimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Applied Optimization",
    "text": "Applied Optimization\n\nReal-world problems can be addressed with models\nOur objective is to foster your interest in the topic\nEnable you to recognize and solve problem structures\nIncludes problem understanding and implementation",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#research-in-operations-research",
    "href": "part-01/lecture-introduction.html#research-in-operations-research",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Research in Operations Research",
    "text": "Research in Operations Research\n\nPart of the University of Hamburg Business School\nAiming to solve real-world problems\nOr improving our theoretical understanding\nPublication in journals and conferences\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nWe are also happy to supervise Bachelor and Master theses!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#national-and-international-journals",
    "href": "part-01/lecture-introduction.html#national-and-international-journals",
    "title": "Lecture I - Welcome and Introduction",
    "section": "National and international journals",
    "text": "National and international journals\n\nEuropean Journal of OR\nJournal of the Operational Research Society\nJournal on Applied Analytics\nManagement Science\nOperations Research\nOR Spectrum",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#brewery-production-planning",
    "href": "part-01/lecture-introduction.html#brewery-production-planning",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Brewery Production Planning",
    "text": "Brewery Production Planning\n\nMickein, Koch, and Haase (2022)",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#police-service-district-planning",
    "href": "part-01/lecture-introduction.html#police-service-district-planning",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Police Service District Planning",
    "text": "Police Service District Planning\n\nVlćek, Haase, Fliedner, et al. (2024)",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#venue-seating-under-covid-19",
    "href": "part-01/lecture-introduction.html#venue-seating-under-covid-19",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Venue Seating under COVID-19",
    "text": "Venue Seating under COVID-19\n\nUsama Dkaidik and Matthes Koch; Current research with a likely paper submission in 2024",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#metro-inflow-management",
    "href": "part-01/lecture-introduction.html#metro-inflow-management",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Metro Inflow Management",
    "text": "Metro Inflow Management\n\nVlćek, Haase, Koch, et al. (2024)",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#split-order-minimization",
    "href": "part-01/lecture-introduction.html#split-order-minimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Split-Order Minimization",
    "text": "Split-Order Minimization\n\nVlćek and Voigt (2024)",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#crowd-management",
    "href": "part-01/lecture-introduction.html#crowd-management",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Crowd Management",
    "text": "Crowd Management\n\nHaase et al. (2016)",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#part-i",
    "href": "part-01/lecture-introduction.html#part-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part I",
    "text": "Part I\n\nWelcome and Introduction\nFirst Steps in Julia\nPackages and Data Management\nModelling with JuMP",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#part-ii",
    "href": "part-01/lecture-introduction.html#part-ii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part II",
    "text": "Part II\n\nBeer Production Planning\nMinimizing Split Orders in E-Commerce\nPeriodic Library Routing\nPolice Districting",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#part-iii",
    "href": "part-01/lecture-introduction.html#part-iii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part III",
    "text": "Part III\n\nSafety Planning for the Islamic Pilgrimage in Mecca\nPassenger Flow Control in Urban Rail\nArena Seat Planning under Distancing Rules\nSales Force Deployment for Teams\nRecap and Discussion",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#choice-of-programming-language",
    "href": "part-01/lecture-introduction.html#choice-of-programming-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Choice of Programming Language",
    "text": "Choice of Programming Language\n\n. . .\nQuestion: Have you ever heard of Julia?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#why-julia",
    "href": "part-01/lecture-introduction.html#why-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Why Julia?",
    "text": "Why Julia?\n\nDesigned to be:\n\nas general as Python\nas statistics-friendly as R\nas fast as C++!\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nAllows for fast data workflows, particularly in scientific computing!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#syntax",
    "href": "part-01/lecture-introduction.html#syntax",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Syntax",
    "text": "Syntax\n\nDynamically-typed syntax just like Python\nSimilar to R, Matlab and Python - not like C++\nIn comparison, accessible and easy to learn!\nNo need to worry about memory management!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#jump",
    "href": "part-01/lecture-introduction.html#jump",
    "title": "Lecture I - Welcome and Introduction",
    "section": "JuMP",
    "text": "JuMP\n\nPackage for algebraic modeling in Julia\nSimplifies solving complex optimization problems\nProvides a high-level, user-friendly interface\nUseful for operations research and data science\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nJuMP is an alternative to Pyomo, GAMS, and AMPL!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#must-it-be-a-new-language",
    "href": "part-01/lecture-introduction.html#must-it-be-a-new-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Must it be a new language?",
    "text": "Must it be a new language?\n\nYes, but no need to worry!\nJulia is quite similar to Python and R\nWe will learn the syntax together in the first part\nIt is helpful to switch languages from time to time",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section",
    "href": "part-01/lecture-introduction.html#section",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nexperience with\nalgebraic modeling?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-is-algebraic-modeling",
    "href": "part-01/lecture-introduction.html#what-is-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is algebraic modeling?",
    "text": "What is algebraic modeling?\n\nA “mathematical language” for optimization problems\nAllows for describing complex systems and constraints\nBased on linear algebra (Equations and Inequalities)\n\n. . .",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#how-to-learn-algebraic-modeling",
    "href": "part-01/lecture-introduction.html#how-to-learn-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to learn algebraic modeling?",
    "text": "How to learn algebraic modeling?\n\nPractice, practice, and practice!\nUnderstand standard models and their approach\nDevelop an understanding of constraints\nUnderstand the structure of a models solution space\nUse an available algorithms to determine solutions",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#central-questions",
    "href": "part-01/lecture-introduction.html#central-questions",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Central Questions",
    "text": "Central Questions\n\nWhat is to be decided?\nWhat is relevant to the decision?\nWhat information is given and relevant?\nWhat parameters (data) are needed?\nWhich variables and of which type are needed?\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nModeling is a creative process!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#model-components",
    "href": "part-01/lecture-introduction.html#model-components",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Model Components",
    "text": "Model Components\n\nObjective function\nConstraints\nVariables\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nWe will go through these components step by step in each lecture!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#linear-optimization-model",
    "href": "part-01/lecture-introduction.html#linear-optimization-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Linear Optimization Model",
    "text": "Linear Optimization Model\n\n\n\nBasic Model Formulation\n\\[\n\\begin{aligned}\n&\\text{maximize} \\quad F = \\sum_{j\\in \\mathcal{J}} c_j \\times X_j\n\\end{aligned}\n\\]\nsubject to\n\\[\n\\begin{aligned}\n&\\sum_{j\\in \\mathcal{J}} a_{i,j} \\times X_j  \\le b_i && \\forall i \\in \\mathcal{I} \\\\\n&X_j \\ge 0 &&  \\forall  j \\in \\mathcal{J}\n\\end{aligned}\n\\]\n\n\n\nModel Components\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{set of $i \\in \\mathcal{I}$,}\\\\\n\\mathcal{J} &: \\text{set of $j \\in \\mathcal{J}$,}\\\\\nF   &: \\text{Objective function variable,}\\\\\nX_{j}   &: \\text{decision variables,}\\\\\nc_{j}   &: \\text{objective function coefficients,}\\\\\na_{i,j} &: \\text{parameters,}\\\\\nb_{i}   &: \\text{parameters}\n\\end{aligned}\n\\]\n\n\n\n. . .\nQuestion: Have you ever seen something like this before?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-is-this-good-for",
    "href": "part-01/lecture-introduction.html#what-is-this-good-for",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is this good for?",
    "text": "What is this good for?\n\nGood Question! A lot of things:\n\nModeling real-world problems\nSolving complex systems\nOptimizing resource allocation\nDecision-making under constraints\nSimulation and prediction",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#case-solar-panel-transport",
    "href": "part-01/lecture-introduction.html#case-solar-panel-transport",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Case: Solar Panel Transport",
    "text": "Case: Solar Panel Transport",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#description",
    "href": "part-01/lecture-introduction.html#description",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nA company is producing solar panels in Dresden and Laupheim and has to transport them to new solar farms near Hamburg, Munich, and Berlin. The quantities offered and demanded (truckloads) and the transport costs per truckload in Euro are summarized in the following table.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#transport-costs",
    "href": "part-01/lecture-introduction.html#transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Costs",
    "text": "Transport Costs\n\n\n\nOrigin/Destination\nHamburg\nMunich\nBerlin\nAvailable\n\n\n\n\nDresden\n5010\n4640\n1980\n34\n\n\nLaupheim\n7120\n1710\n6430\n41\n\n\nDemand\n21\n17\n29\n\n\n\n\nExample: A truckload from Dresden \\(i=1\\) to Munich \\(j=2\\) costs \\(c_{12}=4640\\) Euro. Moreover, it is necessary to fulfil all customer demands, as the contract has been signed.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#graphical-illustration",
    "href": "part-01/lecture-introduction.html#graphical-illustration",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Graphical Illustration",
    "text": "Graphical Illustration",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-are-we-trying",
    "href": "part-01/lecture-introduction.html#what-are-we-trying",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What are we trying?",
    "text": "What are we trying?\nFirst, we always need to understand the objectives.\n. . .\nQuestion: What are our possible objectives?\nMinimizing the transport costs over all truckloads while meeting the demand based on the available solar panels adhering to the available panels.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section-1",
    "href": "part-01/lecture-introduction.html#section-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Let’s break it down\nstep by step!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#sets",
    "href": "part-01/lecture-introduction.html#sets",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Sets",
    "text": "Sets\nRemember, sets are collections of elements\n. . .\nQuestion: What sets are needed?\n. . .\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{Set of production sites, indexed by } i \\text{ with } i \\in \\{1, \\ldots, |\\mathcal{I}|\\}, \\\\\n\\mathcal{J} &: \\text{Set of customers, indexed by } j \\text{ with } j \\in \\{1, \\ldots, |\\mathcal{J}|\\}.\n\\end{aligned}\n\\]\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe often use plural names for sets and a caligraphic letter, e.g., \\(\\mathcal{I}\\) and \\(\\mathcal{J}\\).",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#parameters",
    "href": "part-01/lecture-introduction.html#parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Parameters",
    "text": "Parameters\nParameters are fixed values that are given.\n. . .\nQuestion: What parameters are needed?\n. . .\n\\[\n\\begin{aligned}\nc_{i,j} &: \\text{Costs per truck load for transport from } i \\text{ to } j, \\\\\na_i &: \\text{Available truck loads at } i, \\\\\nb_j &: \\text{Customer demands at } j.\n\\end{aligned}\n\\]\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe usually use the corresponding lower-case letter, e.g., \\(c\\), \\(a\\), and \\(b\\).",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#decision-variable",
    "href": "part-01/lecture-introduction.html#decision-variable",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Decision Variable",
    "text": "Decision Variable\n\nDecision variables are the values we are trying to find\nHere, our objective is to minimize the transport costs\n\n. . .\nQuestion: What decision variables are needed?\n. . .\n\\[\nX_{i,j} \\text{Trucks that deliver panels from site } i \\text{ to customer } j.\n\\]\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe use upper-case letters to distinguish variables from parameters, e.g., \\(X\\).",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section-2",
    "href": "part-01/lecture-introduction.html#section-2",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "These are our\nbuilding blocks!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#objective-function",
    "href": "part-01/lecture-introduction.html#objective-function",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Objective Function",
    "text": "Objective Function\n\nThe objective function is the value we are trying to minimize\nFormalized as a sum of decision variables and parameters\n\n. . .\nQuestion: Do you remember the objective?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#minimizing-the-transport-costs",
    "href": "part-01/lecture-introduction.html#minimizing-the-transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Minimizing the Transport Costs",
    "text": "Minimizing the Transport Costs\nMinimize the transport costs over all truckloads while meeting the demand based on the available solar panels adhering to the available panels.\n. . .\nQuestion: How can we write this down?\n. . .\n\\[\n\\text{Minimize} \\quad \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{i,j}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#constraints",
    "href": "part-01/lecture-introduction.html#constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Constraints",
    "text": "Constraints\n\nConstraints are conditions that must be met\nThey limit the solution space!\n\nQuestion: Objective value without any constraints?\n. . .\n\nThe value is zero\nWe can transport any number of panels\n\n. . .\nQuestion: What constraints are needed?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#supply-constraints",
    "href": "part-01/lecture-introduction.html#supply-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Supply Constraints",
    "text": "Supply Constraints\nEnsure that the number of panels transported from a location does not exceed the available panels.\n. . .\nQuestion: How can we formalize this?\n. . .\n\\[\n\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad \\forall i \\in \\mathcal{I}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#demand-constraints",
    "href": "part-01/lecture-introduction.html#demand-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Demand Constraints",
    "text": "Demand Constraints\nEnsure that the demand of each customer is covered.\n. . .\nQuestion: Any ideas?\n. . .\n\\[\n\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad \\forall j \\in \\mathcal{J}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#non-negativity-constraints",
    "href": "part-01/lecture-introduction.html#non-negativity-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Non-negativity Constraints",
    "text": "Non-negativity Constraints\nEnsure no negative number of truckloads are transported.\n. . .\nQuestion: Has anyone an idea how to write this down?\n. . .\n\\[\nX_{i,j} \\geq 0 \\quad \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#transport-problem",
    "href": "part-01/lecture-introduction.html#transport-problem",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Problem",
    "text": "Transport Problem\nThe complete model can then be written as:\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{ij} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#inequality-constraints",
    "href": "part-01/lecture-introduction.html#inequality-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Inequality Constraints",
    "text": "Inequality Constraints\nQuestion: Could we replace \\(=\\) by \\(\\geq\\) in the demand constraint?\n. . .\n\nYes, we could!\nWe could deliver more than the demand\nBut this would not happen here\n\n. . .\nQuestion: Why won’t we transport more than the demand?\n\nDue to the associated costs",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section-3",
    "href": "part-01/lecture-introduction.html#section-3",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Any\nquestions?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#description-1",
    "href": "part-01/lecture-introduction.html#description-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nUnfortunately, the margins on solar panels are low. After the previous contract has been fulfilled, the company produced the same number of panels as before. In addition, all three customers want to order the same number of truckloads with solar panels again. The sales volume per truckload of panels is 11,000 Euros. The complete production of a truckload of solar panels, including materials, costs 6,300 Euros.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#new-objective",
    "href": "part-01/lecture-introduction.html#new-objective",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Objective",
    "text": "New Objective\nIn the new contract, the company wants to maximize its profits while the demand does not have to be fulfilled.\n. . .\nQuestion: What changes are necessary?\n. . .\n\nWe need to change the objective function\nWe need to change some parameters\n\n. . .\nQuestion: Does our decision variable change?\n. . .\n\nNo, we still transport truckloads of solar panels",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#new-parameters",
    "href": "part-01/lecture-introduction.html#new-parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Parameters",
    "text": "New Parameters\n\\[\n\\begin{aligned}\np &: \\text{Sales volume per truckload of solar panels,} \\\\\nc &: \\text{Production costs per truckload of solar panels.}\n\\end{aligned}\n\\]\n. . .\nQuestion: What is the profit per truckload of solar panels?\n. . .\n\\[\np - c\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#former-model",
    "href": "part-01/lecture-introduction.html#former-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Former Model",
    "text": "Former Model\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\geq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#new-model",
    "href": "part-01/lecture-introduction.html#new-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Model",
    "text": "New Model\n\\[\n\\begin{aligned}\n\\text{Maximize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} (p-c-c_{i,j}) \\times X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\leq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section-4",
    "href": "part-01/lecture-introduction.html#section-4",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nany questions?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#download-and-install-julia",
    "href": "part-01/lecture-introduction.html#download-and-install-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Download and Install Julia",
    "text": "Download and Install Julia\n\nTo prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#installating-julia",
    "href": "part-01/lecture-introduction.html#installating-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installating Julia",
    "text": "Installating Julia\n\n\nHead to julialang.org and follow the instructions.\n\n\n\n\n\n\n\nTip\n\n\n\nIf you are ever asked to add something to your “PATH”, do so!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#vs-code",
    "href": "part-01/lecture-introduction.html#vs-code",
    "title": "Lecture I - Welcome and Introduction",
    "section": "VS Code",
    "text": "VS Code\n\n\nNext, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#installing-vs-code",
    "href": "part-01/lecture-introduction.html#installing-vs-code",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installing VS Code",
    "text": "Installing VS Code\n\nHead to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#verify-the-installation",
    "href": "part-01/lecture-introduction.html#verify-the-installation",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Verify the Installation",
    "text": "Verify the Installation\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#create-a-new-file",
    "href": "part-01/lecture-introduction.html#create-a-new-file",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Create a new file",
    "text": "Create a new file\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#everything-working",
    "href": "part-01/lecture-introduction.html#everything-working",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Everything working?",
    "text": "Everything working?\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry if it is not running right away. We will fix this together!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#how-to-get-started",
    "href": "part-01/lecture-introduction.html#how-to-get-started",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to get started?",
    "text": "How to get started?\n\nLearning a new programming language is a daunting task\nIt is best to start with some small, interactive problems\nThen, slowly increase the scope of the tasks\nWe will do this together in class!\n\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered a first introduction and are ready to start solving some problems in the upcoming lectures.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section-5",
    "href": "part-01/lecture-introduction.html#section-5",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#literature-i",
    "href": "part-01/lecture-introduction.html#literature-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html",
    "href": "part-03/tutorial-03-02-handling.html",
    "title": "Tutorial III.II - Package Management",
    "section": "",
    "text": "This interactive script serves as an in-depth guide to understanding packages and package management in Julia. Delve into the utilization of the package manager, the processes of adding, updating, and removing packages, and management of distinct environments. First off all, we briefly need to introduce what a package is: a package is a collection of code that is used to extend the functionality of Julia. There are a lot of packages available for Julia, ranging from basic packages like LinearAlgebra to more specialized packages like JuMP for optimization. This means that most of the time you don’nt have to invent the wheel by yourself but can rely on the work of others. The great thing: Almost all packages available for Julia are available for free and can be used under the MIT license.\n\n\n\n\n\n\nNote\n\n\n\nNote: While this script offers guidance, package management commands should usually be executed in Julia’s REPL.\n\n\n\n\nJulia’s built-in package manager, Pkg, provides a robust set of tools for managing packages. To utilize these tools, start by importing the Pkg module. This module allows you to add, update, and remove packages, and manage environments efficiently. Note, import PackageName lets you access exported functions with PackageName.function, while using PackageName imports all exported names into the local namespace for direct access.\n\n\n\nImport the Pkg module to start managing packages effectively.\n\n# Import the Pkg module to start managing packages effectively.\n# YOUR CODE BELOW\n\n# Test your answer\ntry \n    Pkg.update()\n    println(\"Pkg module imported successfully and packages were updated!\")\ncatch e\n    @error \"The Pkg module was not imported yet! Have you used the correct syntax?\"\nend\n\n\n\n\nAdding packages in Julia is straightforward using the Pkg.add(\"PackageName\") function. Replace PackageName with the actual package name you wish to add.\n\n\n\nUse Pkg.add() to add the Package DataFrames that we will use later.\n\n# Use Pkg.add() to add the Package 'DataFrames' that we will use later.\n# YOUR CODE BELOW\n\n# Test your answer\ntry \n    using DataFrames\n    println(\"Package added successfully!\")\ncatch e\n    @error \"Package was not added yet! Have you used the correct syntax?\"\nend\n\nPackage added successfully!\n\n\n\n\n\nMaintaining your Julia environment involves keeping your packages up-to-date and removing those that are no longer necessary. Use Pkg.update(\"PackageName\") to update individual packages, or simply Pkg.update() to update all packages. To remove an obsolete package, use Pkg.rm(\"PackageName\"). Remember to replace PackageName with the actual name of the package you wish to manage.\n\n\n\nJulia environments are essential for keeping project dependencies isolated and organized. It’s a best practice to create a new environment for each project to avoid conflicts between package versions. Activate a new environment with Pkg.activate(\"new_environment\") and add packages to it with Pkg.add(\"PackageName\"). This ensures that each of your projects has a clean, dedicated set of dependencies.\n\n\n\n\n\n\nNote\n\n\n\nIf you plan to stick to working with notebooks, you don’t have to worry about environments yet. Just use the global environment for the course and you don’t have to activate anything.\n\n\n\n\n\nCongratulations! You’ve completed the tutorial on packages and package management in Julia. These skills are important for effectively managing and utilizing external libraries. Continue to the next file to learn more."
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html#section-1-using-the-package-manager",
    "href": "part-03/tutorial-03-02-handling.html#section-1-using-the-package-manager",
    "title": "Tutorial III.II - Package Management",
    "section": "",
    "text": "Julia’s built-in package manager, Pkg, provides a robust set of tools for managing packages. To utilize these tools, start by importing the Pkg module. This module allows you to add, update, and remove packages, and manage environments efficiently. Note, import PackageName lets you access exported functions with PackageName.function, while using PackageName imports all exported names into the local namespace for direct access."
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html#exercise-1.1",
    "href": "part-03/tutorial-03-02-handling.html#exercise-1.1",
    "title": "Tutorial III.II - Package Management",
    "section": "",
    "text": "Import the Pkg module to start managing packages effectively.\n\n# Import the Pkg module to start managing packages effectively.\n# YOUR CODE BELOW\n\n# Test your answer\ntry \n    Pkg.update()\n    println(\"Pkg module imported successfully and packages were updated!\")\ncatch e\n    @error \"The Pkg module was not imported yet! Have you used the correct syntax?\"\nend"
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html#section-2-adding-packages",
    "href": "part-03/tutorial-03-02-handling.html#section-2-adding-packages",
    "title": "Tutorial III.II - Package Management",
    "section": "",
    "text": "Adding packages in Julia is straightforward using the Pkg.add(\"PackageName\") function. Replace PackageName with the actual package name you wish to add."
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html#exercise-2.1",
    "href": "part-03/tutorial-03-02-handling.html#exercise-2.1",
    "title": "Tutorial III.II - Package Management",
    "section": "",
    "text": "Use Pkg.add() to add the Package DataFrames that we will use later.\n\n# Use Pkg.add() to add the Package 'DataFrames' that we will use later.\n# YOUR CODE BELOW\n\n# Test your answer\ntry \n    using DataFrames\n    println(\"Package added successfully!\")\ncatch e\n    @error \"Package was not added yet! Have you used the correct syntax?\"\nend\n\nPackage added successfully!"
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html#section-3-updating-and-removing-packages",
    "href": "part-03/tutorial-03-02-handling.html#section-3-updating-and-removing-packages",
    "title": "Tutorial III.II - Package Management",
    "section": "",
    "text": "Maintaining your Julia environment involves keeping your packages up-to-date and removing those that are no longer necessary. Use Pkg.update(\"PackageName\") to update individual packages, or simply Pkg.update() to update all packages. To remove an obsolete package, use Pkg.rm(\"PackageName\"). Remember to replace PackageName with the actual name of the package you wish to manage."
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html#section-4-managing-environments",
    "href": "part-03/tutorial-03-02-handling.html#section-4-managing-environments",
    "title": "Tutorial III.II - Package Management",
    "section": "",
    "text": "Julia environments are essential for keeping project dependencies isolated and organized. It’s a best practice to create a new environment for each project to avoid conflicts between package versions. Activate a new environment with Pkg.activate(\"new_environment\") and add packages to it with Pkg.add(\"PackageName\"). This ensures that each of your projects has a clean, dedicated set of dependencies.\n\n\n\n\n\n\nNote\n\n\n\nIf you plan to stick to working with notebooks, you don’t have to worry about environments yet. Just use the global environment for the course and you don’t have to activate anything."
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html#conclusion",
    "href": "part-03/tutorial-03-02-handling.html#conclusion",
    "title": "Tutorial III.II - Package Management",
    "section": "",
    "text": "Congratulations! You’ve completed the tutorial on packages and package management in Julia. These skills are important for effectively managing and utilizing external libraries. Continue to the next file to learn more."
  },
  {
    "objectID": "part-03/tutorial-03-04-IO.html",
    "href": "part-03/tutorial-03-04-IO.html",
    "title": "Tutorial III.IV - Input and Output",
    "section": "",
    "text": "This interactive Julia script introduces the essentials of interacting with external files. It covers reading and writing text files, handling CSV, and working with delimited files using DelimitedFiles. Follow the instructions, write your code in the designated code blocks, and validate your results with @assert statements.\n\n\nDelimited files, such as .csv, can be handled efficiently using the DelimitedFiles package in Julia. This requires the DelimitedFiles package. But as it is part of the Julia Standard Library, you can use it directly without the need to use Pkg.add() before.\n\nusing DelimitedFiles\n\nThe following code writes a matrix to a CSV file, seperating values with ,.\n\nnew_data = [10 12 6; 13 25 1; 40 30 7]\nmkdir(\"ExampleData\")\nopen(\"ExampleData/matrix.csv\", \"w\") do io\n    writedlm(io, new_data, ',')\nend\nprintln(\"CSV file 'matrix.csv' written successfully to folder ExampleData!\")\n\n\n\n\nRead the just written CSV file ‘matrix.csv’ using the function readdlm(). Save the matrix in the variable read_matrix. To learn the syntax, use the inbuild help by typing ? in the terminal. Afterwards, just type the function name for an explanation.\n\n# Read the just written CSV file 'matrix.csv' using the function `readdlm()`. Save the matrix in the variable `read_matrix`. To learn the syntax, use the inbuild help by typing `?` in the terminal. Afterwards, just type the function name for an explanation.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert read_matrix == new_data\nprintln(\"File 'matrix.csv' read successfully!\")\n\n\n\n\nThe CSV package in Julia provides powerful tools for reading and writing CSV files to and from DataFrames, a common requirement in data analysis and data science projects. This requires the CSV and DataFrames packages. If you solely followed the course so far, you first have to install the CSV Package before you can start using it:\nimport Pkg; Pkg.add(\"CSV\")\n\n\n\nWrite the following given DataFrame to a CSV file table_out.csv in the folder ExampleData. This can be done by using the function CSV.write(). To learn the syntax, ask the inbuild help with ? and the function name.\n\nusing CSV, DataFrames\n# Write the following given DataFrame to a CSV file 'table_out.csv' in the folder 'ExampleData'. This can be done by using the function CSV.write(). To learn the syntax, ask the inbuild help with '?' and the function name.\n\ndata = DataFrame(Name = [\"Alice\", \"Bob\", \"Charlie\"], Age = [25, 30, 35])\ncsv_file_path = \"ExampleData/table_out.csv\"\n# YOUR CODE BELOW\n\n# Test your answer\n@assert isfile(\"ExampleData/table_out.csv\") \"Sorry, the file could not be found. \n    Have you followed all steps?\"\nprintln(\"CSV file 'data.csv' written successfully!\")\n\n\n\n\nRead the CSV file table_in.csv in the folder ExampleData into the variable read_data. Here you can use the function CSV.read(). Again, use the inbuild help to familiarize yourself with the syntax. Note, that you need to provide a sink for the data when using CSV.read(), e.g. a DataFrame.\n\n# Read the CSV file `table_in.csv` in the folder `ExampleData` into the variable `read_data`. Here you can use the function `CSV.read()`. Again, use the inbuild help to familiarize yourself with the syntax. Note, that you need to provide a sink for the data when using `CSV.read()`, e.g. a DataFrame.\n# YOUR CODE BELOW\n\n# Test your CSV reading\n@assert read_data[1,1] == \"Lisa\"\nprintln(\"CSV file 'table_in.csv' read successfully!\")\n\n\n\n\nCongratulations! You’ve successfully completed the tutorial on reading and writing external files in Julia. Continue to the next file to learn more."
  },
  {
    "objectID": "part-03/tutorial-03-04-IO.html#section-1-working-with-delimited-files",
    "href": "part-03/tutorial-03-04-IO.html#section-1-working-with-delimited-files",
    "title": "Tutorial III.IV - Input and Output",
    "section": "",
    "text": "Delimited files, such as .csv, can be handled efficiently using the DelimitedFiles package in Julia. This requires the DelimitedFiles package. But as it is part of the Julia Standard Library, you can use it directly without the need to use Pkg.add() before.\n\nusing DelimitedFiles\n\nThe following code writes a matrix to a CSV file, seperating values with ,.\n\nnew_data = [10 12 6; 13 25 1; 40 30 7]\nmkdir(\"ExampleData\")\nopen(\"ExampleData/matrix.csv\", \"w\") do io\n    writedlm(io, new_data, ',')\nend\nprintln(\"CSV file 'matrix.csv' written successfully to folder ExampleData!\")"
  },
  {
    "objectID": "part-03/tutorial-03-04-IO.html#exercise-1.1",
    "href": "part-03/tutorial-03-04-IO.html#exercise-1.1",
    "title": "Tutorial III.IV - Input and Output",
    "section": "",
    "text": "Read the just written CSV file ‘matrix.csv’ using the function readdlm(). Save the matrix in the variable read_matrix. To learn the syntax, use the inbuild help by typing ? in the terminal. Afterwards, just type the function name for an explanation.\n\n# Read the just written CSV file 'matrix.csv' using the function `readdlm()`. Save the matrix in the variable `read_matrix`. To learn the syntax, use the inbuild help by typing `?` in the terminal. Afterwards, just type the function name for an explanation.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert read_matrix == new_data\nprintln(\"File 'matrix.csv' read successfully!\")"
  },
  {
    "objectID": "part-03/tutorial-03-04-IO.html#section-2-working-with-csv-files-and-dataframes",
    "href": "part-03/tutorial-03-04-IO.html#section-2-working-with-csv-files-and-dataframes",
    "title": "Tutorial III.IV - Input and Output",
    "section": "",
    "text": "The CSV package in Julia provides powerful tools for reading and writing CSV files to and from DataFrames, a common requirement in data analysis and data science projects. This requires the CSV and DataFrames packages. If you solely followed the course so far, you first have to install the CSV Package before you can start using it:\nimport Pkg; Pkg.add(\"CSV\")"
  },
  {
    "objectID": "part-03/tutorial-03-04-IO.html#exercise-2.1",
    "href": "part-03/tutorial-03-04-IO.html#exercise-2.1",
    "title": "Tutorial III.IV - Input and Output",
    "section": "",
    "text": "Write the following given DataFrame to a CSV file table_out.csv in the folder ExampleData. This can be done by using the function CSV.write(). To learn the syntax, ask the inbuild help with ? and the function name.\n\nusing CSV, DataFrames\n# Write the following given DataFrame to a CSV file 'table_out.csv' in the folder 'ExampleData'. This can be done by using the function CSV.write(). To learn the syntax, ask the inbuild help with '?' and the function name.\n\ndata = DataFrame(Name = [\"Alice\", \"Bob\", \"Charlie\"], Age = [25, 30, 35])\ncsv_file_path = \"ExampleData/table_out.csv\"\n# YOUR CODE BELOW\n\n# Test your answer\n@assert isfile(\"ExampleData/table_out.csv\") \"Sorry, the file could not be found. \n    Have you followed all steps?\"\nprintln(\"CSV file 'data.csv' written successfully!\")"
  },
  {
    "objectID": "part-03/tutorial-03-04-IO.html#exercise-2.2",
    "href": "part-03/tutorial-03-04-IO.html#exercise-2.2",
    "title": "Tutorial III.IV - Input and Output",
    "section": "",
    "text": "Read the CSV file table_in.csv in the folder ExampleData into the variable read_data. Here you can use the function CSV.read(). Again, use the inbuild help to familiarize yourself with the syntax. Note, that you need to provide a sink for the data when using CSV.read(), e.g. a DataFrame.\n\n# Read the CSV file `table_in.csv` in the folder `ExampleData` into the variable `read_data`. Here you can use the function `CSV.read()`. Again, use the inbuild help to familiarize yourself with the syntax. Note, that you need to provide a sink for the data when using `CSV.read()`, e.g. a DataFrame.\n# YOUR CODE BELOW\n\n# Test your CSV reading\n@assert read_data[1,1] == \"Lisa\"\nprintln(\"CSV file 'table_in.csv' read successfully!\")"
  },
  {
    "objectID": "part-03/tutorial-03-04-IO.html#conclusion",
    "href": "part-03/tutorial-03-04-IO.html#conclusion",
    "title": "Tutorial III.IV - Input and Output",
    "section": "",
    "text": "Congratulations! You’ve successfully completed the tutorial on reading and writing external files in Julia. Continue to the next file to learn more."
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html",
    "href": "part-02/tutorial-02-03-comparisons.html",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "",
    "text": "This interactive Julia script introduces the basics of comparisons and logical operators. These are fundamental for controlling the flow of programs and making decisions. Follow the instructions, write your code in the designated code blocks, and execute the corresponding code cell.\n\n\nIn Julia, comparison operators allow you to compare values and make decisions based on these comparisons. Common comparison operators include\n\n== (equal)\n!= (not equal)\n&lt; (less than)\n&gt; (greater than)\n&lt;= (less than or equal to)\n&gt;= (greater than or equal to)\n\nComparisons return a boolean value (true or false). You can use these directly or store them in a variable. For example:\ncomparison = 5 == 5  # This will store 'true' in 'comparison'.\n\n\n\nCompare if 10 is greater than 5 and store the result in comparison1.\n\n# Compare if 10 is greater than 5 and store the result in 'comparison1'.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert comparison1 == true\nprintln(\"comparison1 is \", comparison1)\n\n\n\n\nCompare if x is not equal to y and store the result in comparison2.\n\n# Define variables 'x' with value \"Hello\" and 'y' with value \"world\". Compare if 'x' is not equal to 'y' and store the result in 'comparison2'.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert x == \"Hello\"\n@assert y == \"world\"\n@assert comparison2 == true\nprintln(\"Comparison2 is \", comparison2)\n\n\n\n\nLogical operators combine or invert boolean values. In Julia, use\n\n&& for AND\n|| for OR\n! for NOT\n\nThese are useful in complex conditions and controlling program flow.\n\n\n\nUse the AND operator to check if 10 is greater than 5 and hello is equal to hello. Store the result in logic1.\n\n# Use the AND operator to check if 10 is greater than 5 and 'hello' is equal to 'hello'. Store the result in 'logic1'.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert logic1 == true\nprintln(\"logic1 is \", logic1)\n\n\n\n\nUse the OR operator to check if 10 is less than 5 or hello is equal to hello. Store the result in logic2.\n\n# Use the OR operator to check if 10 is less than 5 or `hello` is equal to `hello`. Store the result in `logic2`.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert logic2 == true\nprintln(\"logic2 is \", logic2)\n\n\n\n\nCheck whether 10 is greater than 5 and store the result in logic3. Then, use the NOT operator to invert logic3. Store the result in logic4.\n\n# Check whether 10 is greater than 5 and store the result in `logic3`. Then, use the NOT operator to invert `logic3`. Store the result in `logic4`.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert logic3 == true\n@assert logic4 == false\nprintln(\"logic3 is \", logic3,\" and logic4 is\", logic4)\n\n\n\n\nExcellent work! You’ve completed the tutorial on Comparisons and logical operators in Julia. You’ve learned to compare values and use logical operators to combine or invert boolean values. Experiment with the code, try different operations, and understand how Julia handles logic. Continue to the next file to learn more.",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#section-1-comparisons",
    "href": "part-02/tutorial-02-03-comparisons.html#section-1-comparisons",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "",
    "text": "In Julia, comparison operators allow you to compare values and make decisions based on these comparisons. Common comparison operators include\n\n== (equal)\n!= (not equal)\n&lt; (less than)\n&gt; (greater than)\n&lt;= (less than or equal to)\n&gt;= (greater than or equal to)\n\nComparisons return a boolean value (true or false). You can use these directly or store them in a variable. For example:\ncomparison = 5 == 5  # This will store 'true' in 'comparison'.",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-1.1",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-1.1",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "",
    "text": "Compare if 10 is greater than 5 and store the result in comparison1.\n\n# Compare if 10 is greater than 5 and store the result in 'comparison1'.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert comparison1 == true\nprintln(\"comparison1 is \", comparison1)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-1.2",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-1.2",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "",
    "text": "Compare if x is not equal to y and store the result in comparison2.\n\n# Define variables 'x' with value \"Hello\" and 'y' with value \"world\". Compare if 'x' is not equal to 'y' and store the result in 'comparison2'.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert x == \"Hello\"\n@assert y == \"world\"\n@assert comparison2 == true\nprintln(\"Comparison2 is \", comparison2)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#section-2-logical-operators",
    "href": "part-02/tutorial-02-03-comparisons.html#section-2-logical-operators",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "",
    "text": "Logical operators combine or invert boolean values. In Julia, use\n\n&& for AND\n|| for OR\n! for NOT\n\nThese are useful in complex conditions and controlling program flow.",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-2.1",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-2.1",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "",
    "text": "Use the AND operator to check if 10 is greater than 5 and hello is equal to hello. Store the result in logic1.\n\n# Use the AND operator to check if 10 is greater than 5 and 'hello' is equal to 'hello'. Store the result in 'logic1'.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert logic1 == true\nprintln(\"logic1 is \", logic1)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-2.2",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-2.2",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "",
    "text": "Use the OR operator to check if 10 is less than 5 or hello is equal to hello. Store the result in logic2.\n\n# Use the OR operator to check if 10 is less than 5 or `hello` is equal to `hello`. Store the result in `logic2`.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert logic2 == true\nprintln(\"logic2 is \", logic2)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-2.3",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-2.3",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "",
    "text": "Check whether 10 is greater than 5 and store the result in logic3. Then, use the NOT operator to invert logic3. Store the result in logic4.\n\n# Check whether 10 is greater than 5 and store the result in `logic3`. Then, use the NOT operator to invert `logic3`. Store the result in `logic4`.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert logic3 == true\n@assert logic4 == false\nprintln(\"logic3 is \", logic3,\" and logic4 is\", logic4)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#conclusion",
    "href": "part-02/tutorial-02-03-comparisons.html#conclusion",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "",
    "text": "Excellent work! You’ve completed the tutorial on Comparisons and logical operators in Julia. You’ve learned to compare values and use logical operators to combine or invert boolean values. Experiment with the code, try different operations, and understand how Julia handles logic. Continue to the next file to learn more.",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html",
    "href": "part-03/tutorial-03-03-DataFrames.html",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "This interactive Julia script is your comprehensive guide to understanding DataFrames in Julia. Work on creating DataFrames, accessing, modifying, and filtering data, alongside basic data manipulation techniques. Follow the instructions, input your code in the designated areas, and verify your implementations with @assert statements. Note: Ensure you have the DataFrames package installed to effectively follow this tutorial!\n\n# Import the DataFrames package\nusing DataFrames\n\n\n\nA DataFrame in Julia is akin to a table in SQL or a spreadsheet - each column can have its own type, making it highly versatile. A DataFrame can be created using the DataFrame constructor and passing key-value pairs where the key is the column name and the value is an array of data. For more help, use ? in the REPL and type DataFrame.\n\n\n\nCreate and Test a DataFrame. Create a DataFrame named employees with the columns Name, Age, and Salary, and populate it with the specified data: John is 28 years old and earns 50000, Mike is 23 years old and earns 62000. Frank is 37 years old and earns 90000.\n\n# Create and Test a DataFrame. Create a DataFrame named 'employees' with the columns 'Name', 'Age', and 'Salary', and populate it with the specified data: John is 28 years old and earns 50000, Mike is 23 years old and earns 62000. Frank is 37 years old and earns 90000.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert employees == DataFrame(Name = [\"John\", \"Mike\", \"Frank\"], \n    Age = [28, 23, 37], Salary = [50000, 62000, 90000])\nprintln(\"DataFrame created successfully!\")\nprintln(employees)\n\n\n\n\n\n\n\nTip\n\n\n\nRemember, for more help, use ? in the REPL and type DataFrame.\n\n\n\n\n\nAccessing columns in a DataFrame can be done using the dot syntax, while rows can be accessed via indexing. Modification of data is straightforward; just assign a new value to the desired cell. To access the column ‘name’ in our DataFrame with employees, we could do:\nemployees.Name \nTo access the third name specifically, we could do:\nemployees.Name[3] \n\n\n\nAccess the Age column from the DataFrame and save it in a new variable ages.\n\n# Access the 'Age' column from the DataFrame and save it in a new variable 'ages'.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert ages == [28, 23, 37]\nprintln(\"Correct, the Ages column is: \", ages)\n\n\n\n\nUpdate John’s salary to 59000.\n\n# Update John's salary to 59000.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert employees.Salary[1] == 59000\nprintln(\"Modified DataFrame: \")\nprintln(employees)\n\n\n\n\nLogical indexing can be used to filter rows in a DataFrame based on conditions. To filter the DataFrame to include only employees names “Frank” we could do:\nallFranks = employees[employees.Name .== \"Frank\", :]\nAlternatively, the filter function provides a powerful tool to extract subsets of data based on a condition:\nallFranks = filter(row -&gt; row.Name == \"Frank\", employees) \n\n\n\nFilter the DataFrame to include only employees with salaries above 60000. Save the resulting employees in the DataFrame high_earners.\n\n# Filter the DataFrame to include only employees with salaries above 60000. Save \n# the resulting employees in the DataFrame 'high_earners'. \n# YOUR CODE BELOW\n\n# Test your answer\n@assert nrow(high_earners) == 2\nprintln(\"High earners: \")\nprintln(high_earners)\n\n\n\n\nJulia provides functions for basic data manipulation tasks, including sorting, grouping, and joining DataFrames. The sort function can be used to order the rows in a DataFrame based on the values in one or more columns. To see how to use the function, type ? into the REPL (terminal) and type sort.\n\n\n\nSort the DataFrame based on the Age column and save it as sorted_df.\n\n# Sort the DataFrame based on the 'Age' column and save it as 'sorted_df'.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert sorted_df.Age[1] == 23\nprintln(\"DataFrame sorted by age: \")\nprintln(sorted_df)\n\n\n\n\n\n\n\nTip\n\n\n\nIf you have more complicated data structures, take a look at JSON files which can be used to work with all kind of differently structured data sets.\n\n\n\n\n\nFantastic work! You’ve completed the tutorial on DataFrames in Julia. You’ve seen how to create DataFrames and access, modify and filter data. Continue to the next file to learn more."
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#section-1-creating-dataframes",
    "href": "part-03/tutorial-03-03-DataFrames.html#section-1-creating-dataframes",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "A DataFrame in Julia is akin to a table in SQL or a spreadsheet - each column can have its own type, making it highly versatile. A DataFrame can be created using the DataFrame constructor and passing key-value pairs where the key is the column name and the value is an array of data. For more help, use ? in the REPL and type DataFrame."
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-1.1",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-1.1",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "Create and Test a DataFrame. Create a DataFrame named employees with the columns Name, Age, and Salary, and populate it with the specified data: John is 28 years old and earns 50000, Mike is 23 years old and earns 62000. Frank is 37 years old and earns 90000.\n\n# Create and Test a DataFrame. Create a DataFrame named 'employees' with the columns 'Name', 'Age', and 'Salary', and populate it with the specified data: John is 28 years old and earns 50000, Mike is 23 years old and earns 62000. Frank is 37 years old and earns 90000.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert employees == DataFrame(Name = [\"John\", \"Mike\", \"Frank\"], \n    Age = [28, 23, 37], Salary = [50000, 62000, 90000])\nprintln(\"DataFrame created successfully!\")\nprintln(employees)\n\n\n\n\n\n\n\nTip\n\n\n\nRemember, for more help, use ? in the REPL and type DataFrame."
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#section-2-accessing-and-modifying-data",
    "href": "part-03/tutorial-03-03-DataFrames.html#section-2-accessing-and-modifying-data",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "Accessing columns in a DataFrame can be done using the dot syntax, while rows can be accessed via indexing. Modification of data is straightforward; just assign a new value to the desired cell. To access the column ‘name’ in our DataFrame with employees, we could do:\nemployees.Name \nTo access the third name specifically, we could do:\nemployees.Name[3]"
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-2.1",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-2.1",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "Access the Age column from the DataFrame and save it in a new variable ages.\n\n# Access the 'Age' column from the DataFrame and save it in a new variable 'ages'.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert ages == [28, 23, 37]\nprintln(\"Correct, the Ages column is: \", ages)"
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-2.2",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-2.2",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "Update John’s salary to 59000.\n\n# Update John's salary to 59000.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert employees.Salary[1] == 59000\nprintln(\"Modified DataFrame: \")\nprintln(employees)"
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#section-3-filtering-data",
    "href": "part-03/tutorial-03-03-DataFrames.html#section-3-filtering-data",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "Logical indexing can be used to filter rows in a DataFrame based on conditions. To filter the DataFrame to include only employees names “Frank” we could do:\nallFranks = employees[employees.Name .== \"Frank\", :]\nAlternatively, the filter function provides a powerful tool to extract subsets of data based on a condition:\nallFranks = filter(row -&gt; row.Name == \"Frank\", employees)"
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-3.1",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-3.1",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "Filter the DataFrame to include only employees with salaries above 60000. Save the resulting employees in the DataFrame high_earners.\n\n# Filter the DataFrame to include only employees with salaries above 60000. Save \n# the resulting employees in the DataFrame 'high_earners'. \n# YOUR CODE BELOW\n\n# Test your answer\n@assert nrow(high_earners) == 2\nprintln(\"High earners: \")\nprintln(high_earners)"
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#section-4-basic-data-manipulation",
    "href": "part-03/tutorial-03-03-DataFrames.html#section-4-basic-data-manipulation",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "Julia provides functions for basic data manipulation tasks, including sorting, grouping, and joining DataFrames. The sort function can be used to order the rows in a DataFrame based on the values in one or more columns. To see how to use the function, type ? into the REPL (terminal) and type sort."
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-4.1",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-4.1",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "Sort the DataFrame based on the Age column and save it as sorted_df.\n\n# Sort the DataFrame based on the 'Age' column and save it as 'sorted_df'.\n# YOUR CODE BELOW\n\n# Test your answer\n@assert sorted_df.Age[1] == 23\nprintln(\"DataFrame sorted by age: \")\nprintln(sorted_df)\n\n\n\n\n\n\n\nTip\n\n\n\nIf you have more complicated data structures, take a look at JSON files which can be used to work with all kind of differently structured data sets."
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#conclusion",
    "href": "part-03/tutorial-03-03-DataFrames.html#conclusion",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "Fantastic work! You’ve completed the tutorial on DataFrames in Julia. You’ve seen how to create DataFrames and access, modify and filter data. Continue to the next file to learn more."
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html",
    "href": "part-02/tutorial-02-04-loops.html",
    "title": "Tutorial II.IV - Loops",
    "section": "",
    "text": "This interactive Julia script is an extensive tutorial introducing you to the robust loop structures in Julia. Improve your skills in for and while loops for performing repetitive tasks, manipulating loop flow with break and continue, and applying nested loops to iterate through multi-dimensional structures. Follow the instructions, input your code in the designated areas, and verify your implementations with @assert statements.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-1.1",
    "href": "part-02/tutorial-02-04-loops.html#exercise-1.1",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 1.1",
    "text": "Exercise 1.1\nSum the numbers from 1 to 5 in a loop. Don’t worry about the let here, it just starts a scope block. More on this later in the tutorial on variable scope. The next line initializes sum_numbers to 0. The sum you compute should accumulate in this variable.\n\n# Calculate the sum of numbers from 1 to 5 in a loop. Don't worry about the let here, it just starts a scope block. More on this later in the tutorial on variable scope. The next line initializes sum_numbers to 0. The sum you compute should accumulate in this variable.\nlet \nsum_numbers = 0\n# YOUR CODE BELOW\n\n# Test your answer\n@assert sum_numbers == 15\nprintln(\"Sum of numbers from 1 to 5: \", sum_numbers)\nend # This ends the scope of the previously started scope block.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-1.2",
    "href": "part-02/tutorial-02-04-loops.html#exercise-1.2",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 1.2",
    "text": "Exercise 1.2\nSum only the even numbers from 1 to 10. Again, we initialize a variable sum_evens to 0. The sum you compute should accumulate in this variable.\n\n# Sum only the even numbers from 1 to 10. Again, we initialize a variable 'sum_evens' to 0. The sum you compute should accumulate in this variable.\nlet # First, we start a scope block for the loop!\nsum_evens = 0\n# YOUR CODE BELOW\n\n# Test your answer\n@assert sum_evens == 30\nprintln(\"Sum of even numbers from 1 to 10: \", sum_evens)\nend # Here we end the scope block again.\n\n\n\n\n\n\n\nNote\n\n\n\nHint: Utilize the remainder operator (%) to verify if a number is even. number % 2 == 0 implies that number is even.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-1.3",
    "href": "part-02/tutorial-02-04-loops.html#exercise-1.3",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 1.3",
    "text": "Exercise 1.3\nIterate over each fruit in the fruits array, store the current fruit in current_fruit, and exit the loop if current_fruit is banana. The next lines initialize the fruits array and current_fruit variable.\n\n# Iterate over each fruit in the 'fruits' array, store the current fruit  in 'current_fruit', and exit the loop if 'current_fruit' is \"banana\". The next lines initialize the 'fruits' array and 'current_fruit' variable. But first, another scope block.\nlet \nfruits = [\"apple\", \"banana\", \"cherry\"]\ncurrent_fruit = \"None\"\n# YOUR CODE BELOW\n\n# Test your answer\n@assert current_fruit == \"banana\"\nprintln(\"The current fruit is: \", current_fruit)\nend # Here we end the scope block again.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-2.1",
    "href": "part-02/tutorial-02-04-loops.html#exercise-2.1",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 2.1",
    "text": "Exercise 2.1\nSubtract from 10 in increments of 1 until the result is less than 3. The next line initializes current_value to 10. The result should be in this variable.\n\n# Subtract from 10 in increments of 1 until the result is less than 3. The next line initializes current_value to 10. The result should be in this variable. But first, we startnew scope block.\nlet \ncurrent_value = 10\n# YOUR CODE BELOW\n\n# Test your answer\n@assert current_value == 2\nprintln(\"The first value smaller than 3 is: \", current_value)\nend # Scope block closed again.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-2.2",
    "href": "part-02/tutorial-02-04-loops.html#exercise-2.2",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 2.2",
    "text": "Exercise 2.2\nFind the first multiple of 7 greater than 50 using an indefinite loop. The next line initializes first_multiple_of_7 to 0. The first multiple should be in this variable.\n\n# Find the first multiple of 7 greater than 50 using an indefinite loop.  The next line initializes 'first_multiple_of_7' to 0. The first multiple should be in this variable. But first, we start a new scope block.\nlet \nfirst_multiple_of_7 = 0\n# YOUR CODE BELOW\n\n# Test your answer\n@assert first_multiple_of_7 == 56\nprintln(\"First multiple of 7 greater than 50: \", first_multiple_of_7)\nend # End of scope block\n\n\n\n\n\n\n\nTip\n\n\n\n‘while true … end’ constructs an infinite loop. You can exit the loop using a ‘break’ statement if a condition is met.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#section-3-nested-loops",
    "href": "part-02/tutorial-02-04-loops.html#section-3-nested-loops",
    "title": "Tutorial II.IV - Loops",
    "section": "Section 3: Nested Loops",
    "text": "Section 3: Nested Loops\nNested loops are loops within another loop, useful for iterating over multi-dimensional data structures.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-3.1",
    "href": "part-02/tutorial-02-04-loops.html#exercise-3.1",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 3.1",
    "text": "Exercise 3.1\nCompute the product of each pair of elements from two arrays. The next lines initialize numbers1, numbers2 arrays, and the products array to store your results.\n\n# Compute the product of each pair of elements from two arrays. The next lines initialize numbers1, numbers2 arrays, and the products array to store your results. But first, we start a new scope block.\nlet \nnumbers1 = [1, 2, 3]\nnumbers2 = [4, 5, 6]\nproducts = []\n# YOUR CODE BELOW\n\n# Test your answer\n@assert products == [4, 5, 6, 8, 10, 12, 12, 15, 18]\nprintln(\"Products of each pair from two arrays: \", products)\nend # End scope block\n\n\n\n\n\n\n\nTip\n\n\n\nRemember, you can use push!() to append elements to an array.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#conclusion",
    "href": "part-02/tutorial-02-04-loops.html#conclusion",
    "title": "Tutorial II.IV - Loops",
    "section": "Conclusion",
    "text": "Conclusion\nGreat work! You’ve successfully navigated through the basics of loops in Julia. You’ve seen for and while loops, tackled iterable structure, and worked on nested loops. Continue to the next file to learn more.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  }
]