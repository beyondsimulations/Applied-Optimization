---
title: "Tutorial III.IV - Input and Output"
subtitle: "Applied Optimization with Julia"

format:
    html:
        theme: litera
        highlight-style: arrow
        linkcolor: "#a60000"
        code-copy: true
        code-link: true
        toc: true
        toc-location: right
        code-overflow: wrap
    pdf: 
        documentclass: report
        geometry:
            - margin=1in
        fontfamily: roboto
        fontfamilyoptions: sfdefault
        colorlinks: true
    ipynb:
        code-copy: true
        code-overflow: wrap

engine: julia
---

# Introduction

This interactive Julia script introduces the essentials of interacting with external files. File Input/Output (I/O) operations are crucial in programming and data analysis, allowing us to persist data, share information between programs, and work with large datasets that don't fit in memory. In this tutorial, we'll cover reading and writing text files, handling CSV files, and working with delimited files using various Julia packages. These skills are fundamental for data preprocessing, analysis, and result storage in real-world applications.

Follow the instructions, write your code in the designated code blocks, and validate your results with `@assert` statements.


# Section 1 - Working with Delimited Files

Delimited files, such as `.csv`, can be handled efficiently using the DelimitedFiles package in Julia. This requires the DelimitedFiles package. But as it is part of the Julia Standard Library, you can use it directly without the need to use `Pkg.add()` before.

```{julia}
using DelimitedFiles
```

The following code writes a matrix to a CSV file, seperating values with `,`.

```{julia}
#| eval: false
new_data = [10 12 6; 13 25 1; 40 30 7]
mkdir("ExampleData")
open("ExampleData/matrix.csv", "w") do io
    writedlm(io, new_data, ',')
end
println("CSV file 'matrix.csv' written successfully to folder ExampleData!")
```

## Exercise 1.1 - Read a CSV File

Read the just written CSV file 'matrix.csv' using the function `readdlm()`. Save the matrix in the variable `read_matrix`. To learn the syntax, use the inbuild help by typing `?` in the terminal. Afterwards, just type the function name for an explanation.

```{julia}
#| eval: false
# YOUR CODE BELOW

# Test your answer
@assert read_matrix == new_data
println("File 'matrix.csv' read successfully!")
```

# Section 2 - Working with CSV Files and DataFrames

The CSV package in Julia provides powerful tools for reading and writing CSV files to and from DataFrames, a common requirement in data analysis and data science projects. This requires the CSV and DataFrames packages. If you solely followed the course so far, you first have to install the CSV Package before you can start using it:

```{julia}
#| eval: false
import Pkg; Pkg.add("CSV")
```

## Exercise 2.1 - Write a DataFrame to a CSV File

Write the following given DataFrame to a CSV file `table_out.csv` in the folder `ExampleData`. This can be done by using the function `CSV.write()`. To learn the syntax, ask the inbuild help with `?` and the function name.

```{julia}
#| eval: false
using CSV, DataFrames
data = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35])
csv_file_path = "ExampleData/table_out.csv"
# YOUR CODE BELOW

# Test your answer
@assert isfile("ExampleData/table_out.csv") "Sorry, the file could not be found. 
    Have you followed all steps?"
println("CSV file 'data.csv' written successfully!")
```

## Exercise 2.2 - Read a CSV File in

Read the CSV file `table_in.csv` in the folder `ExampleData` into the variable `read_data`. Here you can use the function `CSV.read()`, e.g.:

```julia
read_data = CSV.read("Path/datatable.csv", DataFrame)
```

::: {.callout-note}
Note, that you need to provide a sink for the data when using `CSV.read()`, e.g. a DataFrame.
:::


```{julia}
#| eval: false
# YOUR CODE BELOW

# Test your CSV reading
@assert read_data[1,1] == "Lisa"
println("CSV file 'table_in.csv' read successfully!")
```
# Conclusion

Congratulations! You've successfully completed the tutorial on reading and writing external files in Julia. Continue to the next file to learn more.

{{< include ../include/tutorial_end.qmd >}}