---
title: "Tutorial IV.II - Variables and Bounds in JuMP"
subtitle: "Applied Optimization with Julia"

format:
    html:
        theme: litera
        highlight-style: arrow
        linkcolor: "#a60000"
        code-copy: true
        code-link: true
        toc: true
        toc-location: right
        code-overflow: wrap
    pdf: 
        documentclass: report
        geometry:
            - margin=1in
        fontfamily: roboto
        fontfamilyoptions: sfdefault
        colorlinks: true
    ipynb:
        code-copy: true
        code-overflow: wrap
engine: julia
---

# Introduction

This Julia script is an interactive tutorial to introduce you to advanced variable handling in JuMP. You'll learn about creating variables in containers, managing different types of variables, and working with indexed variables. Follow the instructions, write your code in the designated code blocks, and confirm your understanding with `@assert` statements. Make sure to have the JuMP package installed to follow this tutorial.

```{julia}
#| output: false
using JuMP
```

Now, we need a model. As we don't solve anything in this tutorial, we don't need to add the solver and can solely define the abstract model.

```{julia}
new_model = Model()
```

# Section 1 - Managing Different Types of Variables

JuMP allows creating continuous, integer, and binary variables. For example:

```{julia}
@variable(model, variableName)    
```
This defines a continuous variable without any bound.

```{julia}
@variable(model, 0 <= variableName <= 1) 
```
This defines a continuous variable in an interval.

```{julia}
@variable(model, 0 <= variableName, Bin) 
```
This defines a binary variable.

```{julia}
@variable(model, 0 <= variableName, Int) 
```
This defines an integer variable. Note that you will have to change `modelName` and `variableName` according to your instance.

## Exercise 1.1 - Create Variables
Create continuous, integer, and binary variables. Create three different variables of different types without any additional bound: `continuous_var` as a continuous variable for `new_model`, `integer_var` as an integer variable for `new_model`, and `binary_var` as a binary variable for `new_model`.

```{julia}
#| eval: false
# YOUR CODE BELOW

# Test your answer
@assert typeof(continuous_var) == VariableRef && typeof(integer_var) == VariableRef
@assert typeof(binary_var) == VariableRef
println("Continuous, integer, and binary variables created successfully!")
```

# Section 2 - Creating Variables in Containers

If we need to define larger models, creating each variable manually can become impossible. JuMP supports creating variables in containers like arrays, sets, dictionaries, and matrices. For example:

```{julia}
@variable(modelName, variableName[1:20], Bin)
```
This would create a container with 20 variables. To create a set based on a range, we could do:

```{julia}
new_range = 1:100
@variable(modelName, variableName[i in new_range] >= 0)
```
This would create a container with 100 continuous variables larger than 0. 

For a container with multiple dimensions:

```{julia}
@variable(modelName, variableName[1:30, 1:30])
```
This would create a container with a matrix of continuous variables without any bound. Note that you will have to change `modelName` and `variableName` according to your instance.

## Exercise 2.1 - Create an Array
Create an array `X` for `new_model` containing 8 variables with non-negative lower bounds.

```{julia}
# YOUR CODE BELOW

# Test your answer
@assert length(X) == 8 && all(lower_bound(X[i]) == 0 for i in 1:8)
println("Array of variables created successfully!")
``` 

## Exercise 2.2 - Create a Matrix
Create a matrix `Y` for `new_model` containing binary variables with a size of 3 x 3.

```{julia}
#| eval: false
# YOUR CODE BELOW

# Test your answer
@assert size(Y, 1) == 3 && size(Y, 2) == 3
@assert all(has_lower_bound(Y[i, j]) == false for i in 1:3, j in 1:3)
@assert all(has_upper_bound(Y[i, j]) == false for i in 1:3, j in 1:3)
println("Matrix of variables created successfully!")
```

## Exercise 2.3 - Create Indexed Variables
Create indexed variables based on a set. Create variables `W` indexed by set `N` of size 1, 2, ..., 6 with non-negative lower bounds.

```{julia}
#| eval: false
# YOUR CODE BELOW

# Test your answer
@assert length(W) == 6 && all(lower_bound(W[i]) == 0 for i in N)
println("Indexed variables created successfully!")
```

# Conclusion

Fantastic! You've completed the tutorial on advanced variables in JuMP. You've learned how to create variables in containers, manage different types of variables, and work with indexed variables. Continue to the next file to learn more.

{{< include ../include/tutorial_end.qmd >}}