{
  "hash": "86da8b2d4889fc47b48a829fd202ce38",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Tutorial II.V - Dictionaries\"\nsubtitle: \"Applied Optimization with Julia\"\n\nformat:\n    html:\n        theme: litera\n        highlight-style: arrow\n        linkcolor: \"#a60000\"\n        code-copy: true\n        code-link: true\n        toc: true\n        toc-location: right\n        code-overflow: wrap\n    pdf: \n        documentclass: report\n        geometry:\n            - margin=1in\n        fontfamily: roboto\n        fontfamilyoptions: sfdefault\n        colorlinks: true\n    ipynb:\n        code-copy: true\n        code-overflow: wrap\n\nengine: julia\n---\n\n\n\n\n\n\n\n\n# Introduction\n\nImagine you have a school directory where each student's name is associated with their unique student ID. This is similar to how dictionaries work in programming - they allow you to store and retrieve information using key-value pairs.\n\nFollow the structured instructions, implement your code in the designated blocks, and affirm your comprehension with `@assert` statements.\n\n# Section 1 - Creating and Accessing Dictionaries\n\nThink of it this way:\n\n- A dictionary is like a lookup table\n- Each entry has a unique key (like a student's name) \n- And an associated value (like their ID number)\n\nLet's see some examples:\n\n\n\n\n\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n# Creating a dictionary\nstudent_ids = Dict(\n    \"Elio\" => 1001, \n    \"Bob\" => 1002, \n    \"Yola\" => 1003\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nDict{String, Int64} with 3 entries:\n  \"Elio\" => 1001\n  \"Bob\"  => 1002\n  \"Yola\" => 1003\n```\n:::\n:::\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n# Accessing values\nprintln(\"Elio's ID: \", student_ids[\"Elio\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nElio's ID: 1001\n```\n:::\n:::\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n# Adding a new entry\nstudent_ids[\"David\"] = 1004\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n1004\n```\n:::\n:::\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n# Checking if a key exists\nif haskey(student_ids, \"Eve\")\n    println(\"Eve's ID: \", student_ids[\"Eve\"])\nelse\n    println(\"Eve is not in the directory\")\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEve is not in the directory\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Exercise 1.1 - Create and Modify a Dictionary\n\nAdd a new book called \"Harry Potter and the Philosopher's Stone\" with the author \"J.K. Rowling\" to the created dictionary.\n\n\n\n\n\n\n\n\n::: {.cell execution_count=0}\n``` {.julia .cell-code}\n# Creates a dictionary of books and authors\nbooks = Dict(\n    \"1984\" => \"George Orwell\", \n    \"Nexus\" => \"Yuval Noah Harari\"\n)\n# YOUR CODE BELOW\n\n```\n:::\n\n\n\n::: {.cell execution_count=0}\n``` {.julia .cell-code}\n# Test your answer\n@assert haskey(books, \"Harry Potter and the Philosopher's Stone\")\nprintln(\"Great! You've successfully added a new book to the books dictionary.\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n## Exercise 1.2 - Modify a Dictionary\n\nChange the author of \"1984\" to \"Eric Blair\" (George Orwell's real name).\n\n\n\n\n\n\n\n\n::: {.cell execution_count=0}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n```\n:::\n\n\n\n::: {.cell execution_count=0}\n``` {.julia .cell-code}\n# Test your answer\n@assert books[\"1984\"] == \"Eric Blair\"\nprintln(\"Great! You've successfully modified the books dictionary.\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Section 2 - Advanced Dictionary Operations\n\nDictionaries can do more than just store simple information. Let's explore some features:\n\n\n\n\n\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n# A dictionary of student grades\ngrades = Dict(\n    \"Elio\" => [85, 92, 78],\n    \"Bob\" => [76, 88, 94],\n    \"Yola\" => [90, 91, 89]\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nDict{String, Vector{Int64}} with 3 entries:\n  \"Elio\" => [85, 92, 78]\n  \"Bob\"  => [76, 88, 94]\n  \"Yola\" => [90, 91, 89]\n```\n:::\n:::\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n# Get all the keys (student names)\nstudent_names = keys(grades)\nprintln(\"Students: \", student_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStudents: [\"Elio\", \"Bob\", \"Yola\"]\n```\n:::\n:::\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n# Get all the values (grade lists)\nall_grades = values(grades)\nprintln(\"All grades: \", all_grades)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAll grades: [[85, 92, 78], [76, 88, 94], [90, 91, 89]]\n```\n:::\n:::\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n# Calculate average grade for each student\nfor (student, grade_list) in grades\n    average = sum(grade_list) / length(grade_list)\n    println(\"$student's average grade: $average\")\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nElio's average grade: 85.0\nBob's average grade: 86.0\nYola's average grade: 90.0\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n:::{.callout-note}\nThe `(student, grade_list)` is a tuple that contains the key and value of each entry in the dictionary. We could also name the tuple as `(key, value)` or `(a, b)`.\n:::\n\n## Conclusion\nGreat! You've just navigated through the basics of dictionaries in Julia. Dictionaries are powerful data structures that allow for efficient data organization and retrieval. Continue to the next file to learn more advanced Julia concepts.\n\n\n# Solutions\n\nYou will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching explicitly for the exact answers to the exercises. Understanding someone else's solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\n\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don't hesitate to ask for clarification during class discussions.\n\nLater, you will find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them in next week's tutorial. To access the solutions, click on the Github button on the lower right and search for the folder with today's lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. But please remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.\n\n",
    "supporting": [
      "tutorial-02-05-dicts_files/figure-pdf"
    ],
    "filters": []
  }
}