{
  "hash": "14fc762d769b8ca405dea27dd45d785a",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Tutorial III.III - DataFrames in Julia\"\nsubtitle: \"Applied Optimization with Julia\"\n\nformat:\n    html:\n        theme: litera\n        highlight-style: arrow\n        linkcolor: \"#a60000\"\n        code-copy: true\n        code-link: true\n        toc: true\n        toc-location: right\n        code-overflow: wrap\n    pdf: \n        documentclass: report\n        geometry:\n            - margin=1in\n        fontfamily: roboto\n        fontfamilyoptions: sfdefault\n        colorlinks: true\n    ipynb:\n        code-copy: true\n        code-overflow: wrap\n\nengine: julia\n---\n\n\n\n\n\n\n\n\n# Introduction\n\nImagine a DataFrame as a digital spreadsheet. It's a way to organize and work with data in rows and columns. Each column can hold different types of information, like names, ages, or salaries. In this tutorial, we'll learn how to create DataFrames, add and change data, and perform simple operations on our data.\n\n::: {.callout-note}\nBefore we start, make sure you have the DataFrames package installed. If you're not sure how to do this, check the previous tutorial on package management!\n:::\n\nLet's begin by importing the DataFrames package:\n\n\n\n\n\n\n\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\n# Import the DataFrames package\nusing DataFrames\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Section 1 - Creating DataFrames\n\nA DataFrame in Julia is akin to a table in SQL or a spreadsheet - each column can have its own type, making it highly versatile. A DataFrame can be created using the DataFrame constructor and passing key-value pairs where the key is the column name and the value is an array of data. For more help, use `?` in the REPL and type `DataFrame`. Example:\n\n\n\n\n\n\n\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\nstudents = DataFrame(\n    Name = [\"Elio\", \"Bob\", \"Yola\"], \n    Age = [18, 25,29], \n)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><div style = \"float: left;\"><span>3×2 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Name</th><th style = \"text-align: left;\">Age</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">Elio</td><td style = \"text-align: right;\">18</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">Bob</td><td style = \"text-align: right;\">25</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">Yola</td><td style = \"text-align: right;\">29</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Exercise 1.1 - Create a DataFrame\n\nCreate and Test a DataFrame. Create a DataFrame named `employees` with the columns `Name`, `Age`, and `Salary`, and populate it with the specified data: John is `28` years old and earns `50000`, Mike is `23` years old and earns `62000`. Frank is `37` years old and earns `90000`.\n\n\n\n\n\n\n\n\n::: {#6 .cell execution_count=0}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n\n```\n:::\n\n\n\n::: {#8 .cell execution_count=0}\n``` {.julia .cell-code code-fold=\"true\"}\n# Test your answer\n@assert employees == DataFrame(\n    Name = [\"John\", \"Mike\", \"Frank\"], \n    Age = [28, 23, 37], \n    Salary = [50000, 62000, 90000]\n)\nprintln(\"DataFrame created successfully!\")\nprintln(employees)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n::: {.callout-tip}\nRemember, for more help, use `?` in the REPL and type `DataFrame`.\n:::\n\n# Section 2 - Accessing and Modifying Data\n\nAccessing columns in a DataFrame can be done using the dot syntax, while rows can be accessed via indexing. Modification of data is straightforward; just assign a new value to the desired cell. To access the column 'name' in our DataFrame with `employees`, we could do:\n\n\n\n\n\n\n\n\n\n\n\n::: {#12 .cell execution_count=1}\n``` {.julia .cell-code}\nemployees.Name\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3-element Vector{String}:\n \"John\"\n \"Mike\"\n \"Frank\"\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nTo access the third name specifically, we could do:\n\n\n\n\n\n\n\n\n::: {#14 .cell execution_count=1}\n``` {.julia .cell-code}\nemployees.Name[3]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n\"Frank\"\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Exercise 2.1 - Access the `Age` Column\n\nAccess the `Age` column from the DataFrame and save it in a new variable `ages`.\n\n\n\n\n\n\n\n\n::: {#16 .cell execution_count=0}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n\n```\n:::\n\n\n\n::: {#18 .cell execution_count=0}\n``` {.julia .cell-code code-fold=\"true\"}\n# Test your answer\n@assert ages == [28, 23, 37]\nprintln(\"Correct, the Ages column is: \", ages)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n## Exercise 2.2 - Update John's Salary\n\nUpdate John's salary to `59000`.\n\n\n\n\n\n\n\n\n::: {#20 .cell execution_count=0}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n\n```\n:::\n\n\n\n::: {#22 .cell execution_count=0}\n``` {.julia .cell-code code-fold=\"true\"}\n# Test your answer\n@assert employees.Salary[1] == 59000\nprintln(\"Modified DataFrame: \")\nprintln(employees)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Section 3 - Filtering Data\n\nLogical indexing can be used to filter rows in a DataFrame based on conditions. To filter the DataFrame to include only employees names \"Frank\" we could do:\n\n\n\n\n\n\n\n\n::: {#24 .cell execution_count=1}\n``` {.julia .cell-code}\nallFranks = employees[employees.Name .== \"Frank\", :]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><div style = \"float: left;\"><span>1×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Name</th><th style = \"text-align: left;\">Age</th><th style = \"text-align: left;\">Salary</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">Frank</td><td style = \"text-align: right;\">37</td><td style = \"text-align: right;\">90000</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nAlternatively, the filter function provides a powerful tool to extract subsets of \ndata based on a condition:\n\n\n\n\n\n\n\n\n::: {#26 .cell execution_count=1}\n``` {.julia .cell-code}\nallFranks = filter(row -> row.Name == \"Frank\", employees)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><div style = \"float: left;\"><span>1×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Name</th><th style = \"text-align: left;\">Age</th><th style = \"text-align: left;\">Salary</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">Frank</td><td style = \"text-align: right;\">37</td><td style = \"text-align: right;\">90000</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Exercise 3.1 - Filter the DataFrame\n\nFilter the DataFrame to include only employees with salaries above `60000`. Save the resulting employees in the DataFrame `high_earners`. \n\n\n\n\n\n\n\n\n::: {#28 .cell execution_count=0}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n\n```\n:::\n\n\n\n::: {#30 .cell execution_count=0}\n``` {.julia .cell-code code-fold=\"true\"}\n# Test your answer\n@assert nrow(high_earners) == 2\nprintln(\"High earners: \")\nprintln(high_earners)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Section 4 - Basic Data Manipulation\n\nJulia provides functions for basic data manipulation tasks, including sorting, grouping, and joining DataFrames. The `sort` function can be used to order the rows in a DataFrame based on the values in one or more columns. To see how to use the function, type `?` into the REPL (terminal) and type `sort`.\n\n## Exercise 4.1 - Sort the DataFrame\n\nSort the DataFrame based on the `Age` column and save it as `sorted_df`.\n\n\n\n\n\n\n\n\n::: {#32 .cell execution_count=0}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n\n```\n:::\n\n\n\n::: {#34 .cell execution_count=0}\n``` {.julia .cell-code code-fold=\"true\"}\n# Test your answer\n@assert sorted_df.Age[1] == 23\nprintln(\"DataFrame sorted by age: \")\nprintln(sorted_df)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n::: {.callout-tip}\nIf you have more complicated data structures, take a look at JSON files which can be used to work with all kind of differently structured data sets. \n:::\n\n# Section 5 - Loop over DataFrames\n\nSometimes, you might need to iterate over the rows of a DataFrame to perform operations on each row individually. Julia provides a convenient way to do this using the `eachrow` function. For example, if we want to check for each employee if they have a salary above 60000, we can do the following:\n\n\n\n\n\n\n\n\n::: {#36 .cell execution_count=1}\n``` {.julia .cell-code}\nfor row in eachrow(employees)\n    if row.Salary > 60000\n        println(\"$(row.Name) earns more than 60000\")\n    end\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMike earns more than 60000\nFrank earns more than 60000\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nHere, the `row` holds all the values of the row as a `NamedTuple`. We can access the values of a column then by using the dot syntax. To create a new column, we can use the `push!` function. For example, to create a new column called `VacationDays` in the `employees` DataFrame, we can do one of the following:\n\n\n\n\n\n\n\n\n::: {#38 .cell execution_count=1}\n``` {.julia .cell-code}\nemployees.VacationDays = [0 for row in eachrow(employees)]\nemployees.VacationDays .= 0\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3-element Vector{Int64}:\n 0\n 0\n 0\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Exercise 5.1 - Loop over DataFrame\n\nCreate a new column called `Bonus` in the `employees` DataFrame. The bonus should be calculated as 10% of the salary for employees over 30, and 5% for those 30 and under. Use a loop to iterate over the rows and calculate the bonus.\n\n\n\n\n\n\n\n\n::: {#40 .cell execution_count=0}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n\n```\n:::\n\n\n\n::: {#42 .cell execution_count=0}\n``` {.julia .cell-code code-fold=\"true\"}\n# Test your answer\n@assert filter(\n    row -> row.Bonus == 2950, \n    employees\n).Name == [\"John\"] \"John should have a bonus of 2950\"\n@assert filter(\n    row -> row.Bonus == 3100, \n    employees\n).Name == [\"Mike\"] \"Mike should have a bonus of 3100\"\n@assert filter(\n    row -> row.Bonus == 9000, \n    employees\n).Name == [\"Frank\"] \"Frank should have a bonus of 9000\"\nprintln(\"Great job! All the bonuses are correct!\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Section 6 - Filling a new DataFrame with values\n\nDo you remember the `push!` function? We can use it to fill a new DataFrame with values. For example, we can create a new DataFrame called `WorkingHours` and fill it with the values from the `employees` DataFrame. Imagine that the company has a policy, where employees above 30 work 30 hours a week, and employees under 30 work 40 hours a week:\n\n\n\n\n\n\n\n\n::: {#44 .cell execution_count=1}\n``` {.julia .cell-code}\n# Create a new DataFrame\nWorkingHours = DataFrame(\n    Name = String[],\n    Hours = Int[]\n)\n# Loop over the rows of the employees DataFrame\nfor row in eachrow(employees)\n    if row.Age < 30\n        push!(WorkingHours, (\n            Name = row.Name, \n            Hours = 40\n        ))\n    else\n        push!(WorkingHours, (\n            Name = row.Name, \n            Hours = 30\n        ))\n    end\nend\nprintln(WorkingHours)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3×2 DataFrame\n Row │ Name    Hours \n     │ String  Int64 \n─────┼───────────────\n   1 │ John       40\n   2 │ Mike       40\n   3 │ Frank      30\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n# Conclusion\n\nFantastic work! You've completed the tutorial on DataFrames in Julia. You've seen how to create DataFrames and access, modify and filter data. Continue to the next file to learn more.\n\n\n# Solutions\n\nYou will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching explicitly for the exact answers to the exercises. Understanding someone else's solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\n\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don't hesitate to ask for clarification during class discussions.\n\nLater, you will find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them in next week's tutorial. To access the solutions, click on the Github button on the lower right and search for the folder with today's lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. But please remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.\n\n---\njupyter:\n  kernelspec:\n    display_name: Julia\n    name: julia\n    language: julia\n  kernel_info:\n    name: julia\n  language_info:\n    name: julia\n    version: 1.10.5\n    codemirror_mode: julia\n---\n",
    "supporting": [
      "tutorial-03-03-DataFrames_files/figure-ipynb"
    ],
    "filters": []
  }
}