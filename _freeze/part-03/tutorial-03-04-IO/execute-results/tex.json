{
  "hash": "ed407e98bf43a0fcc7caf23e9b689450",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Tutorial III.IV - Input and Output\"\nsubtitle: \"Applied Optimization with Julia\"\n\nformat:\n    html:\n        theme: litera\n        highlight-style: arrow\n        linkcolor: \"#a60000\"\n        code-copy: true\n        code-link: true\n        toc: true\n        toc-location: right\n        code-overflow: wrap\n    pdf: \n        documentclass: report\n        geometry:\n            - margin=1in\n        fontfamily: roboto\n        fontfamilyoptions: sfdefault\n        colorlinks: true\n    ipynb:\n        code-copy: true\n        code-overflow: wrap\n\nengine: julia\n---\n\n\n\n\n\n\n\n\n# Introduction\n\nWelcome to this interactive Julia tutorial on working with external files! File Input/Output (I/O) operations are crucial in programming and data analysis, allowing us to persist data, share information between programs, and work with large datasets that don't fit in memory. In this tutorial, we'll cover reading and writing text files, handling CSV files, and working with delimited files using various Julia packages. These skills are fundamental for data preprocessing, analysis, and result storage in real-world applications.\n\nFollow the instructions, write your code in the designated code blocks, and validate your results with `@assert` statements.\n\n\n# Section 1 - Working with Delimited Files\n\nDelimited files, such as CSV (Comma-Separated Values), are a common way to store structured data. Each value in the file is separated by a specific character, often a comma. Julia's DelimitedFiles package makes it easy to work with these files.\n\n::: {.callout-tip}\nThe DelimitedFiles package is part of Julia's Standard Library, which means you can use it without installing anything extra!\n:::\n\n\n\n\n\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing DelimitedFiles\n```\n:::\n\n\n\n\n\n\n\n\n\n\nNow, let's create a simple matrix and save it as a CSV file:\n\n\n\n\n\n\n\n\n::: {.cell execution_count=0}\n``` {.julia .cell-code}\n# Create a 3x3 matrix\nnew_data = [10 12 6; 13 25 1; 40 30 7]\n\n# Create a new folder called \"ExampleData\"\nmkdir(\"$(@__DIR__)/ExampleData\")\n\n# Write the matrix to a CSV file\nopen(\"$(@__DIR__)/ExampleData/matrix.csv\", \"w\") do io\n    writedlm(io, new_data, ',')\nend\n\nprintln(\"CSV file 'matrix.csv' written successfully to folder ExampleData!\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n::: {.callout-note}\nNote, that we used the `@__DIR__` macro to get the directory of the current file. This is a convenient way to ensure that the file path is correct, no matter where you run the script from. The reason is, that the `@__DIR__` macro returns the directory of the file in which the macro is called, not the directory of the script you are running.\n:::\n\n## Exercise 1.1 - Read a CSV File\n\nNow it's your turn! Let's read the CSV file we just created.\n\n::: {.callout-tip}\nTo learn how to use a Julia function, you can type `?` followed by the function name in the REPL (Julia's command-line interface). For example, `?readdlm` will show you information about the `readdlm()` function.\n:::\n\nUse the `readdlm()` function to read the 'matrix.csv' file we just created. Save the result in a variable called `read_matrix`.\n\n\n\n\n\n\n\n\n\n::: {.cell execution_count=0}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n# Don't forget to use the @__DIR__ macro to get the correct file path!\n\n```\n:::\n\n\n\n::: {.cell execution_count=0}\n``` {.julia .cell-code code-fold=\"true\"}\n# Test your answer\n@assert read_matrix == new_data\nprintln(\"File 'matrix.csv' read successfully!\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Section 2 - Working with CSV Files and DataFrames\n\nThe CSV package in Julia provides powerful tools for reading and writing CSV files to and from DataFrames, a common requirement in data analysis and data science projects. This requires the CSV and DataFrames packages. If you solely followed the course so far, you first have to install the CSV Package before you can start using it:\n\n\n\n\n\n\n\n\n::: {.cell execution_count=0}\n``` {.julia .cell-code}\nimport Pkg; Pkg.add(\"CSV\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n## Exercise 2.1 - Write a DataFrame to a CSV File\n\nWrite the following given DataFrame to a CSV file `table_out.csv` in the folder `ExampleData`. This can be done by using the function `CSV.write()`. To learn the syntax, ask the inbuild help with `?` and the function name.\n\n\n\n\n\n\n\n\n::: {.cell execution_count=0}\n``` {.julia .cell-code}\nusing CSV, DataFrames\ndata = DataFrame(Name = [\"Elio\", \"Bob\", \"Yola\"], Age = [18, 25, 29])\ncsv_file_path = \"$(@__DIR__)/ExampleData/table_out.csv\"\n# YOUR CODE BELOW\n\n```\n:::\n\n\n\n::: {.cell execution_count=0}\n``` {.julia .cell-code code-fold=\"true\"}\n# Test your answer\n@assert isfile(\"ExampleData/table_out.csv\") \"Sorry, the file could not be found. \n    Have you followed all steps?\"\nprintln(\"CSV file 'data.csv' written successfully!\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n## Exercise 2.2 - Read a CSV File in\n\nRead the CSV file `table_out.csv` in the folder `ExampleData` into the variable `read_data`. Here you can use the function `CSV.read()`, e.g.:\n\n```julia\nread_data = CSV.read(\"Path/datatable.csv\", DataFrame)\n```\n\n::: {.callout-note}\nNote, that you need to provide a sink for the data when using `CSV.read()`, e.g. a DataFrame.\n:::\n\n\n\n\n\n\n\n\n\n::: {.cell execution_count=0}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n# Again, don't forget to use the @__DIR__ macro to get the correct file path!\n\n```\n:::\n\n\n\n::: {.cell execution_count=0}\n``` {.julia .cell-code code-fold=\"true\"}\n# Test your answer\n@assert read_data[1,1] == \"Elio\"\nprintln(\"CSV file 'table_out.csv' read successfully!\")\n```\n:::\n\n\n\n\n\n\n\n\n\n# Conclusion\n\nCongratulations! You've successfully completed the tutorial on reading and writing external files in Julia. Continue to the next file to learn more.\n\n\n# Solutions\n\nYou will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching explicitly for the exact answers to the exercises. Understanding someone else's solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\n\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don't hesitate to ask for clarification during class discussions.\n\nLater, you will find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them in next week's tutorial. To access the solutions, click on the Github button on the lower right and search for the folder with today's lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. But please remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.\n\n",
    "supporting": [
      "tutorial-03-04-IO_files/figure-pdf"
    ],
    "filters": []
  }
}