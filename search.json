[
  {
    "objectID": "tutorials/tutorial-13-recap.html#julia-programming-experience",
    "href": "tutorials/tutorial-13-recap.html#julia-programming-experience",
    "title": "Tutorial XIII - Recap and Discussion",
    "section": "Julia Programming Experience",
    "text": "Julia Programming Experience\nAs this course introduced many of you to Julia programming, I’m particularly interested in your experience learning and working with this language. Your feedback will help determine if Julia remains the right choice for future iterations of this course and what additional programming support might be needed.\n\nHow did you find the learning experience of Julia in this course?\nWhat were the greatest challenges you faced while learning Julia?\nShould I have used a different programming language for this course?\nShould we have covered programming with AI in this course?",
    "crumbs": [
      "13 Recap",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-13-recap.html#course-content-and-structure",
    "href": "tutorials/tutorial-13-recap.html#course-content-and-structure",
    "title": "Tutorial XIII - Recap and Discussion",
    "section": "Course Content and Structure",
    "text": "Course Content and Structure\nThe course covered a wide range of optimization topics, from basic concepts to advanced applications. I’d like to understand which parts resonated with you and which areas might need adjustment in terms of depth and clarity.\n\nWhich topics would you have preferred to explore in more depth?\nWas there any topic you felt was covered too much?\nWhich of the topics would you recommend removing in exchange for a new topic in the future?\nHow could the tutorial instructions be improved for clarity?",
    "crumbs": [
      "13 Recap",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-13-recap.html#learning-experience",
    "href": "tutorials/tutorial-13-recap.html#learning-experience",
    "title": "Tutorial XIII - Recap and Discussion",
    "section": "Learning Experience",
    "text": "Learning Experience\nThe course utilized a web-based format with interactive elements and a bonus point system. Your feedback on these teaching methods and course mechanics will be valuable for improving the learning experience.\n\nHow did you find the website format for learning the material?\nWhat additional elements would enhance your learning?\nHow could the teaching of the course be improved?\nHow could the bonus point system be improved?",
    "crumbs": [
      "13 Recap",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-13-recap.html#future-improvements",
    "href": "tutorials/tutorial-13-recap.html#future-improvements",
    "title": "Tutorial XIII - Recap and Discussion",
    "section": "Future Improvements",
    "text": "Future Improvements\nLooking ahead, I want to ensure this course continues to evolve and meet students’ needs. Your suggestions for future developments and overall reflections will help shape the course’s direction.\n\nWhat type of exam would best demonstrate your understanding?\nPlease summarize your overall experience with the course?\nIs there any course at the university you would like to see in the future?\nHave I missed anything important? Here is your chance!",
    "crumbs": [
      "13 Recap",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-11-distancing.html#the-venue-layout",
    "href": "tutorials/tutorial-11-distancing.html#the-venue-layout",
    "title": "Tutorial XI - Arena Seat Planning under Distancing Rules",
    "section": "The Venue Layout",
    "text": "The Venue Layout\nHere’s our event venue’s seating arrangement, as we have used in the lecture:\n\n\n\nEach white square represents an available seat, while grey squares are blocked",
    "crumbs": [
      "11 Distancing",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-11-distancing.html#group-types-and-their-characteristics",
    "href": "tutorials/tutorial-11-distancing.html#group-types-and-their-characteristics",
    "title": "Tutorial XI - Arena Seat Planning under Distancing Rules",
    "section": "Group Types and Their Characteristics",
    "text": "Group Types and Their Characteristics\nWe have different types of groups wanting to attend the event:\n\nSingles (Type ‘a’): Solo attendees\nCouples (Types ‘b’ and ‘c’): Two people travelling together\nSmall families (Types ‘d’ and ‘e’): Groups of four\nLarge families (Types ‘f’ and ‘g’): Groups of six\n\nEach group type has:\n\nA different ticket value (score)\nLimited availability (how many such groups want tickets)\nSpace requirements (how many consecutive seats they need)\n\nAs we approach the end of the course, we’ll remove some previous “guardrails” to give you more freedom in solving the problem.\n\n\n\n\n\n\nDon’t worry, if you cannot solve everything by yourself. Try your best and ask for help if you need it!",
    "crumbs": [
      "11 Distancing",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-11-distancing.html#distance-requirements",
    "href": "tutorials/tutorial-11-distancing.html#distance-requirements",
    "title": "Tutorial XI - Arena Seat Planning under Distancing Rules",
    "section": "Distance Requirements",
    "text": "Distance Requirements\nThe following distancing rules must be maintained:\n\nMinimum one empty seat between groups\nOne empty seat between rows\nOne empty seat diagonally\nMaximum two groups per row\nGrey seats are obstacles and cannot be used\n\n\n\n\n\n\n\nImportantCommon Pitfalls\n\n\n\nWatch out for the edge cases when implementing distancing constraints - especially around blocked seats!",
    "crumbs": [
      "11 Distancing",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-11-distancing.html#define-the-model",
    "href": "tutorials/tutorial-11-distancing.html#define-the-model",
    "title": "Tutorial XI - Arena Seat Planning under Distancing Rules",
    "section": "Define the Model",
    "text": "Define the Model\n\n\n\n\n\n\nThe groups are given differently than in the lecture! Either adjust the data or the model, depending on what you think is easier.\n\n\n\n\nusing JuMP\nusing HiGHS\n\n# Model\narena_model = Model(HiGHS.Optimizer)\n\n# Sets\nrow_set = 1:10\ncol_set = 1:10\n\n# Group data\ngroups = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\"]\nreq_seats = Dict(\n    \"a\" =&gt; 1,\n    \"b\" =&gt; 2,\n    \"c\" =&gt; 2,\n    \"d\" =&gt; 4,\n    \"e\" =&gt; 4,\n    \"f\" =&gt; 6,\n    \"g\" =&gt; 6)\nscores = Dict(\n    \"a\" =&gt; 1,\n    \"b\" =&gt; 2,\n    \"c\" =&gt; 4,\n    \"d\" =&gt; 4,\n    \"e\" =&gt; 5,\n    \"f\" =&gt; 6,\n    \"g\" =&gt; 12)\navailability = Dict(\n    \"a\" =&gt; 3,\n    \"b\" =&gt; 2,\n    \"c\" =&gt; 3,\n    \"d\" =&gt; 5,\n    \"e\" =&gt; 2,\n    \"f\" =&gt; 1,\n    \"g\" =&gt; 1)\n\n# Blocked seats (coordinates [row, column])\nblocked_seats = [\n    (1, 1),(1, 2),(1,9),(1,10),\n    (2, 1),(2, 10),\n    (6, 5),(6,6),\n    (7, 5),(7,6),\n]\n\n# Variables\n@variable(arena_model, x[groups, row_set, col_set], Bin)\n\n# YOUR CODE BELOW\n\n# Suggested structure:\n# 1. Create parameters\n# 2. Set objective function\n# 3. Add constraints\n# 4. Solve the model",
    "crumbs": [
      "11 Distancing",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-11-distancing.html#visualization",
    "href": "tutorials/tutorial-11-distancing.html#visualization",
    "title": "Tutorial XI - Arena Seat Planning under Distancing Rules",
    "section": "Visualization",
    "text": "Visualization\nTo test your solution, visualize it with a plot in Julia. The visualization is a great tool to check if your solution is correct. We figure it is likely, that you won’t have an applicable solution after the first round, even if your model is working correctly. If everything works from the start, great!\n\nusing Plots\n\n# Create visualization of the solution\nfunction visualize_seating(model)\n    # Get solution values\n    solution_matrix = fill(\"\", 10, 10)\n\n    # Fill matrix with group assignments\n    for r in 1:10, c in 1:10\n        for g in groups\n            if value(model[:x][g,r,c]) &gt; 0.5  # Using 0.5 to handle floating point\n                solution_matrix[r,c] = g\n            end\n        end\n    end\n\n    # Create color mapping for groups\n    color_map = Dict(\n        \"\" =&gt; :white,  # Empty seats\n        \"a\" =&gt; :blue,\n        \"b\" =&gt; :green,\n        \"c\" =&gt; :red,\n        \"d\" =&gt; :purple,\n        \"e\" =&gt; :orange,\n        \"f\" =&gt; :yellow,\n        \"g\" =&gt; :pink\n    )\n\n    # Mark blocked seats\n    for (r,c) in blocked_seats\n        solution_matrix[r,c] = \"\"  # Empty string for blocked seats\n    end\n\n    # Create plot\n    p = plot(\n        aspect_ratio=:equal,\n        xlims=(0.5,10.5),\n        ylims=(0.5,10.5),\n        yflip=true,  # Flip y-axis to match traditional seating layout\n        legend=:outerright\n    )\n\n    # Plot seats\n    for r in 1:10, c in 1:10\n        group = solution_matrix[r,c]\n        if group != \"\"\n            group_length = req_seats[group]\n            for i in 1:group_length\n                if c+i-1 &lt;= 10\n                    println(\"Group $group in $r,$(c+i-1)\")\n                    scatter!([c+i-1], [r],\n                            color=color_map[group],\n                            label=nothing,\n                            markersize=10,\n                            markershape=:square)\n                end\n            end\n        else\n            # Plot empty or blocked seats\n            is_blocked = (r,c) in blocked_seats\n            if is_blocked\n                println(\"Blocked seat in $r,$c\")\n                scatter!([c], [r],\n                        color=is_blocked ? :gray : :white,\n                        markersize=10,\n                        markershape=:square,\n                        label= nothing)\n            end\n        end\n    end\n\n    title!(\"Arena Seating Layout\")\n    xlabel!(\"Column\")\n    ylabel!(\"Row\")\n\n    return p\nend\n\n# Display the visualization\np = visualize_seating(arena_model)\ndisplay(p)\n\nIf you encounter any difficulties ad cannot solve the problem, please document your issues here:\n\n#=\n\n\n\n=#",
    "crumbs": [
      "11 Distancing",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-09-safety.html",
    "href": "tutorials/tutorial-09-safety.html",
    "title": "Tutorial IX - Safety Planning for the Islamic Pilgrimage in Mecca",
    "section": "",
    "text": "The Hajj, one of the world’s largest religious gatherings, presents fascinating and very important optimization challenges. During this annual pilgrimage to Mecca, millions of Muslims perform sacred rituals, including the symbolic stoning of the devil. Your task is to create an efficient scheduling system that ensures both safety and spiritual fulfillment for all pilgrims.\n\n\nYou’re responsible for scheduling 15 pilgrim groups \\(\\mathcal{S} \\in \\{g1,g2,...,g15\\}\\) across 6 time periods \\(\\mathcal{T} \\in \\{t1,t2,...,t6\\}\\) for the Jamarat ritual.\nThe groups \\(\\mathcal{S}\\) reside in two different camps \\(\\mathcal{C} \\in \\{A,B\\}\\). The first 6 groups are in camp A while the other groups are in camp B. Each camp has only one path \\(\\mathcal{P} \\in \\{A-S-A,B-S-B\\}\\) and both paths have only one resource \\(\\mathcal{R}\\), the stoning of the devil.\nThe capacity of the stoning is 10,000 pilgrims per period and there is no period offset between the stoning and the capacity utilization. Each group can stone the devil in any period \\(t\\).\nTo constrain the fluctuation of the resource utilization \\(\\sigma\\) was set to 0.3 while the first period is not constrained. Consider that the number of pilgrims per group \\(s\\) and the penalty value \\(f_{s,t}\\) are given.",
    "crumbs": [
      "09 Safety",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-09-safety.html#the-challenge",
    "href": "tutorials/tutorial-09-safety.html#the-challenge",
    "title": "Tutorial IX - Safety Planning for the Islamic Pilgrimage in Mecca",
    "section": "",
    "text": "You’re responsible for scheduling 15 pilgrim groups \\(\\mathcal{S} \\in \\{g1,g2,...,g15\\}\\) across 6 time periods \\(\\mathcal{T} \\in \\{t1,t2,...,t6\\}\\) for the Jamarat ritual.\nThe groups \\(\\mathcal{S}\\) reside in two different camps \\(\\mathcal{C} \\in \\{A,B\\}\\). The first 6 groups are in camp A while the other groups are in camp B. Each camp has only one path \\(\\mathcal{P} \\in \\{A-S-A,B-S-B\\}\\) and both paths have only one resource \\(\\mathcal{R}\\), the stoning of the devil.\nThe capacity of the stoning is 10,000 pilgrims per period and there is no period offset between the stoning and the capacity utilization. Each group can stone the devil in any period \\(t\\).\nTo constrain the fluctuation of the resource utilization \\(\\sigma\\) was set to 0.3 while the first period is not constrained. Consider that the number of pilgrims per group \\(s\\) and the penalty value \\(f_{s,t}\\) are given.",
    "crumbs": [
      "09 Safety",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-09-safety.html#load-the-data",
    "href": "tutorials/tutorial-09-safety.html#load-the-data",
    "title": "Tutorial IX - Safety Planning for the Islamic Pilgrimage in Mecca",
    "section": "Load the Data",
    "text": "Load the Data\nStart by loading the data into the notebook for the number of pilgrims per group and the penalty value per group per period.\n\n# YOUR CODE BELOW",
    "crumbs": [
      "09 Safety",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-09-safety.html#define-all-sets-parameters-and-variables",
    "href": "tutorials/tutorial-09-safety.html#define-all-sets-parameters-and-variables",
    "title": "Tutorial IX - Safety Planning for the Islamic Pilgrimage in Mecca",
    "section": "Define all Sets, Parameters and Variables",
    "text": "Define all Sets, Parameters and Variables\nPlease define all sets, parameters and variables you are going to use in the following cell. Make sure to read the task above carefully, as the problem can be modelled much simpler than the full model from the lecture, due to certain properties of the problem.\n\n# YOUR CODE BELOW",
    "crumbs": [
      "09 Safety",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-09-safety.html#define-the-model",
    "href": "tutorials/tutorial-09-safety.html#define-the-model",
    "title": "Tutorial IX - Safety Planning for the Islamic Pilgrimage in Mecca",
    "section": "Define the Model",
    "text": "Define the Model\nDefine the objective function and all constraints of the model in the following cell.\n\n# YOUR CODE BELOW",
    "crumbs": [
      "09 Safety",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-09-safety.html#solve-the-model",
    "href": "tutorials/tutorial-09-safety.html#solve-the-model",
    "title": "Tutorial IX - Safety Planning for the Islamic Pilgrimage in Mecca",
    "section": "Solve the Model",
    "text": "Solve the Model\nSolve the model and print the results. What is the total dissatisfaction with the resulting timetable?\n\n# YOUR CODE BELOW\n\n\n\n\n\n\n\nIf you end up with an objective value of approximately 7, you have likely found the optimal solution to the problem.",
    "crumbs": [
      "09 Safety",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-09-safety.html#analyze-the-results",
    "href": "tutorials/tutorial-09-safety.html#analyze-the-results",
    "title": "Tutorial IX - Safety Planning for the Islamic Pilgrimage in Mecca",
    "section": "Analyze the Results",
    "text": "Analyze the Results\nPlot the utilization of the resource by using the Plots package.\n\n# YOUR CODE BELOW\n\nFinally, reflect in a few sentences on the simplifications you made to the model and how they affected the solution.\n\n#=\n\n\n\n=#",
    "crumbs": [
      "09 Safety",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-07-routing.html",
    "href": "tutorials/tutorial-07-routing.html",
    "title": "Tutorial VII - Periodic Library Routing",
    "section": "",
    "text": "Welcome to “FastDelivery” - a local logistics service in Hamburg! We’re working with a central warehouse that operates a decentralized distribution network: they deliver packages directly to smaller distribution centers in the region, ensuring efficient last-mile delivery across the area.\nThe central warehouse operates a fleet of delivery vehicles that transport packages between their main hub and 14 partner distribution centers scattered across the region. The challenge? Designing the most efficient routing system to keep packages flowing smoothly while keeping operational costs in check.\nIn this case study, we’ll help FastDelivery optimize their delivery routes using the Capacitated Vehicle Routing Problem (CVRP) approach. We’ll consider several real-world constraints like vehicle capacity (measured in standard shipping containers), driving distances, and operational costs to find the best possible delivery strategy.",
    "crumbs": [
      "07 Routing",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-07-routing.html#loading-the-data",
    "href": "tutorials/tutorial-07-routing.html#loading-the-data",
    "title": "Tutorial VII - Periodic Library Routing",
    "section": "Loading the data",
    "text": "Loading the data\nFirst, we need to load the required packages and data files. Make sure you have the following files in the data directory that is located in the same directory as this notebook:\n\nrouting-demand.csv: Contains demand per distribution center\ncoord_x_y.csv: Contains location coordinates\n\n\nusing DelimitedFiles\nusing CSV\nusing DataFrames\nusing JuMP\nusing HiGHS\nusing Plots\n\n## Prepare the model data\nfile_directory = \"$(@__DIR__)/data\"\ndemand = CSV.read(\"$(file_directory)/routing-demand.csv\", DataFrame)\ncoord = CSV.read(\"$(file_directory)/coord_x_y.csv\", DataFrame)\n\n15×3 DataFrame\n\n\n\nRow\nlocation\nx\ny\n\n\n\nString7\nFloat64\nFloat64\n\n\n\n\n1\ncentral\n155.24\n151.63\n\n\n2\ndc_01\n128.513\n67.4002\n\n\n3\ndc_02\n47.6949\n194.738\n\n\n4\ndc_03\n93.6483\n181.213\n\n\n5\ndc_04\n59.737\n166.434\n\n\n6\ndc_05\n197.681\n102.756\n\n\n7\ndc_06\n152.263\n140.986\n\n\n8\ndc_07\n183.943\n182.649\n\n\n9\ndc_08\n113.792\n33.3626\n\n\n10\ndc_09\n172.555\n82.9658\n\n\n11\ndc_10\n77.4372\n27.0503\n\n\n12\ndc_11\n132.689\n152.717\n\n\n13\ndc_12\n54.2646\n0.0399352\n\n\n14\ndc_13\n54.5474\n31.4915\n\n\n15\ndc_14\n66.5128\n100.22\n\n\n\n\n\n\n\n\n\n\n\n\nMake sure that you have downloaded the data in the data folder that is located in the same directory as this notebook.",
    "crumbs": [
      "07 Routing",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-07-routing.html#define-the-parameters",
    "href": "tutorials/tutorial-07-routing.html#define-the-parameters",
    "title": "Tutorial VII - Periodic Library Routing",
    "section": "Define the parameters",
    "text": "Define the parameters\nFirst, define the number of vehicles and the capacity as parameters. Name them vehicles and capacity.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your code\n@assert vehicles == 30/5 \"Number of vehicles is incorrect\"\n@assert capacity == 100/2 \"Capacity is incorrect\"\nprintln(\"Variables defined, great job!\")\n\n\nNow, we need to compute the distance matrix. You can do so by using the Euclidean distance between the coordinates of the locations. Compute the distance matrix for all locations and store it in a dictionary called distance. Access each location by the tuple (i,j) where i is the origin and j is the destination. Hint: You need the distance from each location to all other locations!\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your code\n@assert length(distance) == nrow(coord) * nrow(coord) \"Distance dictionary should have n² entries where n is the number of locations\"\n@assert all(v &gt;= 0 for v in values(distance)) \"All distances should be non-negative\"\n@assert all(isapprox(distance[(i,j)], distance[(j,i)]) for i in coord.location for j in coord.location if i != j) \"Distances should be symmetric\"\nprintln(\"Distance dictionary test passed successfully, great job!\")",
    "crumbs": [
      "07 Routing",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-07-routing.html#define-the-model",
    "href": "tutorials/tutorial-07-routing.html#define-the-model",
    "title": "Tutorial VII - Periodic Library Routing",
    "section": "Define the model",
    "text": "Define the model\nNext, we create the model instance. As this is a linear problem, we can use the HiGHS solver.\n\n# Create the model instance\ncvrp_model = Model(HiGHS.Optimizer)\nset_attribute(cvrp_model, \"presolve\", \"on\")\nset_attribute(cvrp_model, \"time_limit\", 60.0)\nset_attribute(cvrp_model, \"mip_rel_gap\", 0.0)",
    "crumbs": [
      "07 Routing",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-07-routing.html#define-the-variables",
    "href": "tutorials/tutorial-07-routing.html#define-the-variables",
    "title": "Tutorial VII - Periodic Library Routing",
    "section": "Define the variables",
    "text": "Define the variables\nNow you can start by defining the model variables. The variable we need first is the binary decision variable X which indicates whether an arc from node i to node j exists. To work with the decision variable, you will need to work with a vector of locations.\n\n# Vector of locations\nprintln(demand.location)\n\nString7[\"central\", \"dc_01\", \"dc_02\", \"dc_03\", \"dc_04\", \"dc_05\", \"dc_06\", \"dc_07\", \"dc_08\", \"dc_09\", \"dc_10\", \"dc_11\", \"dc_12\", \"dc_13\", \"dc_14\"]\n\n\n\n\n\n\n\n\nYou could use the demand.location vector to define the elements of the decision variable X.\n\n\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your code\n@assert size(X) == (15,15) \"Have you defined the decision variable X?\"\n@assert all(is_binary(x) for x in X) \"The decision variable X should be binary\"\nprintln(\"Decision variable X test passed successfully, great job!\")",
    "crumbs": [
      "07 Routing",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-07-routing.html#define-the-objective-function",
    "href": "tutorials/tutorial-07-routing.html#define-the-objective-function",
    "title": "Tutorial VII - Periodic Library Routing",
    "section": "Define the objective function",
    "text": "Define the objective function\nWe want to minimize the total distance of the routes based on the distance dictionary distance that you computed earlier. Create the objective function.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your code\nobj = objective_function(cvrp_model)\n@assert typeof(obj) &lt;: GenericAffExpr \"Objective should be a linear expression\"\n@assert length(obj.terms) &gt; 0 \"Objective should not be empty\"\nprintln(\"Objective function defined successfully, great job!\")\nprintln(\"Note, that it is not tested whether the objective function is correct!\")",
    "crumbs": [
      "07 Routing",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-07-routing.html#define-the-constraints",
    "href": "tutorials/tutorial-07-routing.html#define-the-constraints",
    "title": "Tutorial VII - Periodic Library Routing",
    "section": "Define the constraints",
    "text": "Define the constraints\nCreate the two set of constraints that ensure that each location is visited exactly once. Note that the central location is indexed as \"central\"! We don’t need to consider the central location for the constraints and we have to ensure during summing that we don’t include the pairs where i == j.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your code\nconst_refs = all_constraints(cvrp_model, include_variable_in_set_constraints=false)\nnum_constraints_in_model = length(const_refs)\nexpected_constraints = 2 * (nrow(demand) - 1)  # indegree + outdegree for all nodes except central\n@assert num_constraints_in_model == expected_constraints \"Number of constraints is incorrect as it is $(num_constraints_in_model) instead of $(expected_constraints).\"\nprintln(\"Constraints for the inflow and outflow defined, great job!\")\n\n\nNext, we need to restrict the ingoing and outgoing flows to the central location. Create the two constraints that ensure that the number of vehicles arriving and leaving the central location is equal to the number of vehicles.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your code\nconst_refs = all_constraints(cvrp_model, include_variable_in_set_constraints=false)\nnum_constraints_in_model = length(const_refs)\nexpected_constraints = 2 * (nrow(demand) - 1) + 2  # indegree + outdegree for all nodes except central + 2 for inflow and outflow\n@assert num_constraints_in_model == expected_constraints \"Number of constraints is incorrect as it is $(num_constraints_in_model) instead of $(expected_constraints).\"\nprintln(\"Constraints for the inflow and outflow defined, great job!\")",
    "crumbs": [
      "07 Routing",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-07-routing.html#solve-the-model",
    "href": "tutorials/tutorial-07-routing.html#solve-the-model",
    "title": "Tutorial VII - Periodic Library Routing",
    "section": "Solve the model",
    "text": "Solve the model\nNow, we can solve the model. This should work very fast, as the model is very simple without any subtour elimination constraints. Solve the model as usual.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# This defines a function that prints the status of the model\nfunction print_model_status(model)\n    begin\n        if termination_status(model) == OPTIMAL\n            println(\"Great, the solution is optimal.\")\n            println(\"The relative gap is $(relative_gap(model))\")\n            println(\"The solve time (in seconds) is $(solve_time(model))\")\n        elseif termination_status(model) == TIME_LIMIT && has_values(model)\n            println(\"Solution is suboptimal due to a time limit, but a primal solution is available\")\n        else\n            error(\"The model was not solved correctly.\")\n        end\n        println(\"The objective value is \", objective_value(model))\n    end\nend\n\n# Test your code\n@assert termination_status(cvrp_model) == OPTIMAL \"The model should be optimal. Have you have any mistakes in the model formulation?\"\nprint_model_status(cvrp_model)\nprintln(\"Model solved successfully, great job!\")",
    "crumbs": [
      "07 Routing",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-07-routing.html#plot-the-results",
    "href": "tutorials/tutorial-07-routing.html#plot-the-results",
    "title": "Tutorial VII - Periodic Library Routing",
    "section": "Plot the results",
    "text": "Plot the results\nThe following part extracts the results to plot the tours and requires no changes on your part. It defines some functions that are used to plot the results.\n\nfunction plot_routes(X, coord)\n\n    Routes = [value(X[i,j]) &gt;= 0.5 ? true : false for i in coord.location, j in coord.location]\n\n    fig = plot(\n        size=(800, 600),\n        background_color=:white,\n        framestyle=:box,\n        grid=false,\n        dpi=300\n    )\n\n    connections = findall(Routes -&gt; !iszero(Routes), Routes .&gt;= 0.5)\n\n    for conn in connections\n        xx = [coord[conn[1],:x]; coord[conn[2],:x]]\n        yy = [coord[conn[1],:y]; coord[conn[2],:y]]\n        plot!(\n            fig, xx, yy,\n            color=:crimson,\n            label=\"\",\n            linewidth=2,\n            linestyle=:solid,\n            alpha=0.7\n        )\n    end\n\n    scatter!(\n        fig, coord[1:1,:x], coord[1:1,:y],\n        marker=:star5,\n        color=:black,\n        markersize=15,\n        label=\"Central Library\",\n        markerstrokewidth=1\n    )\n    scatter!(\n        fig, coord[2:end,:x], coord[2:end,:y],\n        marker=:circle,\n        color=:steelblue,\n        markersize=8,\n        label=\"Libraries\",\n        markerstrokewidth=1\n    )\n\n    plot!(\n        fig,\n        title=\"Delivery Routes Optimization\",\n        xlabel=\"Distance (km)\",\n        ylabel=\"Distance (km)\",\n        legend=:bottomright,\n        legendfontsize=8,\n        foreground_color_legend=nothing,\n        background_color_legend=:transparent,\n        margin=5Plots.mm,\n        xlims=(minimum(coord.x) - 5, maximum(coord.x) + 5),\n        ylims=(minimum(coord.y) - 5, maximum(coord.y) + 5)\n    )\n\n    return fig\nend\n\n# Plot the routes\ndisplay(plot_routes(X,coord))",
    "crumbs": [
      "07 Routing",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-05-production.html",
    "href": "tutorials/tutorial-05-production.html",
    "title": "Tutorial V - Production Planning in Breweries",
    "section": "",
    "text": "Implement the CLSP from the lecture in Julia. Before we start, let’s load the necessary packages and data.\n\nusing JuMP, HiGHS\nusing CSV\nusing DelimitedFiles\nusing DataFrames\nusing Plots\nusing StatsPlots\nimport Pkg; Pkg.add(\"PlotlyBase\")\nplotly() # This will create interactive plots later on\n\n\n\n\n\n\n\nIf you haven’t installed the packages yet, you can do so by running using Pkg first and then Pkg.add(\"JuMP\"), Pkg.add(\"HiGHS\"), Pkg.add(\"DataFrames\"), Pkg.add(\"Plots\"), and Pkg.add(\"StatsPlots\").\n\n\n\n\n\n\n\nNow, let’s load the data. The weekly demand in bottles \\(d_{i,t}\\), the available time at the bottling plant in hours \\(a_t\\), the time required to bottle each beer in hours \\(b_i\\), and the setup time in hours \\(g_i\\) are provided as CSV files.\n\n# Get the directory of the current file\nfile_directory = \"$(@__DIR__)/data\"\n\n# Load the data about the available time at the bottling plant\navailableTime = CSV.read(\"$file_directory/availabletime.csv\", DataFrame)\nprintln(\"Number of periods: $(nrow(availableTime))\")\nprintln(\"First 5 rows of available time per period:\")\nprintln(availableTime[1:5, :])\n\n\nNumber of periods: 27\n\nFirst 5 rows of available time per period:\n\n5×2 DataFrame\n\n Row │ period   available_capacity \n\n     │ String7  Int64              \n\n─────┼─────────────────────────────\n\n   1 │ week_01                 168\n\n   2 │ week_02                 168\n\n   3 │ week_03                 168\n\n   4 │ week_04                 168\n\n   5 │ week_05                  48\n\n\n\n\n\n# Load the data about the bottling time for each beer\nbottlingTime = CSV.read(\"$file_directory/bottlingtime.csv\", DataFrame)\nprintln(\"Number of beers: $(nrow(bottlingTime))\")\nprintln(\"Bottling time per beer:\")\nprintln(bottlingTime)\n\n\nNumber of beers: 6\n\nBottling time per beer:\n\n6×2 DataFrame\n\n Row │ beer_type   bottling_time \n\n     │ String15    Float64       \n\n─────┼───────────────────────────\n\n   1 │ Pilsener          0.00222\n\n   2 │ Blonde_Ale        0.00111\n\n   3 │ Amber_Ale         0.00139\n\n   4 │ Brown_Ale         0.00222\n\n   5 │ Porter            0.00167\n\n   6 │ Stout             0.00111\n\n\n\n\n\n# Load the data about the setup time for each beer\nsetupTime = CSV.read(\"$file_directory/setuptime.csv\", DataFrame)\nprintln(\"Setup time per beer:\")\nprintln(setupTime)\n\n\nSetup time per beer:\n\n6×2 DataFrame\n\n Row │ beer_type   setup_time \n\n     │ String15    Int64      \n\n─────┼────────────────────────\n\n   1 │ Pilsener            10\n\n   2 │ Blonde_Ale          11\n\n   3 │ Amber_Ale            8\n\n   4 │ Brown_Ale            8\n\n   5 │ Porter              11\n\n   6 │ Stout                9\n\n\n\n\n\n# Load the data about the weekly demand for each beer\ndemandCustomers = CSV.read(\"$file_directory/demand.csv\", DataFrame)\nprintln(\"First 5 rows of demand per beer:\")\nprintln(demandCustomers[1:5, :])\n\n\nFirst 5 rows of demand per beer:\n\n5×3 DataFrame\n\n Row │ beer_type   period   demand \n\n     │ String15    String7  Int64  \n\n─────┼─────────────────────────────\n\n   1 │ Pilsener    week_01    3853\n\n   2 │ Blonde_Ale  week_01    8372\n\n   3 │ Amber_Ale   week_01   16822\n\n   4 │ Brown_Ale   week_01   13880\n\n   5 │ Porter      week_01   10642\n\n\n\n\n\n\n\n\nConsider in your implementation, that each hour of setup is associated with a cost of 1000 Euros, and the inventory holding cost for unsold bottles at the end of each period is 0.1 Euro per bottle. Implement both parameters for the cost of setup and the inventory holding cost in the model. Call them setupHourCosts and warehouseCosts.\n\n# YOUR CODE BELOW\n\nNext, you need to prepare the given data for the model. Create a dictionary for the available time, bottling time, and setup time. Call them dictAvailableTime, dictBottlingTime, and dictSetupTime.\n\n# Prepare the data for the model\ndictDemand = Dict((row.beer_type,row.period) =&gt; row.demand for row in eachrow(demandCustomers))\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Validate your solution\n@assert length(dictAvailableTime) == nrow(availableTime) \"Available time dictionary should have same length as input data\"\n@assert length(dictBottlingTime) == nrow(bottlingTime) \"Bottling time dictionary should have same length as input data\"\n@assert length(dictSetupTime) == nrow(setupTime) \"Setup time dictionary should have same length as input data\"\n\n# Check that all values are positive\n@assert all(v -&gt; v &gt; 0, values(dictAvailableTime)) \"All available time values must be positive\"\n@assert all(v -&gt; v &gt; 0, values(dictBottlingTime)) \"All bottling time values must be positive\"\n@assert all(v -&gt; v &gt; 0, values(dictSetupTime)) \"All setup time values must be positive\"\n\n# Check that dictionaries contain all expected keys\n@assert all(p -&gt; haskey(dictAvailableTime, p), availableTime.period) \"Missing periods in available time dictionary\"\n@assert all(b -&gt; haskey(dictBottlingTime, b), bottlingTime.beer_type) \"Missing beer types in bottling time dictionary\"\n@assert all(b -&gt; haskey(dictSetupTime, b), setupTime.beer_type) \"Missing beer types in setup time dictionary\"\n\n\n\n\n\n\nNext, we define the model instance for the CLSP.\n\n# Prepare the model instance\nlotsizeModel = Model(HiGHS.Optimizer)\nset_attribute(lotsizeModel, \"presolve\", \"on\")\nset_time_limit_sec(lotsizeModel, 60.0)\n\n\n\n\n\nNow, create your variables. Please name them productBottled for the binary variable, productQuantity for the production quantity and WarehouseStockPeriodEnd for the warehouse stock at the end of each period. We will use these names later in the code to plot the results.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Validate your solution\n# Check if variables exist in the model\n@assert haskey(lotsizeModel.obj_dict, :productBottled) \"productBottled variable not found in model\"\n@assert haskey(lotsizeModel.obj_dict, :productQuantity) \"productQuantity variable not found in model\"\n@assert haskey(lotsizeModel.obj_dict, :WarehouseStockPeriodEnd) \"WarehouseStockPeriodEnd variable not found in model\"\n\n# Check variable dimensions\n@assert length(productBottled) == length(dictBottlingTime) * length(dictAvailableTime) \"Incorrect dimensions for productBottled\"\n@assert length(productQuantity) == length(dictBottlingTime) * length(dictAvailableTime) \"Incorrect dimensions for productQuantity\"\n@assert length(WarehouseStockPeriodEnd) == length(dictBottlingTime) * length(dictAvailableTime) \"Incorrect dimensions for WarehouseStockPeriodEnd\"\n\n# Check variable types\n@assert all(is_binary, productBottled) \"productBottled must be binary variables\"\n@assert all(is_integer, productQuantity) == false \"productQuantity must be continuous variables\"\n@assert all(is_integer, WarehouseStockPeriodEnd) == false \"WarehouseStockPeriodEnd must be continuous variables\"\n\n\n\n\n\n\nNext, define the objective function.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Validate your solution\n# Check if the model has an objective\n@assert objective_function(lotsizeModel) !== nothing \"Model must have an objective function\"\n\n# Check if it's a minimization problem\n@assert objective_sense(lotsizeModel) == MOI.MIN_SENSE \"Objective should be minimization\"\n\n# Check if the objective function contains both cost components\nobj_expr = objective_function(lotsizeModel)\n@assert contains(string(obj_expr), \"productBottled\") \"Objective must include setup costs (productBottled)\"\n@assert contains(string(obj_expr), \"WarehouseStockPeriodEnd\") \"Objective must include warehouse costs (WarehouseStockPeriodEnd)\"\n\n\n\n\n\n\nNow, we need to define all necessary constraints for the model. Start with the demand/inventory balance constraint.\n\n\n\n\n\n\nThe first period is special, as it does not have a previous period. Furthermore, we are working with strings as variable references, thus we cannot use t-1 directly as in the lecture. To address this, we could collect and sort all keys and then use their indices to address the previous period. For example, all_periods[t-1] would then be the previous period, if we index t just as a range from 2:length(all_periods).\n\n\n\n\n# Get the first period and all periods\nfirst_period = first(sort(collect(keys(dictAvailableTime))))\nall_periods = sort(collect(keys(dictAvailableTime)))\n\nWith these, we can now define the demand/inventory balance constraint. As this is the first constraint and might be a bit tricky, the solution is already given below.\n\n# Inventory balance constraints for periods after first period\n@constraint(lotsizeModel,\n    demandBalance[i=keys(dictBottlingTime), t=2:length(all_periods)],\n    WarehouseStockPeriodEnd[i,all_periods[t-1]] + productQuantity[i,all_periods[t]] - WarehouseStockPeriodEnd[i,all_periods[t]] == dictDemand[i,all_periods[t]]\n    )\n\nNext, we need to ensure that we setup the production for a beer type only if we bottle the type at least once.\n\n# YOUR CODE BELOW\n\nLast, we need to define the constraint that limits the production quantity to the number of bottles that can be bottled within the available time.\n\n# YOUR CODE BELOW\n\n\n\n\n\nFinally, implement the solve statement for your model instance.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Validate your solution\n@assert 600000 &lt;= objective_value(lotsizeModel) &lt;= 700000 \"Objective value should be between 600,000 and 700,000\"\n\n\nNow, unfortunately we cannot assert the value of the objective function perfectly here as we have to abort the computation due to the time limit and everybody is likely getting different results. The solution for the first task will likely be in the range of 600,000 to 700,000. If your model is solved within seconds, your formulation is not correct.\n\n\n\n\nThe following code creates production and warehouse plots for you. Use it to verify and visualize your solution in the following tasks.\n\n\n\n\n\n\nThe creation of the dataframes and the plots is implemented inside of a function, as we will need to use it multiple times in the following tasks.\n\n\n\n\n# Create the production results\nfunction create_production_results()\n    # Create a DataFrame to store the results\n    productionResults = DataFrame(\n        period = String[],\n        product = String[],\n        productBottled = Bool[],\n        productQuantity=Int[],\n        WarehouseStockPeriodEnd=Int[]\n    )\n\n    # Populate the DataFrame with the results\n    for i in keys(dictSetupTime)\n        for t in keys(dictAvailableTime)\n            push!(\n                productionResults,(\n                period = t,\n                product = i,\n                productBottled = value(productBottled[i,t])&gt;0.5 ? true : false,\n                productQuantity = ceil(Int,value(productQuantity[i,t])),\n                WarehouseStockPeriodEnd = ceil(Int,value(WarehouseStockPeriodEnd[i,t])),\n                )\n            )\n        end\n    end\n\n    sort!(productionResults,[:period, :product])\n    return productionResults\nend\n\n# Create the production plot\nfunction create_production_plot(productionResults)\n    p = groupedbar(\n        productionResults.period,\n        productionResults.productQuantity,\n        group=productionResults.product,\n        ylabel=\"Production Quantity (Bottles)\",\n        xlabel=\"Period\",\n        title=\"Production Schedule by Beer Type\",\n        size=(1200,600),\n        palette = :Set3,\n        legend=:outertopright,\n        xrotation = 45,\n        legendtitle=\"Beer Type\",\n        bar_width=0.7,\n        grid=false,\n        dpi=300\n    )\n    return p\nend\n\n# Create the warehouse stock plot\nfunction create_warehouse_plot(productionResults)\n    p = groupedbar(\n        productionResults.period,\n        productionResults.WarehouseStockPeriodEnd,\n        group=productionResults.product,\n        ylabel=\"Warehouse Stock\",\n        xlabel=\"Period\",\n        title=\"Warehouse Stock\",\n        size=(1200,600),\n        palette = :Set3,\n        legend=:outertopright,\n        xrotation = 45,\n        legendtitle=\"Beer Type\",\n        bar_width=0.7,\n        grid=false,\n        dpi=300\n    )\n    return p\nend\n\nThe following code creates the production plot.\n\nproductionResults = create_production_results()\np = create_production_plot(productionResults)\n\nThe following code creates the warehouse stock plot.\n\nproductionResults = create_production_results()\np = create_warehouse_plot(productionResults)\n\n\n\n\n\nNext, we calculate the setup and inventory costs for each period and store them in a DataFrame. This should also work for you, if you followed the previous name instructions.\n\n# Calculate costs per period\nfunction create_cost_results()\n    costResults = DataFrame(\n        period = String[],\n        setup_costs = Float64[],\n        inventory_costs = Float64[]\n    )\n\n    for t in sort(collect(keys(dictAvailableTime)))\n        # Calculate setup costs for this period\n        period_setup_costs = sum(\n            setupHourCosts * dictSetupTime[i] * value(productBottled[i,t])\n            for i in keys(dictBottlingTime)\n        )\n\n        # Calculate inventory costs for this period\n        period_inventory_costs = sum(\n            warehouseCosts * value(WarehouseStockPeriodEnd[i,t])\n            for i in keys(dictBottlingTime)\n        )\n\n        push!(costResults, (\n            period = t,\n            setup_costs = period_setup_costs,\n            inventory_costs = period_inventory_costs\n        ))\n    end\n\n    # Stack the cost columns\n    stacked_costs = stack(costResults, [:setup_costs, :inventory_costs],\n                         variable_name=\"Cost_Type\", value_name=\"Cost\")\n    return stacked_costs\nend\n\n# Create the cost plot\nfunction create_cost_plot(stacked_costs)\n    p = groupedbar(\n        stacked_costs.period,\n        stacked_costs.Cost,\n        group=stacked_costs.Cost_Type,\n        ylabel=\"Costs (€)\",\n        xlabel=\"Period\",\n        title=\"Setup and Inventory Costs per Period\",\n        size=(1200,600),\n        palette=:Set2,\n        legend=:outertopright,\n        xrotation=45,\n        legendtitle=\"Cost Type\",\n        bar_width=0.7,\n        grid=false,\n        dpi=300\n    )\n    return p\nend\n\nThe following code calls the setup and inventory costs plot.\n\nstacked_costs = create_cost_results()\np = create_cost_plot(stacked_costs)",
    "crumbs": [
      "05 Production",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-05-production.html#load-the-necessary-packages-and-data",
    "href": "tutorials/tutorial-05-production.html#load-the-necessary-packages-and-data",
    "title": "Tutorial V - Production Planning in Breweries",
    "section": "",
    "text": "Implement the CLSP from the lecture in Julia. Before we start, let’s load the necessary packages and data.\n\nusing JuMP, HiGHS\nusing CSV\nusing DelimitedFiles\nusing DataFrames\nusing Plots\nusing StatsPlots\nimport Pkg; Pkg.add(\"PlotlyBase\")\nplotly() # This will create interactive plots later on\n\n\n\n\n\n\n\nIf you haven’t installed the packages yet, you can do so by running using Pkg first and then Pkg.add(\"JuMP\"), Pkg.add(\"HiGHS\"), Pkg.add(\"DataFrames\"), Pkg.add(\"Plots\"), and Pkg.add(\"StatsPlots\").",
    "crumbs": [
      "05 Production",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-05-production.html#load-the-data",
    "href": "tutorials/tutorial-05-production.html#load-the-data",
    "title": "Tutorial V - Production Planning in Breweries",
    "section": "",
    "text": "Now, let’s load the data. The weekly demand in bottles \\(d_{i,t}\\), the available time at the bottling plant in hours \\(a_t\\), the time required to bottle each beer in hours \\(b_i\\), and the setup time in hours \\(g_i\\) are provided as CSV files.\n\n# Get the directory of the current file\nfile_directory = \"$(@__DIR__)/data\"\n\n# Load the data about the available time at the bottling plant\navailableTime = CSV.read(\"$file_directory/availabletime.csv\", DataFrame)\nprintln(\"Number of periods: $(nrow(availableTime))\")\nprintln(\"First 5 rows of available time per period:\")\nprintln(availableTime[1:5, :])\n\n\nNumber of periods: 27\n\nFirst 5 rows of available time per period:\n\n5×2 DataFrame\n\n Row │ period   available_capacity \n\n     │ String7  Int64              \n\n─────┼─────────────────────────────\n\n   1 │ week_01                 168\n\n   2 │ week_02                 168\n\n   3 │ week_03                 168\n\n   4 │ week_04                 168\n\n   5 │ week_05                  48\n\n\n\n\n\n# Load the data about the bottling time for each beer\nbottlingTime = CSV.read(\"$file_directory/bottlingtime.csv\", DataFrame)\nprintln(\"Number of beers: $(nrow(bottlingTime))\")\nprintln(\"Bottling time per beer:\")\nprintln(bottlingTime)\n\n\nNumber of beers: 6\n\nBottling time per beer:\n\n6×2 DataFrame\n\n Row │ beer_type   bottling_time \n\n     │ String15    Float64       \n\n─────┼───────────────────────────\n\n   1 │ Pilsener          0.00222\n\n   2 │ Blonde_Ale        0.00111\n\n   3 │ Amber_Ale         0.00139\n\n   4 │ Brown_Ale         0.00222\n\n   5 │ Porter            0.00167\n\n   6 │ Stout             0.00111\n\n\n\n\n\n# Load the data about the setup time for each beer\nsetupTime = CSV.read(\"$file_directory/setuptime.csv\", DataFrame)\nprintln(\"Setup time per beer:\")\nprintln(setupTime)\n\n\nSetup time per beer:\n\n6×2 DataFrame\n\n Row │ beer_type   setup_time \n\n     │ String15    Int64      \n\n─────┼────────────────────────\n\n   1 │ Pilsener            10\n\n   2 │ Blonde_Ale          11\n\n   3 │ Amber_Ale            8\n\n   4 │ Brown_Ale            8\n\n   5 │ Porter              11\n\n   6 │ Stout                9\n\n\n\n\n\n# Load the data about the weekly demand for each beer\ndemandCustomers = CSV.read(\"$file_directory/demand.csv\", DataFrame)\nprintln(\"First 5 rows of demand per beer:\")\nprintln(demandCustomers[1:5, :])\n\n\nFirst 5 rows of demand per beer:\n\n5×3 DataFrame\n\n Row │ beer_type   period   demand \n\n     │ String15    String7  Int64  \n\n─────┼─────────────────────────────\n\n   1 │ Pilsener    week_01    3853\n\n   2 │ Blonde_Ale  week_01    8372\n\n   3 │ Amber_Ale   week_01   16822\n\n   4 │ Brown_Ale   week_01   13880\n\n   5 │ Porter      week_01   10642",
    "crumbs": [
      "05 Production",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-05-production.html#define-the-parameters",
    "href": "tutorials/tutorial-05-production.html#define-the-parameters",
    "title": "Tutorial V - Production Planning in Breweries",
    "section": "",
    "text": "Consider in your implementation, that each hour of setup is associated with a cost of 1000 Euros, and the inventory holding cost for unsold bottles at the end of each period is 0.1 Euro per bottle. Implement both parameters for the cost of setup and the inventory holding cost in the model. Call them setupHourCosts and warehouseCosts.\n\n# YOUR CODE BELOW\n\nNext, you need to prepare the given data for the model. Create a dictionary for the available time, bottling time, and setup time. Call them dictAvailableTime, dictBottlingTime, and dictSetupTime.\n\n# Prepare the data for the model\ndictDemand = Dict((row.beer_type,row.period) =&gt; row.demand for row in eachrow(demandCustomers))\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Validate your solution\n@assert length(dictAvailableTime) == nrow(availableTime) \"Available time dictionary should have same length as input data\"\n@assert length(dictBottlingTime) == nrow(bottlingTime) \"Bottling time dictionary should have same length as input data\"\n@assert length(dictSetupTime) == nrow(setupTime) \"Setup time dictionary should have same length as input data\"\n\n# Check that all values are positive\n@assert all(v -&gt; v &gt; 0, values(dictAvailableTime)) \"All available time values must be positive\"\n@assert all(v -&gt; v &gt; 0, values(dictBottlingTime)) \"All bottling time values must be positive\"\n@assert all(v -&gt; v &gt; 0, values(dictSetupTime)) \"All setup time values must be positive\"\n\n# Check that dictionaries contain all expected keys\n@assert all(p -&gt; haskey(dictAvailableTime, p), availableTime.period) \"Missing periods in available time dictionary\"\n@assert all(b -&gt; haskey(dictBottlingTime, b), bottlingTime.beer_type) \"Missing beer types in bottling time dictionary\"\n@assert all(b -&gt; haskey(dictSetupTime, b), setupTime.beer_type) \"Missing beer types in setup time dictionary\"",
    "crumbs": [
      "05 Production",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-05-production.html#define-the-model-instance",
    "href": "tutorials/tutorial-05-production.html#define-the-model-instance",
    "title": "Tutorial V - Production Planning in Breweries",
    "section": "",
    "text": "Next, we define the model instance for the CLSP.\n\n# Prepare the model instance\nlotsizeModel = Model(HiGHS.Optimizer)\nset_attribute(lotsizeModel, \"presolve\", \"on\")\nset_time_limit_sec(lotsizeModel, 60.0)",
    "crumbs": [
      "05 Production",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-05-production.html#define-the-variables",
    "href": "tutorials/tutorial-05-production.html#define-the-variables",
    "title": "Tutorial V - Production Planning in Breweries",
    "section": "",
    "text": "Now, create your variables. Please name them productBottled for the binary variable, productQuantity for the production quantity and WarehouseStockPeriodEnd for the warehouse stock at the end of each period. We will use these names later in the code to plot the results.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Validate your solution\n# Check if variables exist in the model\n@assert haskey(lotsizeModel.obj_dict, :productBottled) \"productBottled variable not found in model\"\n@assert haskey(lotsizeModel.obj_dict, :productQuantity) \"productQuantity variable not found in model\"\n@assert haskey(lotsizeModel.obj_dict, :WarehouseStockPeriodEnd) \"WarehouseStockPeriodEnd variable not found in model\"\n\n# Check variable dimensions\n@assert length(productBottled) == length(dictBottlingTime) * length(dictAvailableTime) \"Incorrect dimensions for productBottled\"\n@assert length(productQuantity) == length(dictBottlingTime) * length(dictAvailableTime) \"Incorrect dimensions for productQuantity\"\n@assert length(WarehouseStockPeriodEnd) == length(dictBottlingTime) * length(dictAvailableTime) \"Incorrect dimensions for WarehouseStockPeriodEnd\"\n\n# Check variable types\n@assert all(is_binary, productBottled) \"productBottled must be binary variables\"\n@assert all(is_integer, productQuantity) == false \"productQuantity must be continuous variables\"\n@assert all(is_integer, WarehouseStockPeriodEnd) == false \"WarehouseStockPeriodEnd must be continuous variables\"",
    "crumbs": [
      "05 Production",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-05-production.html#define-the-objective-function",
    "href": "tutorials/tutorial-05-production.html#define-the-objective-function",
    "title": "Tutorial V - Production Planning in Breweries",
    "section": "",
    "text": "Next, define the objective function.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Validate your solution\n# Check if the model has an objective\n@assert objective_function(lotsizeModel) !== nothing \"Model must have an objective function\"\n\n# Check if it's a minimization problem\n@assert objective_sense(lotsizeModel) == MOI.MIN_SENSE \"Objective should be minimization\"\n\n# Check if the objective function contains both cost components\nobj_expr = objective_function(lotsizeModel)\n@assert contains(string(obj_expr), \"productBottled\") \"Objective must include setup costs (productBottled)\"\n@assert contains(string(obj_expr), \"WarehouseStockPeriodEnd\") \"Objective must include warehouse costs (WarehouseStockPeriodEnd)\"",
    "crumbs": [
      "05 Production",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-05-production.html#define-the-constraints",
    "href": "tutorials/tutorial-05-production.html#define-the-constraints",
    "title": "Tutorial V - Production Planning in Breweries",
    "section": "",
    "text": "Now, we need to define all necessary constraints for the model. Start with the demand/inventory balance constraint.\n\n\n\n\n\n\nThe first period is special, as it does not have a previous period. Furthermore, we are working with strings as variable references, thus we cannot use t-1 directly as in the lecture. To address this, we could collect and sort all keys and then use their indices to address the previous period. For example, all_periods[t-1] would then be the previous period, if we index t just as a range from 2:length(all_periods).\n\n\n\n\n# Get the first period and all periods\nfirst_period = first(sort(collect(keys(dictAvailableTime))))\nall_periods = sort(collect(keys(dictAvailableTime)))\n\nWith these, we can now define the demand/inventory balance constraint. As this is the first constraint and might be a bit tricky, the solution is already given below.\n\n# Inventory balance constraints for periods after first period\n@constraint(lotsizeModel,\n    demandBalance[i=keys(dictBottlingTime), t=2:length(all_periods)],\n    WarehouseStockPeriodEnd[i,all_periods[t-1]] + productQuantity[i,all_periods[t]] - WarehouseStockPeriodEnd[i,all_periods[t]] == dictDemand[i,all_periods[t]]\n    )\n\nNext, we need to ensure that we setup the production for a beer type only if we bottle the type at least once.\n\n# YOUR CODE BELOW\n\nLast, we need to define the constraint that limits the production quantity to the number of bottles that can be bottled within the available time.\n\n# YOUR CODE BELOW",
    "crumbs": [
      "05 Production",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-05-production.html#solve-the-model",
    "href": "tutorials/tutorial-05-production.html#solve-the-model",
    "title": "Tutorial V - Production Planning in Breweries",
    "section": "",
    "text": "Finally, implement the solve statement for your model instance.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Validate your solution\n@assert 600000 &lt;= objective_value(lotsizeModel) &lt;= 700000 \"Objective value should be between 600,000 and 700,000\"\n\n\nNow, unfortunately we cannot assert the value of the objective function perfectly here as we have to abort the computation due to the time limit and everybody is likely getting different results. The solution for the first task will likely be in the range of 600,000 to 700,000. If your model is solved within seconds, your formulation is not correct.",
    "crumbs": [
      "05 Production",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-05-production.html#create-the-plots",
    "href": "tutorials/tutorial-05-production.html#create-the-plots",
    "title": "Tutorial V - Production Planning in Breweries",
    "section": "",
    "text": "The following code creates production and warehouse plots for you. Use it to verify and visualize your solution in the following tasks.\n\n\n\n\n\n\nThe creation of the dataframes and the plots is implemented inside of a function, as we will need to use it multiple times in the following tasks.\n\n\n\n\n# Create the production results\nfunction create_production_results()\n    # Create a DataFrame to store the results\n    productionResults = DataFrame(\n        period = String[],\n        product = String[],\n        productBottled = Bool[],\n        productQuantity=Int[],\n        WarehouseStockPeriodEnd=Int[]\n    )\n\n    # Populate the DataFrame with the results\n    for i in keys(dictSetupTime)\n        for t in keys(dictAvailableTime)\n            push!(\n                productionResults,(\n                period = t,\n                product = i,\n                productBottled = value(productBottled[i,t])&gt;0.5 ? true : false,\n                productQuantity = ceil(Int,value(productQuantity[i,t])),\n                WarehouseStockPeriodEnd = ceil(Int,value(WarehouseStockPeriodEnd[i,t])),\n                )\n            )\n        end\n    end\n\n    sort!(productionResults,[:period, :product])\n    return productionResults\nend\n\n# Create the production plot\nfunction create_production_plot(productionResults)\n    p = groupedbar(\n        productionResults.period,\n        productionResults.productQuantity,\n        group=productionResults.product,\n        ylabel=\"Production Quantity (Bottles)\",\n        xlabel=\"Period\",\n        title=\"Production Schedule by Beer Type\",\n        size=(1200,600),\n        palette = :Set3,\n        legend=:outertopright,\n        xrotation = 45,\n        legendtitle=\"Beer Type\",\n        bar_width=0.7,\n        grid=false,\n        dpi=300\n    )\n    return p\nend\n\n# Create the warehouse stock plot\nfunction create_warehouse_plot(productionResults)\n    p = groupedbar(\n        productionResults.period,\n        productionResults.WarehouseStockPeriodEnd,\n        group=productionResults.product,\n        ylabel=\"Warehouse Stock\",\n        xlabel=\"Period\",\n        title=\"Warehouse Stock\",\n        size=(1200,600),\n        palette = :Set3,\n        legend=:outertopright,\n        xrotation = 45,\n        legendtitle=\"Beer Type\",\n        bar_width=0.7,\n        grid=false,\n        dpi=300\n    )\n    return p\nend\n\nThe following code creates the production plot.\n\nproductionResults = create_production_results()\np = create_production_plot(productionResults)\n\nThe following code creates the warehouse stock plot.\n\nproductionResults = create_production_results()\np = create_warehouse_plot(productionResults)",
    "crumbs": [
      "05 Production",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-05-production.html#calculate-the-setup-and-inventory-costs",
    "href": "tutorials/tutorial-05-production.html#calculate-the-setup-and-inventory-costs",
    "title": "Tutorial V - Production Planning in Breweries",
    "section": "",
    "text": "Next, we calculate the setup and inventory costs for each period and store them in a DataFrame. This should also work for you, if you followed the previous name instructions.\n\n# Calculate costs per period\nfunction create_cost_results()\n    costResults = DataFrame(\n        period = String[],\n        setup_costs = Float64[],\n        inventory_costs = Float64[]\n    )\n\n    for t in sort(collect(keys(dictAvailableTime)))\n        # Calculate setup costs for this period\n        period_setup_costs = sum(\n            setupHourCosts * dictSetupTime[i] * value(productBottled[i,t])\n            for i in keys(dictBottlingTime)\n        )\n\n        # Calculate inventory costs for this period\n        period_inventory_costs = sum(\n            warehouseCosts * value(WarehouseStockPeriodEnd[i,t])\n            for i in keys(dictBottlingTime)\n        )\n\n        push!(costResults, (\n            period = t,\n            setup_costs = period_setup_costs,\n            inventory_costs = period_inventory_costs\n        ))\n    end\n\n    # Stack the cost columns\n    stacked_costs = stack(costResults, [:setup_costs, :inventory_costs],\n                         variable_name=\"Cost_Type\", value_name=\"Cost\")\n    return stacked_costs\nend\n\n# Create the cost plot\nfunction create_cost_plot(stacked_costs)\n    p = groupedbar(\n        stacked_costs.period,\n        stacked_costs.Cost,\n        group=stacked_costs.Cost_Type,\n        ylabel=\"Costs (€)\",\n        xlabel=\"Period\",\n        title=\"Setup and Inventory Costs per Period\",\n        size=(1200,600),\n        palette=:Set2,\n        legend=:outertopright,\n        xrotation=45,\n        legendtitle=\"Cost Type\",\n        bar_width=0.7,\n        grid=false,\n        dpi=300\n    )\n    return p\nend\n\nThe following code calls the setup and inventory costs plot.\n\nstacked_costs = create_cost_results()\np = create_cost_plot(stacked_costs)",
    "crumbs": [
      "05 Production",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-04-advanced.html",
    "href": "tutorials/tutorial-04-04-advanced.html",
    "title": "Tutorial IV.IV - Advanced Solver Options with HiGHS in JuMP",
    "section": "",
    "text": "Welcome to this tutorial on advanced solver options in JuMP using the HiGHS solver! Don’t worry if “advanced solver options” sounds intimidating - we’ll break everything down into simple, easy-to-understand concepts.\nImagine you’re using a GPS app to find the best route to a new restaurant. Just like how you can adjust settings in your GPS (like avoiding toll roads or preferring highways), we can adjust settings in our optimization solver to help it find solutions more efficiently or to meet specific requirements.\nBy the end of this tutorial, you’ll be able to: 1. Understand what solver options are and why they’re useful 2. Set basic solver options like time limits and solution tolerances 3. Interpret solver output to understand how well your problem was solved\nLet’s start by loading the necessary packages:\n\nusing JuMP, HiGHS",
    "crumbs": [
      "04 Optimization",
      "04 - Advanced"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-04-advanced.html#exercise-1.1---set-solver-options",
    "href": "tutorials/tutorial-04-04-advanced.html#exercise-1.1---set-solver-options",
    "title": "Tutorial IV.IV - Advanced Solver Options with HiGHS in JuMP",
    "section": "Exercise 1.1 - Set Solver Options",
    "text": "Exercise 1.1 - Set Solver Options\nNow it’s your turn! Set the following solver options: 1. A time limit of 120 seconds 2. A MIP gap tolerance of 0.5% 3. Turn off presolve\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert time_limit_sec(model) == 120 \"The time limit should be 120 seconds but is $(time_limit_sec(model))\"\n@assert solver_name(model) == \"HiGHS\" \"The solver should be HiGHS but is $(solver_name(model))\"\n@assert MOI.get(model, MOI.RawOptimizerAttribute(\"mip_rel_gap\")) == 0.005 \"The MIP gap should be 0.5% but is $(MOI.get(model, MOI.RawOptimizerAttribute(\"mip_rel_gap\")))\"\n@assert MOI.get(model, MOI.RawOptimizerAttribute(\"presolve\")) == \"off\" \"Presolve should be off but is $(MOI.get(model, MOI.RawOptimizerAttribute(\"presolve\")))\"\nprintln(\"Great job! You've successfully set advanced solver options.\")",
    "crumbs": [
      "04 Optimization",
      "04 - Advanced"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-04-advanced.html#exercise-2.1---modify-and-solve-the-problem",
    "href": "tutorials/tutorial-04-04-advanced.html#exercise-2.1---modify-and-solve-the-problem",
    "title": "Tutorial IV.IV - Advanced Solver Options with HiGHS in JuMP",
    "section": "Exercise 2.1 - Modify and Solve the Problem",
    "text": "Exercise 2.1 - Modify and Solve the Problem\nNow it’s your turn! Modify the problem above by:\n\nChanging the production time constraint to 300 minutes\nIncreasing the profit for widgets to 30\nSolving the modified problem and printing the results\n\n\n# YOUR CODE BELOW\n# Hint: Copy the code above and make the necessary changes\nmodel = Model(HiGHS.Optimizer) # Don't forget to re-initialize the model\n\n\n\nCode\n# Test your answer\n@assert termination_status(model) == MOI.OPTIMAL \"The termination status should be OPTIMAL but is $(termination_status(model))\"\n@assert isapprox(objective_value(model), 3780, atol=1e-6) \"The objective value should be 3780 but is $(objective_value(model))\"\n@assert isapprox(value(widgets), 80, atol=1e-6) \"The number of widgets to produce should be 80 but is $(value(widgets))\"\n@assert isapprox(value(gadgets), 46, atol=1e-6) \"The number of gadgets to produce should be 46 but is $(value(gadgets))\"\nprintln(\"Excellent work! You've successfully modified and solved the optimization problem.\")",
    "crumbs": [
      "04 Optimization",
      "04 - Advanced"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-02-bounds.html",
    "href": "tutorials/tutorial-04-02-bounds.html",
    "title": "Tutorial IV.II - Variables and Bounds in JuMP",
    "section": "",
    "text": "Welcome to this beginner-friendly tutorial on variables and bounds in JuMP! In this lesson, we’ll explore different types of variables and how to set limits (or bounds) on them. Don’t worry if you’re new to optimization - we’ll explain everything step by step using real-world examples.\nFollow the instructions, write your code in the designated code blocks, and confirm your understanding with @assert statements. Make sure to have the JuMP package installed to follow this tutorial.\nLet’s start by loading the JuMP package:\n\nusing JuMP\n\nNow, let’s create a model that we’ll use throughout this tutorial:\n\nmodel = Model()\nprintln(\"Great! We've created a new optimization model.\")\n\nGreat! We've created a new optimization model.",
    "crumbs": [
      "04 Optimization",
      "02 - Bounds"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-02-bounds.html#exercise-1.1---create-variables",
    "href": "tutorials/tutorial-04-02-bounds.html#exercise-1.1---create-variables",
    "title": "Tutorial IV.II - Variables and Bounds in JuMP",
    "section": "Exercise 1.1 - Create Variables",
    "text": "Exercise 1.1 - Create Variables\nNow it’s your turn! Create three variables:\n\nA continuous variable called water_amount\nAn integer variable called cars_produced\nA binary variable called build_store\n\n\n# YOUR CODE BELOW\n# Hint: Use the @variable macro three times, once for each variable\n\n\n\nCode\n# Test your answer\n@assert typeof(water_amount) == VariableRef && !is_integer(water_amount) && !is_binary(water_amount)\n@assert typeof(cars_produced) == VariableRef && is_integer(cars_produced)\n@assert typeof(build_store) == VariableRef && is_binary(build_store)\nprintln(\"Excellent work! You've successfully created continuous, integer, and binary variables.\")",
    "crumbs": [
      "04 Optimization",
      "02 - Bounds"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-02-bounds.html#exercise-2.1---create-an-array",
    "href": "tutorials/tutorial-04-02-bounds.html#exercise-2.1---create-an-array",
    "title": "Tutorial IV.II - Variables and Bounds in JuMP",
    "section": "Exercise 2.1 - Create an Array",
    "text": "Exercise 2.1 - Create an Array\nImagine you’re planning production for a week. Create an array daily_production with 7 non-negative variables, one for each day of the week.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert length(daily_production) == 7\n@assert all(lower_bound(daily_production[i]) == 0 for i in 1:7)\nprintln(\"Great job! You've created an array of 7 non-negative variables for daily production.\")",
    "crumbs": [
      "04 Optimization",
      "02 - Bounds"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-02-bounds.html#exercise-2.2---create-a-matrix-of-variables",
    "href": "tutorials/tutorial-04-02-bounds.html#exercise-2.2---create-a-matrix-of-variables",
    "title": "Tutorial IV.II - Variables and Bounds in JuMP",
    "section": "Exercise 2.2 - Create a Matrix of Variables",
    "text": "Exercise 2.2 - Create a Matrix of Variables\nNow, imagine you’re deciding whether to stock 4 different products in 3 different stores. Create a 3x4 matrix of binary variables called stock_decision.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert size(stock_decision) == (3, 4)\n@assert all(is_binary(stock_decision[i,j]) for i in 1:3, j in 1:4)\nprintln(\"Excellent! You've created a 3x4 matrix of binary variables for stocking decisions.\")",
    "crumbs": [
      "04 Optimization",
      "02 - Bounds"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-02-bounds.html#exercise-3.1---set-bounds-on-a-variable",
    "href": "tutorials/tutorial-04-02-bounds.html#exercise-3.1---set-bounds-on-a-variable",
    "title": "Tutorial IV.II - Variables and Bounds in JuMP",
    "section": "Exercise 3.1 - Set Bounds on a Variable",
    "text": "Exercise 3.1 - Set Bounds on a Variable\nCreate a variable temperature that represents the temperature setting on a thermostat. It should be between 0 and 37 degrees.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert lower_bound(temperature) == 0\n@assert upper_bound(temperature) == 37\nprintln(\"Well done! You've created a variable for temperature with appropriate bounds.\")",
    "crumbs": [
      "04 Optimization",
      "02 - Bounds"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-05-Plotting.html",
    "href": "tutorials/tutorial-03-05-Plotting.html",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "Welcome to this tutorial on plotting in Julia! We’ll be using the powerful Plots.jl package to create beautiful and informative visualizations. Don’t worry if you’re new to plotting – we’ll start with the basics and gradually build up to more advanced techniques.\nIn this tutorial, you’ll learn how to: 1. Create simple plots like line graphs and scatter plots 2. Customize your plots with colors, labels, and styles 3. Add multiple data series to a single plot 4. Save your plots as image files for use in reports or presentations\nFollow the instructions, write your code in the designated code blocks, and validate your results with @assert statements.\nBefore we begin, let’s make sure you have the necessary packages installed. If you’ve been following the course, you’ll need to install the Plots and StatsPlots packages:\n\nimport Pkg\nPkg.activate(\"applied-optimization\")\nPkg.add([\"Plots\",\"StatsPlots\"])\n\nNow, let’s load these packages:\n\nusing Plots, StatsPlots",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-05-Plotting.html#exercise-1.1---create-a-scatter-plot",
    "href": "tutorials/tutorial-03-05-Plotting.html#exercise-1.1---create-a-scatter-plot",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 1.1 - Create a Scatter Plot",
    "text": "Exercise 1.1 - Create a Scatter Plot\nNow it’s your turn! Create a scatter plot using the scatter() function instead of plot(). Use a range from 1 to 20 for x, and generate 20 random numbers for y.\n\n# YOUR CODE BELOW\n# Hint: Use x = 1:20 and y = rand(20)\n\n\n\nCode\n# Test your answer\n@assert @isdefined scatter_plot\nprintln(\"Great job! You've created your first scatter plot.\")",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-05-Plotting.html#exercise-2.1---customize-a-line-plot",
    "href": "tutorials/tutorial-03-05-Plotting.html#exercise-2.1---customize-a-line-plot",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 2.1 - Customize a Line Plot",
    "text": "Exercise 2.1 - Customize a Line Plot\nNow it’s your turn to get creative! Customize a line plot with your choice of colors, line styles, and markers. Save your masterpiece in the variable custom_line_plot.\n\n# YOUR CODE BELOW\n# Hint: Try different line styles (:dash, :dot), colors (:blue, :green), and markers (:star, :diamond)\n\n\n\nCode\n# Test your answer\n@assert @isdefined custom_line_plot\nprintln(\"Excellent! You've created a custom line plot.\")\n\n\n\n\n\n\n\n\nFeel free to experiment with different options. There’s no “right” answer here – it’s all about what looks good to you!",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-05-Plotting.html#exercise-3.1---create-a-multiple-series-plot",
    "href": "tutorials/tutorial-03-05-Plotting.html#exercise-3.1---create-a-multiple-series-plot",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 3.1 - Create a Multiple Series Plot",
    "text": "Exercise 3.1 - Create a Multiple Series Plot\nNYour turn! Create a plot called multi_series_plot with three data series y1, y2, and y3. Make sure to give each series a different color and label.\n\n# YOUR CODE BELOW\n# Hint: Use plot() for the first series, then plot!() for the second and third\n\n\n\nCode\n# Test your answer\n@assert @isdefined y1\n@assert @isdefined y2\n@assert @isdefined y3\n@assert @isdefined multi_series_plot\nprintln(\"Fantastic! You've created a plot with multiple series.\")",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-05-Plotting.html#exercise-3.1---save-a-plot-to-a-file",
    "href": "tutorials/tutorial-03-05-Plotting.html#exercise-3.1---save-a-plot-to-a-file",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 3.1 - Save a Plot to a File",
    "text": "Exercise 3.1 - Save a Plot to a File\nSave your multi_series_plot as a PNG file named “saved_plot.png” in the “ExampleData” folder.\n\n# YOUR CODE BELOW\n# Don't forget to use the @__DIR__ macro to get the correct file path!\n\n\n\nCode\n# Test your answer\n@assert isfile(\"$(@__DIR__)/ExampleData/saved_plot.png\") \"File does not exist yet.\"\nprintln(\"Well done! You've saved your plot as an image file.\")",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-05-Plotting.html#bar-plot",
    "href": "tutorials/tutorial-03-05-Plotting.html#bar-plot",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Bar Plot",
    "text": "Bar Plot\n\n# Bar plot\nx_categories = [\"A\", \"B\", \"C\", \"D\"]\ny_values = [15, 23, 18, 30]\nbar_plot = bar(\n    x_categories,\n    y_values,\n    title=\"Bar Plot Example\"\n)\ndisplay(bar_plot)",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-05-Plotting.html#histogram",
    "href": "tutorials/tutorial-03-05-Plotting.html#histogram",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Histogram",
    "text": "Histogram\n\ndata = randn(1000)\nhist_plot = histogram(\n    data,\n    bins=30,\n    title=\"Histogram Example\"\n)\ndisplay(hist_plot)",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-05-Plotting.html#box-plot",
    "href": "tutorials/tutorial-03-05-Plotting.html#box-plot",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Box Plot",
    "text": "Box Plot\n\n# Box plot\ngroup = repeat(1:4, inner=50)\ny = randn(200) .+ group\nbox_plot = boxplot(\n    group,\n    y,\n    title=\"Box Plot Example\"\n)\ndisplay(box_plot)",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-03-DataFrames.html",
    "href": "tutorials/tutorial-03-03-DataFrames.html",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "Imagine a DataFrame as a digital spreadsheet. It’s a way to organize and work with data in rows and columns. Each column can hold different types of information, like names, ages, or salaries. In this tutorial, we’ll learn how to create DataFrames, add and change data, and perform simple operations on our data.\n\n\n\n\n\n\nBefore we start, make sure you have the DataFrames package installed. If you’re not sure how to do this, check the previous tutorial on package management!\n\n\n\nLet’s begin by importing the DataFrames package:\n\n# Import the DataFrames package\nusing DataFrames",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-03-DataFrames.html#exercise-1.1---create-a-dataframe",
    "href": "tutorials/tutorial-03-03-DataFrames.html#exercise-1.1---create-a-dataframe",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 1.1 - Create a DataFrame",
    "text": "Exercise 1.1 - Create a DataFrame\nCreate and Test a DataFrame. Create a DataFrame named employees with the columns Name, Age, and Salary, and populate it with the specified data: John is 28 years old and earns 50000, Mike is 23 years old and earns 62000. Frank is 37 years old and earns 90000.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert employees == DataFrame(\n    Name = [\"John\", \"Mike\", \"Frank\"],\n    Age = [28, 23, 37],\n    Salary = [50000, 62000, 90000]\n)\nprintln(\"DataFrame created successfully!\")\nprintln(employees)\n\n\n\n\n\n\n\n\nRemember, for more help, use ? in the REPL and type DataFrame.",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-03-DataFrames.html#exercise-2.1---access-the-age-column",
    "href": "tutorials/tutorial-03-03-DataFrames.html#exercise-2.1---access-the-age-column",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 2.1 - Access the Age Column",
    "text": "Exercise 2.1 - Access the Age Column\nAccess the Age column from the DataFrame and save it in a new variable ages.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert ages == [28, 23, 37]\nprintln(\"Correct, the Ages column is: \", ages)",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-03-DataFrames.html#exercise-2.2---update-johns-salary",
    "href": "tutorials/tutorial-03-03-DataFrames.html#exercise-2.2---update-johns-salary",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 2.2 - Update John’s Salary",
    "text": "Exercise 2.2 - Update John’s Salary\nUpdate John’s salary to 59000.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert employees.Salary[1] == 59000\nprintln(\"Modified DataFrame: \")\nprintln(employees)",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-03-DataFrames.html#exercise-3.1---filter-the-dataframe",
    "href": "tutorials/tutorial-03-03-DataFrames.html#exercise-3.1---filter-the-dataframe",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 3.1 - Filter the DataFrame",
    "text": "Exercise 3.1 - Filter the DataFrame\nFilter the DataFrame to include only employees with salaries above 60000. Save the resulting employees in the DataFrame high_earners.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert nrow(high_earners) == 2\nprintln(\"High earners: \")\nprintln(high_earners)",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-03-DataFrames.html#exercise-4.1---sort-the-dataframe",
    "href": "tutorials/tutorial-03-03-DataFrames.html#exercise-4.1---sort-the-dataframe",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 4.1 - Sort the DataFrame",
    "text": "Exercise 4.1 - Sort the DataFrame\nSort the DataFrame based on the Age column and save it as sorted_df.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert sorted_df.Age[1] == 23\nprintln(\"DataFrame sorted by age: \")\nprintln(sorted_df)\n\n\n\n\n\n\n\n\nIf you have more complicated data structures, take a look at JSON files which can be used to work with all kind of differently structured data sets.",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-03-DataFrames.html#exercise-5.1---loop-over-dataframe",
    "href": "tutorials/tutorial-03-03-DataFrames.html#exercise-5.1---loop-over-dataframe",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 5.1 - Loop over DataFrame",
    "text": "Exercise 5.1 - Loop over DataFrame\nCreate a new column called Bonus in the employees DataFrame. The bonus should be calculated as 10% of the salary for employees over 30, and 5% for those 30 and under. Use a loop to iterate over the rows and calculate the bonus.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert filter(\n    row -&gt; row.Bonus == 2950,\n    employees\n).Name == [\"John\"] \"John should have a bonus of 2950\"\n@assert filter(\n    row -&gt; row.Bonus == 3100,\n    employees\n).Name == [\"Mike\"] \"Mike should have a bonus of 3100\"\n@assert filter(\n    row -&gt; row.Bonus == 9000,\n    employees\n).Name == [\"Frank\"] \"Frank should have a bonus of 9000\"\nprintln(\"Great job! All the bonuses are correct!\")",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-01-functions.html",
    "href": "tutorials/tutorial-03-01-functions.html",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "",
    "text": "Imagine you have a helpful worker. Instead of explaining every little task to it each time, you can teach it specific jobs once, and then just ask it to do those jobs later. In programming, these “jobs” are called functions! This tutorial will show you how to create and use functions in Julia, making your code more organized and reusable.\nFollow the instructions, input your code in the designated areas, and verify your implementations with @assert statements.",
    "crumbs": [
      "03 Data",
      "01 - Functions"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-01-functions.html#exercise-1.1---define-and-test-a-simple-addition-function",
    "href": "tutorials/tutorial-03-01-functions.html#exercise-1.1---define-and-test-a-simple-addition-function",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "Exercise 1.1 - Define and Test a Simple Addition Function",
    "text": "Exercise 1.1 - Define and Test a Simple Addition Function\nDefine and test a simple addition function. Define a function add that takes two parameters and returns their sum.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert add(10, 5) == 15 \"The sum computed is $(add(10, 5)) but should be 15.\"\nprintln(\"The sum computed is $(add(10, 5)), wonderful!\")",
    "crumbs": [
      "03 Data",
      "01 - Functions"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-01-functions.html#exercise-2.1---return-a-local-variable",
    "href": "tutorials/tutorial-03-01-functions.html#exercise-2.1---return-a-local-variable",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "Exercise 2.1 - Return a Local Variable",
    "text": "Exercise 2.1 - Return a Local Variable\nTry to execute the following block of code. The objective is to understand how to return the local_variable_one from the function scope_test. Your task is to change the function, to return the value of local_variable_one.\n\n# YOUR CHANGES BELOW\nfunction scope_test()\n    local_variable_one = 10\n    local_variable_two = 20\nend\n# YOUR CHANGES ABOVE\n\n\n# Test your function\n@assert scope_test() == 10 \"The value exported is $(scope_test()).\"\nprintln(\"The value exported is $(scope_test()), you solved it!\")",
    "crumbs": [
      "03 Data",
      "01 - Functions"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-01-functions.html#exercise-2.2---define-an-implicit-return-function",
    "href": "tutorials/tutorial-03-01-functions.html#exercise-2.2---define-an-implicit-return-function",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "Exercise 2.2 - Define an Implicit Return Function",
    "text": "Exercise 2.2 - Define an Implicit Return Function\nDefine and test an implicit return function. Define a function subtract that takes two parameters and implicitly returns their difference. The implicit return feature makes your code cleaner and more concise.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert subtract(10, 5) == 5  \"The difference computed is $(subtract(10, 5)) but should be 5.\"\nprintln(\"The difference computed is $(subtract(10, 5)), perfect!\")",
    "crumbs": [
      "03 Data",
      "01 - Functions"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-01-functions.html#exercise-3.1---match-results-to-assertions",
    "href": "tutorials/tutorial-03-01-functions.html#exercise-3.1---match-results-to-assertions",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "Exercise 3.1 - Match Results to Assertions",
    "text": "Exercise 3.1 - Match Results to Assertions\nMatch the results from the previous example to the correct assertions:\n\n# YOUR CHANGES BELOW\n@assert result2 == 30 \"result1 should be the sum of two numbers\"\n@assert result3 == \"Hello, World!\" \"result2 should be the concatenation of two strings\"\n@assert result1 == \"Generic operation for objects of type String and Int64\" \"result3 should use the generic operation\"\nprintln(\"You solved it, the assertions are now correct!\")\n\n\n\n\n\n\n\nHint: Look at the types of arguments used in each operation call and match them to the appropriate method.",
    "crumbs": [
      "03 Data",
      "01 - Functions"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-04-loops.html",
    "href": "tutorials/tutorial-02-04-loops.html",
    "title": "Tutorial II.IV - Loops",
    "section": "",
    "text": "Imagine you need to do the same task many times - like sending emails to 100 people or counting from 1 to 10. Instead of writing the same code over and over, we use loops! Loops are like having a helpful assistant who can repeat tasks for you.\nFollow the instructions, input your code in the designated areas, and verify your implementations with @assert statements.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-04-loops.html#exercise-1.1---sum-the-numbers-from-1-to-5",
    "href": "tutorials/tutorial-02-04-loops.html#exercise-1.1---sum-the-numbers-from-1-to-5",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 1.1 - Sum the Numbers from 1 to 5",
    "text": "Exercise 1.1 - Sum the Numbers from 1 to 5\nSum the numbers from 1 to 5 in a loop. The next lines initialize sum_numbers to 0. The sum you compute should accumulate in this variable.\n\nsum_numbers = 0\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert sum_numbers == 15\nprintln(\"Sum of numbers from 1 to 5: \", sum_numbers)",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-04-loops.html#exercise-1.2---sum-only-the-even-numbers-from-1-to-10",
    "href": "tutorials/tutorial-02-04-loops.html#exercise-1.2---sum-only-the-even-numbers-from-1-to-10",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 1.2 - Sum Only the Even Numbers from 1 to 10",
    "text": "Exercise 1.2 - Sum Only the Even Numbers from 1 to 10\nSum only the even numbers from 1 to 10. Again, we initialize a variable sum_evens to 0. The sum you compute should accumulate in this variable.\n\nsum_evens = 0\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert sum_evens == 30\nprintln(\"Sum of even numbers from 1 to 10: \", sum_evens)\n\n\n\n\n\n\n\nHint: You can use the modulo operator % to check if a number is even. The modulo operator returns the remainder of the division of two numbers. If a number is divisible by another number, the remainder is 0. The following example checks if 4 is even: 4 % 2 == 0.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-04-loops.html#exercise-1.3---exit-the-loop-if-the-current-fruit-is-banana",
    "href": "tutorials/tutorial-02-04-loops.html#exercise-1.3---exit-the-loop-if-the-current-fruit-is-banana",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 1.3 - Exit the Loop if the Current Fruit is Banana",
    "text": "Exercise 1.3 - Exit the Loop if the Current Fruit is Banana\nIterate over each fruit in the fruits array, store the current fruit in current_fruit, and exit the loop if current_fruit is banana. The next lines initialize the fruits array and current_fruit variable.\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\ncurrent_fruit = \"None\"\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert current_fruit == \"banana\"\nprintln(\"The current fruit is: \", current_fruit)",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-04-loops.html#exercise-2.1---subtract-from-10-in-increments-of-1-until-the-result-is-less-than-3",
    "href": "tutorials/tutorial-02-04-loops.html#exercise-2.1---subtract-from-10-in-increments-of-1-until-the-result-is-less-than-3",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 2.1 - Subtract from 10 in Increments of 1 Until the Result is Less Than 3",
    "text": "Exercise 2.1 - Subtract from 10 in Increments of 1 Until the Result is Less Than 3\nSubtract from 10 in increments of 1 until the result is less than 3. The next line initializes current_value to 10. The result should be in this variable.\n\ncurrent_value = 10\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert current_value == 2\nprintln(\"The first value smaller than 3 is: \", current_value)",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-04-loops.html#exercise-2.2---find-the-first-multiple-of-7-greater-than-50",
    "href": "tutorials/tutorial-02-04-loops.html#exercise-2.2---find-the-first-multiple-of-7-greater-than-50",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 2.2 - Find the First Multiple of 7 Greater Than 50",
    "text": "Exercise 2.2 - Find the First Multiple of 7 Greater Than 50\nFind the first multiple of 7 greater than 50 using an indefinite loop. The next line initializes first_multiple_of_7 to 0. The first multiple should be in this variable.\n\nfirst_multiple_of_7 = 0\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert first_multiple_of_7 == 56\nprintln(\"First multiple of 7 greater than 50: \", first_multiple_of_7)\n\n\n\n\n\n\n\n‘while true … end’ constructs an infinite loop. You can exit the loop using a ‘break’ statement if a condition is met.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-04-loops.html#exercise-3.1---compute-the-product-of-each-pair-of-elements-from-two-arrays",
    "href": "tutorials/tutorial-02-04-loops.html#exercise-3.1---compute-the-product-of-each-pair-of-elements-from-two-arrays",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 3.1 - Compute the Product of Each Pair of Elements from Two Arrays",
    "text": "Exercise 3.1 - Compute the Product of Each Pair of Elements from Two Arrays\nCompute the product of each pair of elements from two arrays. For example, the product of two numbers a and b is a * b. The next lines initialize numbers1, numbers2 arrays, and the products array to store your results.\n\nnumbers1 = [1, 2, 3]\nnumbers2 = [4, 5, 6]\nproducts = []\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert products == [4, 5, 6, 8, 10, 12, 12, 15, 18]\nprintln(\"Products of each pair from two arrays: \", products)\n\n\n\n\n\n\n\nRemember, you can use push!() to append elements to an array.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-04-loops.html#exercise-4.1---create-a-list-of-even-numbers",
    "href": "tutorials/tutorial-02-04-loops.html#exercise-4.1---create-a-list-of-even-numbers",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 4.1 - Create a List of Even Numbers",
    "text": "Exercise 4.1 - Create a List of Even Numbers\nCreate a list of even numbers from 1 to 10 using a list comprehension.\n\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert even_numbers == [2, 4, 6, 8, 10]\nprintln(\"Even numbers from 1 to 10: \", even_numbers)",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-02-vectors.html",
    "href": "tutorials/tutorial-02-02-vectors.html",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "",
    "text": "This interactive Julia script introduces the basics of vectors, matrices, and tuples.\n\nA vector is like a single row in a spreadsheet or a shopping list - it stores items in a line\nA matrix is like a spreadsheet - it has rows and columns\nA tuple is like a sealed package containing different types of items\n\nUnderstanding these data structures and how to manipulate them is crucial in Julia. Follow the instructions, write your code in the designated code blocks, and execute the corresponding code cell.\n\n\n\n\n\n\nIf a cell is marked with YOUR CODE BELOW, you are expected to write your code in that cell.",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-02-vectors.html#exercise-1.1---create-a-vector",
    "href": "tutorials/tutorial-02-02-vectors.html#exercise-1.1---create-a-vector",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.1 - Create a Vector",
    "text": "Exercise 1.1 - Create a Vector\nCreate a vector ‘fib’ with the first five Fibonacci numbers: 1, 1, 2, 3, 5.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert fib == [1, 1, 2, 3, 5]\nprintln(\"The 'fib' vector: \", fib)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-02-vectors.html#exercise-1.2---append-to-a-vector",
    "href": "tutorials/tutorial-02-02-vectors.html#exercise-1.2---append-to-a-vector",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.2 - Append to a Vector",
    "text": "Exercise 1.2 - Append to a Vector\nAppend the number 8 to the fib vector.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert fib == [1, 1, 2, 3, 5, 8]\nprintln(\"The 'fib' vector after appending 8: \", fib)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-02-vectors.html#exercise-1.3---remove-the-first-element",
    "href": "tutorials/tutorial-02-02-vectors.html#exercise-1.3---remove-the-first-element",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.3 - Remove the First Element",
    "text": "Exercise 1.3 - Remove the First Element\nRemove the first element of the fib vector.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert fib == [1, 2, 3, 5, 8]\nprintln(\"The 'fib' vector after removing the first element: \", fib)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-02-vectors.html#exercise-1.4---access-and-save-the-first-three-elements",
    "href": "tutorials/tutorial-02-02-vectors.html#exercise-1.4---access-and-save-the-first-three-elements",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.4 - Access and Save the First Three Elements",
    "text": "Exercise 1.4 - Access and Save the First Three Elements\nAccess and save the first three elements of fib, to first_three_elements.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert first_three_elements == fib[1:3]\nprintln(\"The first three elements of the 'fib' vector: \", first_three_elements)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-02-vectors.html#exercise-2.1---create-a-matrix",
    "href": "tutorials/tutorial-02-02-vectors.html#exercise-2.1---create-a-matrix",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.1 - Create a Matrix",
    "text": "Exercise 2.1 - Create a Matrix\nCreate a 2x3 matrix my_matrix with the values: 1 2 3; 4 5 6.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert my_matrix == [1 2 3; 4 5 6]\nprintln(\"The 'my_matrix':\\n\", my_matrix)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-02-vectors.html#exercise-2.2---change-the-3rd-column-of-the-2nd-row",
    "href": "tutorials/tutorial-02-02-vectors.html#exercise-2.2---change-the-3rd-column-of-the-2nd-row",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.2 - Change the 3rd Column of the 2nd Row",
    "text": "Exercise 2.2 - Change the 3rd Column of the 2nd Row\nChange the 3rd column of the 2nd row to 17 by accessing and changing the element.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert my_matrix == [1 2 3; 4 5 17]\nprintln(\"The 'my_matrix' after modification:\\n\", my_matrix)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-02-vectors.html#exercise-2.3---perform-matrix-addition",
    "href": "tutorials/tutorial-02-02-vectors.html#exercise-2.3---perform-matrix-addition",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.3 - Perform Matrix Addition",
    "text": "Exercise 2.3 - Perform Matrix Addition\nPerform matrix addition with my_matrix and another_matrix. Call the resulting matrix added_matrices.\n\nanother_matrix = [10 20 30; 40 50 60]\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert added_matrices == [11 22 33; 44 55 77]\nprintln(\"Result of adding 'my_matrix' and 'another_matrix':\\n\", added_matrices)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-02-vectors.html#exercise-2.4---add-10-to-each-element",
    "href": "tutorials/tutorial-02-02-vectors.html#exercise-2.4---add-10-to-each-element",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.4 - Add 10 to Each Element",
    "text": "Exercise 2.4 - Add 10 to Each Element\nAdd 10 to each element in added_matrices.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert added_matrices == [21 32 43; 54 65 87]\nprintln(\"Result of adding 10 to each element in 'added_matrices':\\n\", added_matrices)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-02-vectors.html#exercise-3.1---create-a-tuple",
    "href": "tutorials/tutorial-02-02-vectors.html#exercise-3.1---create-a-tuple",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 3.1 - Create a Tuple",
    "text": "Exercise 3.1 - Create a Tuple\nCreate a tuple my_tuple with three elements: 4.0, your matrix added_matrices, and \"Hi there!\".\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert my_tuple == (4.0, added_matrices, \"Hi there!\")\nprintln(\"The 'my_tuple': \", my_tuple)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-02-vectors.html#exercise-3.2---access-the-second-element",
    "href": "tutorials/tutorial-02-02-vectors.html#exercise-3.2---access-the-second-element",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 3.2 - Access the Second Element",
    "text": "Exercise 3.2 - Access the Second Element\nAccess the second element of my_tuple, store it in second_element.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert second_element == [21 32 43; 54 65 87]\nprintln(\"The second element of 'my_tuple':\\n\", second_element)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "lectures/lecture-13-presentation.html#congratulations",
    "href": "lectures/lecture-13-presentation.html#congratulations",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "Congratulations!",
    "text": "Congratulations!"
  },
  {
    "objectID": "lectures/lecture-13-presentation.html#topics-covered",
    "href": "lectures/lecture-13-presentation.html#topics-covered",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "Topics Covered",
    "text": "Topics Covered\n\n\n\nTopic\nOriginal Problem1\n\n\n\n\nSolar Panel Transport\nClassic Transport Problem\n\n\nBeer Production\nCapacitated Lot Sizing Problem\n\n\nSplit Delivery Minimization\nMultiple-Quadratic-Knapsack Problem\n\n\nLibrary Routing\nCapacitated Vehicle Routing Problem\n\n\nPolice Service Districting\nP-Median Problem\n\n\nSafety Planning Hajj Pilgrimage\nScheduling Problem\n\n\nArena Seating\n2-D Knapsack Problem\n\n\nPassenger Flow Control\nNetwork Flow Problem\n\n\n\nOriginal problem structure we used/extended/exploited to address the topic."
  },
  {
    "objectID": "lectures/lecture-13-presentation.html#section",
    "href": "lectures/lecture-13-presentation.html#section",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "",
    "text": "Any questions\nregarding the\npast lectures?"
  },
  {
    "objectID": "lectures/lecture-13-presentation.html#what-have-we-learned",
    "href": "lectures/lecture-13-presentation.html#what-have-we-learned",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "What have we learned?",
    "text": "What have we learned?\n\nHow to identify and abstract real-world problems\nHow to start programming in Julia\nHow to model and solve optimization problems\nHow to question model assumptions\n\n\n\n\n\n\n\n\nThat’s a lot and a great foundation for a seminar or a master thesis!"
  },
  {
    "objectID": "lectures/lecture-13-presentation.html#how-to-continue-after-the-lecture",
    "href": "lectures/lecture-13-presentation.html#how-to-continue-after-the-lecture",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "How to continue after the lecture?",
    "text": "How to continue after the lecture?\n\nThe best way is to keep programming and modeling\nWe are offering seminars and master thesis\nTry to find a way to apply programming in your work\nThere are many interesting topics to explore!\n\n\n\n\n\n\n\n\nGetting your supervisors on board is the hardest part! But note, that it is often worth it and the tools we have used are all free and open-source."
  },
  {
    "objectID": "lectures/lecture-13-presentation.html#concrete-next-steps",
    "href": "lectures/lecture-13-presentation.html#concrete-next-steps",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "Concrete Next Steps",
    "text": "Concrete Next Steps\n\nJoin online communities on Julia and Optimization\nContribute to open-source projects if you can\nFollow key researchers and practitioners\nStart a small personal project using the tools learned\n\n\n\n\n\n\n\n\nIf you want to start a small personal project, try to find a problem that you are interested in and that you can solve using the tools we have learned."
  },
  {
    "objectID": "lectures/lecture-13-presentation.html#start-pair-programming-with-ai",
    "href": "lectures/lecture-13-presentation.html#start-pair-programming-with-ai",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "Start Pair Programming with AI",
    "text": "Start Pair Programming with AI\n\nFirst, try to be confident with the basics of a language\nAlways try to understand the code you use\nIf you want to try AI pair programming, use Cursor as IDE\n\n\n\n\n\n\n\n\nCursor is a great IDE for AI pair programming, although it is not completely free. It has Claude and ChatGPT integrated and makes work much easier when compared to copying and pasting code."
  },
  {
    "objectID": "lectures/lecture-13-presentation.html#thats-it-for-the-lecture-series",
    "href": "lectures/lecture-13-presentation.html#thats-it-for-the-lecture-series",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "That’s it for the Lecture Series!",
    "text": "That’s it for the Lecture Series!\n\nI hope you enjoyed the lecture and found it helpful\nOn Friday, we will have a discussion session\nYou can earn the last half-bonus point for the exam\nI wish you all the best for your studies and your career!\n\n\n\n\n\n\n\n\nIf you have any questions on optimization in the future, feel free to contact me!"
  },
  {
    "objectID": "lectures/lecture-13-presentation.html#section-1",
    "href": "lectures/lecture-13-presentation.html#section-1",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "lectures/lecture-13-recap.html#topics-covered",
    "href": "lectures/lecture-13-recap.html#topics-covered",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "Topics Covered",
    "text": "Topics Covered\n\n\n\nTopic\nOriginal Problem1\n\n\n\n\nSolar Panel Transport\nClassic Transport Problem\n\n\nBeer Production\nCapacitated Lot Sizing Problem\n\n\nSplit Delivery Minimization\nMultiple-Quadratic-Knapsack Problem\n\n\nLibrary Routing\nCapacitated Vehicle Routing Problem\n\n\nPolice Service Districting\nP-Median Problem\n\n\nSafety Planning Hajj Pilgrimage\nScheduling Problem\n\n\nArena Seating\n2-D Knapsack Problem\n\n\nPassenger Flow Control\nNetwork Flow Problem",
    "crumbs": [
      "13 Recap",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-13-recap.html#section",
    "href": "lectures/lecture-13-recap.html#section",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "",
    "text": "Any questions\nregarding the\npast lectures?",
    "crumbs": [
      "13 Recap",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-13-recap.html#what-have-we-learned",
    "href": "lectures/lecture-13-recap.html#what-have-we-learned",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "What have we learned?",
    "text": "What have we learned?\n\nHow to identify and abstract real-world problems\nHow to start programming in Julia\nHow to model and solve optimization problems\nHow to question model assumptions\n\n. . .\n\n\n\n\n\n\nThat’s a lot and a great foundation for a seminar or a master thesis!",
    "crumbs": [
      "13 Recap",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-13-recap.html#how-to-continue-after-the-lecture",
    "href": "lectures/lecture-13-recap.html#how-to-continue-after-the-lecture",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "How to continue after the lecture?",
    "text": "How to continue after the lecture?\n\nThe best way is to keep programming and modeling\nWe are offering seminars and master thesis\nTry to find a way to apply programming in your work\nThere are many interesting topics to explore!\n\n. . .\n\n\n\n\n\n\nGetting your supervisors on board is the hardest part! But note, that it is often worth it and the tools we have used are all free and open-source.",
    "crumbs": [
      "13 Recap",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-13-recap.html#concrete-next-steps",
    "href": "lectures/lecture-13-recap.html#concrete-next-steps",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "Concrete Next Steps",
    "text": "Concrete Next Steps\n\nJoin online communities on Julia and Optimization\nContribute to open-source projects if you can\nFollow key researchers and practitioners\nStart a small personal project using the tools learned\n\n. . .\n\n\n\n\n\n\nIf you want to start a small personal project, try to find a problem that you are interested in and that you can solve using the tools we have learned.",
    "crumbs": [
      "13 Recap",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-13-recap.html#start-pair-programming-with-ai",
    "href": "lectures/lecture-13-recap.html#start-pair-programming-with-ai",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "Start Pair Programming with AI",
    "text": "Start Pair Programming with AI\n\nFirst, try to be confident with the basics of a language\nAlways try to understand the code you use\nIf you want to try AI pair programming, use Cursor as IDE\n\n. . .\n\n\n\n\n\n\nCursor is a great IDE for AI pair programming, although it is not completely free. It has Claude and ChatGPT integrated and makes work much easier when compared to copying and pasting code.",
    "crumbs": [
      "13 Recap",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-13-recap.html#thats-it-for-the-lecture-series",
    "href": "lectures/lecture-13-recap.html#thats-it-for-the-lecture-series",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "That’s it for the Lecture Series!",
    "text": "That’s it for the Lecture Series!\n\nI hope you enjoyed the lecture and found it helpful\nOn Friday, we will have a discussion session\nYou can earn the last half-bonus point for the exam\nI wish you all the best for your studies and your career!\n\n. . .\n\n\n\n\n\n\nIf you have any questions on optimization in the future, feel free to contact me!",
    "crumbs": [
      "13 Recap",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-13-recap.html#section-1",
    "href": "lectures/lecture-13-recap.html#section-1",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "13 Recap",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-13-recap.html#footnotes",
    "href": "lectures/lecture-13-recap.html#footnotes",
    "title": "Lecture XIII - Recap and Discussion",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nOriginal problem structure we used/extended/exploited to address the topic.↩︎",
    "crumbs": [
      "13 Recap",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#covid-19-pandemic",
    "href": "lectures/lecture-11-presentation.html#covid-19-pandemic",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Covid-19 Pandemic",
    "text": "Covid-19 Pandemic"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#challenges-for-live-events",
    "href": "lectures/lecture-11-presentation.html#challenges-for-live-events",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Challenges for Live Events",
    "text": "Challenges for Live Events\n\nOverall number of participants at events was restricted\nCertain spacing between participants had to be ensured\nLarger events required vaccination certificates for all\n\n\nQuestion: What are the main issues for the organizers?"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#main-difficulties",
    "href": "lectures/lecture-11-presentation.html#main-difficulties",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Main Difficulties",
    "text": "Main Difficulties\n\nOrganization of larger events is costly\nEven without a pandemic a financial risk\nAdministrative Burden for vaccination certificates\nReduced capacity is a loss of revenue\nImplementing and enforcing distancing rules\nManaging different priorities of groups"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#idea-optimizing-seating-plans",
    "href": "lectures/lecture-11-presentation.html#idea-optimizing-seating-plans",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Idea: Optimizing Seating Plans",
    "text": "Idea: Optimizing Seating Plans"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#background",
    "href": "lectures/lecture-11-presentation.html#background",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Background",
    "text": "Background\n\nApplications: sport arenas, concert halls, movie theaters, lecture halls, etc.\nPeople from the same group are seated together\nVenues have specific seating, season tickets, VIPs, etc.\n\n\n\n\n\n\n\n\nOptimizing seating plans can help to maximize revenue while ensuring distancing rules and other constraints are met."
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#example-two-different-plans",
    "href": "lectures/lecture-11-presentation.html#example-two-different-plans",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Example: Two different plans",
    "text": "Example: Two different plans\n\n\n\n\n\nFixed double-seat layout\n\n\n\n\n\n\n\n\nFlexible group-value layout"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#different-approaches-possible",
    "href": "lectures/lecture-11-presentation.html#different-approaches-possible",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Different Approaches Possible",
    "text": "Different Approaches Possible\n\nOperational\nTactical\nStrategic\n\n\nQuestion: What are these approaches in general and how do they relate to arena seating?"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#operational",
    "href": "lectures/lecture-11-presentation.html#operational",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Operational",
    "text": "Operational\n\nShort-term, day-to-day decisions\nFocused on immediate execution\n\n\nQuestion: What is an example for this approach?\n\n\n\nGiven tomorrow’s demand of differently sized groups\nScore groups (importance, sponsors, VIP, season ticket,…)\nAssigning specific seats for tomorrow’s event"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#tactical",
    "href": "lectures/lecture-11-presentation.html#tactical",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Tactical",
    "text": "Tactical\n\nMedium-term planning (weeks to months)\nBridges operational and strategic levels\n\n\nQuestion: What is an example for this approach?\n\n\n\nGiven distribution of expected demand for groups\nScore groups (importance, sponsors, VIP, season ticket,…)\nPlan seating arrangements for an upcoming season"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#strategic",
    "href": "lectures/lecture-11-presentation.html#strategic",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Strategic",
    "text": "Strategic\n\nLong-term planning (months to years)\nFocus on overall goals and policies\n\n\nQuestion: What is an example for this approach?\n\n\n\nDesigning flexible seating layouts that work for scenarios\nMaximize the overall space utilization\nSell the resulting maximized seating pattern on market"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#main-question",
    "href": "lectures/lecture-11-presentation.html#main-question",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Main Question",
    "text": "Main Question\nTask: Fill the seating area given distancing regulations and venue-specific constraints.\nQuestion: Any ideas on how to approach this?"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#knapsack-problem",
    "href": "lectures/lecture-11-presentation.html#knapsack-problem",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Knapsack Problem",
    "text": "Knapsack Problem\n\n\nStandard model in Operations Research\nSelect items from a pool under capacity constraints"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#knapsack-problem-in-2d",
    "href": "lectures/lecture-11-presentation.html#knapsack-problem-in-2d",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Knapsack Problem in 2D",
    "text": "Knapsack Problem in 2D\n\n\nNow, Items block space in 2D, as illustrated here"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#adaption-to-seating",
    "href": "lectures/lecture-11-presentation.html#adaption-to-seating",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Adaption to Seating",
    "text": "Adaption to Seating\n\nHorizontal dimension to place groups of participants\nVertical dimension to ensure enough spacing between rows\nMaximize the “value” of the allocated groups\nValue can be the number of seats or a score\n\n\n\n\n\n\n\n\nIdea behind the model was developed by Dr. Matthes Koch."
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#hands-on-exercise",
    "href": "lectures/lecture-11-presentation.html#hands-on-exercise",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Hands-on Exercise",
    "text": "Hands-on Exercise\nTask: Allocate as many high-value groups as possible."
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#available-groups",
    "href": "lectures/lecture-11-presentation.html#available-groups",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Available Groups",
    "text": "Available Groups\n\n\n\nGrouptype\nReq. Seats\nScore\nAvailable\nAllocated\nValue\n\n\n\n\na\n1\n1\n3\n\n\n\n\nb\n2\n2\n2\n\n\n\n\nc\n2\n4\n3\n\n\n\n\nd\n4\n4\n5\n\n\n\n\ne\n4\n5\n2\n\n\n\n\nf\n6\n6\n1\n\n\n\n\ng\n6\n12\n1\n\n\n\n\nTotal"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#seating-constraints",
    "href": "lectures/lecture-11-presentation.html#seating-constraints",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Seating Constraints",
    "text": "Seating Constraints\n\n1 empty seat between groups\n1 empty seat front-to-back\n1 empty seat diagonally\nOnly 2 groups per row are allowed\nGrey seats represent obstacles\n\n\nYou have 5 minutes to find a solution.\nQuestion: What is your total score?"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#sets",
    "href": "lectures/lecture-11-presentation.html#sets",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Sets?",
    "text": "Sets?\nQuestion: What could be the sets?\n\n\n\\(\\mathcal{G}\\) - Set of groups, indexed by \\(g\\)\n\\(\\mathcal{R}\\) - Set of rows, indexed by \\(r\\)\n\\(\\mathcal{C}\\) - Set of columns, indexed by \\(c\\)\n\\(\\mathcal{C}_{g,r}\\) - Available seats of row \\(r\\) for group \\(g\\), indexed by \\(c\\)\n\n\n\n\n\n\n\n\n\n\\(\\mathcal{C}_r\\) ensures that we only consider unblocked seats in each row."
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#parameters",
    "href": "lectures/lecture-11-presentation.html#parameters",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Parameters?",
    "text": "Parameters?\nQuestion: What could be possible parameters?\n\n\n\\(p_r\\) - Maximal number of groups allowed in one row \\(r\\)\n\\(d_g\\) - Required seats of a group \\(g\\) in a row\n\\(h\\) - Safety distance between groups sitting next to each other\n\\(b\\) - Vertical safety distance between groups\n\\(v_g\\) - Value of an allocation of the group \\(g\\)"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#decision-variable",
    "href": "lectures/lecture-11-presentation.html#decision-variable",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Decision Variable?",
    "text": "Decision Variable?\n\n\n\n\n\n\nOur goal is to:\n\n\nMaximize the group values by filling the seating area given distancing regulations between groups and venue-specific constraints.\n\n\n\n\n\n\n\n\n\nEach group is represented by one binary variable. We don’t need to block each seat explicitly with a binary variable!"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#decision-variable-1",
    "href": "lectures/lecture-11-presentation.html#decision-variable-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Decision Variable",
    "text": "Decision Variable\n\n\n\n\n\n\nWe need the following sets:\n\n\n\nAll the groups, \\(g \\in \\mathcal{G}\\)\nAll the rows, \\(r \\in \\mathcal{R}\\)\nAll the columns, \\(c \\in \\mathcal{C}\\)\n\n\n\n\nQuestion: What could be our decision variable?\n\n\n\\(X_{g,r,c}\\) - 1, if first left seat of \\(g\\) is assigned to \\(r\\) in \\(c\\), else 0"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#objective-function",
    "href": "lectures/lecture-11-presentation.html#objective-function",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Objective Function?",
    "text": "Objective Function?\n\n\n\n\n\n\nOur main objective is to:\n\n\nMaximize the group values by filling the seating area given distancing regulations between groups and venue-specific constraints.\n\n\n\n\nQuestion: How again are groups allocated?\n\n\n\nBy the allocation of the first left seat of a group to a row and column in the seating area"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#objective-function-1",
    "href": "lectures/lecture-11-presentation.html#objective-function-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Objective Function",
    "text": "Objective Function\n\n\n\n\n\n\nWe need the following parameters and variables:\n\n\n\n\\(v_g\\) - Value of an allocation of the group \\(g\\)\n\\(X_{g,r,c}\\) - 1, if first left seat of \\(g\\) is assigned to \\(r\\) in \\(c\\), else 0\n\n\n\n\n\nQuestion: What could be our objective function?\n\n\n\\[\n\\text{maximize} \\quad \\sum_{g \\in \\mathcal{G}} \\sum_{r \\in \\mathcal{R}} \\sum_{c\\in \\mathcal{C}_{g,r}} v_g \\times X_{g,r,c}\n\\]"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#necessary-constraints",
    "href": "lectures/lecture-11-presentation.html#necessary-constraints",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Necessary Constraints",
    "text": "Necessary Constraints\nQuestion: What constraints do we need?\n\n\nAssign each group only once\nRestrict the number of groups in each row\nEnsure the horizontal social distance\nKeep the vertical social distance"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#assign-each-group-only-once",
    "href": "lectures/lecture-11-presentation.html#assign-each-group-only-once",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Assign Each Group Only Once?",
    "text": "Assign Each Group Only Once?\n\n\n\n\n\n\nThe goal of this constraint is to:\n\n\nEnsure that each group is allocated only once in the entire seating area.\n\n\n\n\n\n\n\n\n\n\nWe need the following:\n\n\n\n\\(X_{g,r,c}\\) - 1, if first left seat of \\(g\\) is assigned to \\(r\\) in \\(c\\), else 0\n\\(\\mathcal{G}\\) - Set of groups, indexed by \\(g\\)\n\\(\\mathcal{R}\\) - Set of rows, indexed by \\(r\\)\n\\(\\mathcal{C}_{g,r}\\) - Set of columns of row \\(r\\) for group \\(g\\), indexed by \\(c\\)"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#assign-each-group-only-once-1",
    "href": "lectures/lecture-11-presentation.html#assign-each-group-only-once-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Assign Each Group Only Once",
    "text": "Assign Each Group Only Once\nQuestion: What could be the constraint?\n\n\\[\n\\sum_{r \\in \\mathcal{R}} \\sum_{c \\in \\mathcal{C}_{g,r}} X_{g,r,c} \\leq 1 \\quad \\forall g \\in \\mathcal{G}\n\\]\n\n\n\n\n\n\n\n\nThis “set packing” constraint ensures that a group is only assigned once."
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#restrict-groups-per-row",
    "href": "lectures/lecture-11-presentation.html#restrict-groups-per-row",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Restrict Groups Per Row?",
    "text": "Restrict Groups Per Row?\n\n\n\n\n\n\nThe goal of this constraint is to:\n\n\nEnsure that the number of groups in each row does not exceed the maximum allowed number of groups.\n\n\n\n\n\n\n\n\n\n\nWe need the following:\n\n\n\n\\(p_r\\) - Maximal number of groups allowed in one row \\(r\\)\n\\(X_{g,r,c}\\) - 1, if first left seat of \\(g\\) is assigned to \\(r\\) in \\(c\\), else 0"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#restrict-groups-per-row-1",
    "href": "lectures/lecture-11-presentation.html#restrict-groups-per-row-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Restrict Groups Per Row",
    "text": "Restrict Groups Per Row\nQuestion: What could be the constraint?\n\n\\[\n\\sum_{g\\in \\mathcal{G}}\\sum_{c\\in \\mathcal{C}_{g,r}} X_{g,r,c} \\leq p_{r} \\quad r \\in \\mathcal{R}\n\\]\n\n\n\n\n\n\n\n\nWe want to place as many highly scoring groups as possible, but people need to move to buy drinks or use restroom. Depending on the venue, they should not cross other groups in the same row."
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#section",
    "href": "lectures/lecture-11-presentation.html#section",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "",
    "text": "The last two\nconstraints are\nsomewhat tricky!"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#central-idea",
    "href": "lectures/lecture-11-presentation.html#central-idea",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Central Idea",
    "text": "Central Idea\n\n\n\n\n\n\n\n\nAssume one seat between groups must be kept empty. If one group takes seat 8, it uses seats 8 and 9. We thus cannot allocate another group of size 2 to seats 6, 7 or 8."
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#horizontal-social-distance",
    "href": "lectures/lecture-11-presentation.html#horizontal-social-distance",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Horizontal Social Distance?",
    "text": "Horizontal Social Distance?\nQuestion: Any ideas how to implement this?\n\n\n\n\n\n\n\nThe goal of this constraint is to:\n\n\nEnsure that the horizontal social distance is maintained between groups.\n\n\n\n\n\n\n\n\n\n\n\nWe need the following:\n\n\n\n\\(X_{g,r,c}\\) - 1, if first left seat of \\(g\\) is assigned to \\(r\\) in \\(c\\), else 0\n\\(d_g\\) - Required seats of group \\(g\\) in a row\n\\(h\\) - Safety distance between groups sitting next to each other"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#horizontal-social-distance-1",
    "href": "lectures/lecture-11-presentation.html#horizontal-social-distance-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Horizontal Social Distance",
    "text": "Horizontal Social Distance\nAs the constraint is based on a rather complex set, you don’t have to find it by yourself.\n\n\\[\\sum_{g \\in \\mathcal{G}} \\sum_{\\tilde{c} \\in \\tilde{\\mathcal{C}}_{c,g}} X_{g,r,\\tilde{c}} \\leq 1 \\quad \\forall r\\in \\mathcal{R}, c\\in \\mathcal{C}\\]\n\n\n\n\n\n\n\n\nAt first glance, this constraint looks rather easy, but it is not - it is based on the set \\(\\mathcal{C}_{c,g}\\) not defined yet in the lecture."
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#the-social-distancing-set",
    "href": "lectures/lecture-11-presentation.html#the-social-distancing-set",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "The Social Distancing Set",
    "text": "The Social Distancing Set\n\\[\\tilde{\\mathcal{C}}_{c,g} = \\{\\tilde{c}\\in \\mathcal{C}| c - d_g + 1 - h \\leq \\tilde{c} \\leq c \\}\\]\n\n\n\n\n\n\n\nRemember:\n\n\n\n\\(d_g\\) - Required seats of group \\(g\\) in a row\n\\(h\\) - Safety distance between groups sitting next to each other\n\n\n\n\n\n\nQuestion: Can anybody explain the set?"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#example-two-groups",
    "href": "lectures/lecture-11-presentation.html#example-two-groups",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Example: Two Groups",
    "text": "Example: Two Groups\n\n\\[\\underbrace{X_{1,2,\\textbf{6}}+X_{1,2,\\textbf{7}}+X_{1,2,\\textbf{8}}}_{g=1} + \\underbrace{X_{2,2,\\textbf{6}}+X_{2,2,\\textbf{7}}+X_{2,2,\\textbf{8}}}_{g=2} \\leq 1 \\quad (r=2,c=8)\\]"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#example-different-group-sizes",
    "href": "lectures/lecture-11-presentation.html#example-different-group-sizes",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Example: Different Group Sizes",
    "text": "Example: Different Group Sizes\n\n\\[\\underbrace{X_{1,2,\\textbf{6}}+X_{1,2,\\textbf{7}}+X_{1,2,\\textbf{8}}}_{g=1} + \\underbrace{X_{2,2,\\textbf{5}}+X_{2,2,\\textbf{6}}+X_{2,2,\\textbf{7}}+X_{2,2,\\textbf{8}}}_{g=2} \\leq 1 \\quad (r=2,c=8)\\]"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#example-three-groups",
    "href": "lectures/lecture-11-presentation.html#example-three-groups",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Example: Three Groups",
    "text": "Example: Three Groups\n\n\n\n\\[\n\\underbrace{X_{1,2,\\textbf{6}}+X_{1,2,\\textbf{7}}+X_{1,2,\\textbf{8}}}_{g=1} + \\underbrace{X_{2,2,\\textbf{6}}+X_{2,2,\\textbf{7}}+X_{2,2,\\textbf{8}}}_{g=2} + \\underbrace{X_{3,2,\\textbf{5}}+X_{3,2,\\textbf{6}}+X_{3,2,\\textbf{7}}+X_{3,2,\\textbf{8}}}_{g=3} \\leq 1 \\quad (r=2,c=8)\n\\]"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#section-1",
    "href": "lectures/lecture-11-presentation.html#section-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "",
    "text": "Do you see\nthe pattern?"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#vertical-social-distance",
    "href": "lectures/lecture-11-presentation.html#vertical-social-distance",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Vertical Social Distance?",
    "text": "Vertical Social Distance?\n\n\n\n\n\n\nThe goal of this constraint is to:\n\n\nEnsure that the vertical social distance is maintained between groups.\n\n\n\n\n\n\n\n\n\n\nWe need the following:\n\n\n\n\\(b\\) - Vertical safety distance between groups\n\\(X_{g,r,c}\\) - 1, if first left seat of \\(g\\) is assigned to \\(r\\) in \\(c\\), else 0"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#vertical-social-distance-1",
    "href": "lectures/lecture-11-presentation.html#vertical-social-distance-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Vertical Social Distance",
    "text": "Vertical Social Distance\nQuestion: What could be the constraint?\n\n\n\n\n\n\n\nIt is an extension of the horizontal social distance constraint we used before, but now we block a rectangular area instead of a single row.\n\n\n\n\n\n\\[\n\\sum_{g \\in \\mathcal{G}} \\sum_{\\tilde{r} \\in \\mathcal{R}_r} \\sum_{\\tilde{c} \\in \\tilde{\\mathcal{C}}_{cg}} X_{g\\tilde{r}\\tilde{c}} \\leq 1 \\quad \\forall r\\in \\mathcal{R}, c\\in \\mathcal{C}\n\\]"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#vertical-distance-set",
    "href": "lectures/lecture-11-presentation.html#vertical-distance-set",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Vertical Distance Set",
    "text": "Vertical Distance Set\nQuestion: What could be the set?\n\n\\[\n\\tilde{\\mathcal{R}}_{r} = \\{\\tilde{r}\\in \\mathcal{R}| r-b \\leq \\tilde{r} \\leq r \\}\n\\]\n\n\n\n\n\n\n\n\nRemember:\n\n\\(b\\) - Vertical safety distance between groups\n\\(X_{g,r,c}\\) - 1, if first left seat of \\(g\\) is assigned to \\(r\\) in \\(c\\), else 0\n\n\n\n\n\n\nLet’s look at an example."
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#example-two-groups-1",
    "href": "lectures/lecture-11-presentation.html#example-two-groups-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Example: Two Groups",
    "text": "Example: Two Groups\n\n\nYellow seats are blocked by the group in row 3 and column 8\nBlue allocations are possible (if second group has size 2)"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#arena-seating-problem",
    "href": "lectures/lecture-11-presentation.html#arena-seating-problem",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Arena Seating Problem",
    "text": "Arena Seating Problem\n\n\n\\[\n\\text{maximize} \\quad \\sum_{g \\in \\mathcal{G}} \\sum_{r \\in \\mathcal{R}} \\sum_{c\\in \\mathcal{C}_r} v_g \\times X_{g,r,c}\n\\] subject to: \\[\n\\begin{align*}\n& \\sum_{r \\in \\mathcal{R}}\\sum_{c \\in \\mathcal{C}_r} X_{g,r,c} \\leq 1 && \\forall g \\in \\mathcal{G} \\\\\n& \\sum_{g \\in \\mathcal{G}}\\sum_{c\\in \\mathcal{C}_r} X_{g,r,c} \\leq p_r && \\forall r \\in \\mathcal{R} \\\\\n& \\sum_{g \\in \\mathcal{G}} \\sum_{\\tilde{r} \\in \\tilde{\\mathcal{R}}_{r}} \\sum_{\\tilde{c} \\in \\tilde{\\mathcal{C}}_{c,g}} X_{g,\\tilde{r},\\tilde{c}} \\leq 1 && \\forall r\\in \\mathcal{R}, c\\in \\mathcal{C} \\\\\n& X_{g,r,c} \\in \\{0,1\\} && \\forall g \\in \\mathcal{G}, \\forall r\\in \\mathcal{R}, c\\in \\mathcal{C}_r\n\\end{align*}\n\\]"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#characteristics",
    "href": "lectures/lecture-11-presentation.html#characteristics",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Characteristics",
    "text": "Characteristics\nQuestions: On model characteristics\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domains do we have?"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#model-assumptions",
    "href": "lectures/lecture-11-presentation.html#model-assumptions",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\nWhat assumptions have we made?\nIs our approach strategic or tactical/operational?\nHave we considered all social distancing constraints?\nWhat about aisle seats?\nCan you think of any other real-world constraints?"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#arena-seating-optimization",
    "href": "lectures/lecture-11-presentation.html#arena-seating-optimization",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Arena Seating Optimization",
    "text": "Arena Seating Optimization"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#case-study-vfl-osnabrück",
    "href": "lectures/lecture-11-presentation.html#case-study-vfl-osnabrück",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Case study VfL Osnabrück",
    "text": "Case study VfL Osnabrück\n\nRelegation Return Match in 2021\n241 additional seats allocated (+12 percent)\nCompliance with all distancing requirements\nApproval from authorities\n\n\n\n\n\n\n\n\nEstimated additional revenue of 8,435 EUR for one match."
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#seating-plan",
    "href": "lectures/lecture-11-presentation.html#seating-plan",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Seating Plan",
    "text": "Seating Plan"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#related-work",
    "href": "lectures/lecture-11-presentation.html#related-work",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Related Work",
    "text": "Related Work\nSimilar studies have been conducted globally:\n\nUS College-level venues, e.g. Football, Basketball, Hockey\nMusic Hall Eindhoven\nSafe Seating Solutions platform\nGeneral 2D-Knapsack applications"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#optimization-benefits",
    "href": "lectures/lecture-11-presentation.html#optimization-benefits",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Optimization Benefits",
    "text": "Optimization Benefits\n\nOptimization enables rapid generation and evaluation\nWe can easily adapt to various distancing requirements:\n\nHorizontal and vertical spacing between groups\nGroups per row limits\nAisle seat restrictions\nGroup size constraints\nMulti-row group allocation"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#wrap-up",
    "href": "lectures/lecture-11-presentation.html#wrap-up",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Wrap Up",
    "text": "Wrap Up\n\nRevenue optimization through applied optimization\nIncreased participant capacity vs basic approaches\nFlexible adaptation to various distancing requirements\nCan be adapted easily to any seating requirements\n\n\n\n\n\n\n\n\nAnd that’s it for todays lecture!\n\n\nWe now have covered the arena seating problem based on a real-world application and are ready to start solving the corresponding tasks in the upcoming tutorial."
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#section-2",
    "href": "lectures/lecture-11-presentation.html#section-2",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "lectures/lecture-11-presentation.html#literature-i",
    "href": "lectures/lecture-11-presentation.html#literature-i",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lecture-11-distancing.html",
    "href": "lectures/lecture-11-distancing.html",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "",
    "text": "Overall number of participants at events was restricted\nCertain spacing between participants had to be ensured\nLarger events required vaccination certificates for all\n\n. . .\nQuestion: What are the main issues for the organizers?\n\n\n\n\nOrganization of larger events is costly\nEven without a pandemic a financial risk\nAdministrative Burden for vaccination certificates\nReduced capacity is a loss of revenue\nImplementing and enforcing distancing rules\nManaging different priorities of groups\n\n\n\n\n\n\n\n\n\n\n\nApplications: sport arenas, concert halls, movie theaters, lecture halls, etc.\nPeople from the same group are seated together\nVenues have specific seating, season tickets, VIPs, etc.\n\n. . .\n\n\n\n\n\n\nOptimizing seating plans can help to maximize revenue while ensuring distancing rules and other constraints are met.",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#challenges-for-live-events",
    "href": "lectures/lecture-11-distancing.html#challenges-for-live-events",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "",
    "text": "Overall number of participants at events was restricted\nCertain spacing between participants had to be ensured\nLarger events required vaccination certificates for all\n\n. . .\nQuestion: What are the main issues for the organizers?",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#main-difficulties",
    "href": "lectures/lecture-11-distancing.html#main-difficulties",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "",
    "text": "Organization of larger events is costly\nEven without a pandemic a financial risk\nAdministrative Burden for vaccination certificates\nReduced capacity is a loss of revenue\nImplementing and enforcing distancing rules\nManaging different priorities of groups",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#background",
    "href": "lectures/lecture-11-distancing.html#background",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "",
    "text": "Applications: sport arenas, concert halls, movie theaters, lecture halls, etc.\nPeople from the same group are seated together\nVenues have specific seating, season tickets, VIPs, etc.\n\n. . .\n\n\n\n\n\n\nOptimizing seating plans can help to maximize revenue while ensuring distancing rules and other constraints are met.",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#example-two-different-plans",
    "href": "lectures/lecture-11-distancing.html#example-two-different-plans",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Example: Two different plans",
    "text": "Example: Two different plans\n\n\n\n\n\nFixed double-seat layout\n\n\n\n\n\n\n\n\nFlexible group-value layout",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#different-approaches-possible",
    "href": "lectures/lecture-11-distancing.html#different-approaches-possible",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Different Approaches Possible",
    "text": "Different Approaches Possible\n\nOperational\nTactical\nStrategic\n\n. . .\nQuestion: What are these approaches in general and how do they relate to arena seating?",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#operational",
    "href": "lectures/lecture-11-distancing.html#operational",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Operational",
    "text": "Operational\n\nShort-term, day-to-day decisions\nFocused on immediate execution\n\n. . .\nQuestion: What is an example for this approach?\n. . .\n\nGiven tomorrow’s demand of differently sized groups\nScore groups (importance, sponsors, VIP, season ticket,…)\nAssigning specific seats for tomorrow’s event",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#tactical",
    "href": "lectures/lecture-11-distancing.html#tactical",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Tactical",
    "text": "Tactical\n\nMedium-term planning (weeks to months)\nBridges operational and strategic levels\n\n. . .\nQuestion: What is an example for this approach?\n. . .\n\nGiven distribution of expected demand for groups\nScore groups (importance, sponsors, VIP, season ticket,…)\nPlan seating arrangements for an upcoming season",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#strategic",
    "href": "lectures/lecture-11-distancing.html#strategic",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Strategic",
    "text": "Strategic\n\nLong-term planning (months to years)\nFocus on overall goals and policies\n\n. . .\nQuestion: What is an example for this approach?\n. . .\n\nDesigning flexible seating layouts that work for scenarios\nMaximize the overall space utilization\nSell the resulting maximized seating pattern on market",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#main-question",
    "href": "lectures/lecture-11-distancing.html#main-question",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Main Question",
    "text": "Main Question\nTask: Fill the seating area given distancing regulations and venue-specific constraints.\nQuestion: Any ideas on how to approach this?",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#knapsack-problem",
    "href": "lectures/lecture-11-distancing.html#knapsack-problem",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Knapsack Problem",
    "text": "Knapsack Problem\n\n\nStandard model in Operations Research\nSelect items from a pool under capacity constraints",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#knapsack-problem-in-2d",
    "href": "lectures/lecture-11-distancing.html#knapsack-problem-in-2d",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Knapsack Problem in 2D",
    "text": "Knapsack Problem in 2D\n\n\nNow, Items block space in 2D, as illustrated here",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#adaption-to-seating",
    "href": "lectures/lecture-11-distancing.html#adaption-to-seating",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Adaption to Seating",
    "text": "Adaption to Seating\n\nHorizontal dimension to place groups of participants\nVertical dimension to ensure enough spacing between rows\nMaximize the “value” of the allocated groups\nValue can be the number of seats or a score\n\n. . .\n\n\n\n\n\n\nIdea behind the model was developed by Dr. Matthes Koch.",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#hands-on-exercise",
    "href": "lectures/lecture-11-distancing.html#hands-on-exercise",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Hands-on Exercise",
    "text": "Hands-on Exercise\nTask: Allocate as many high-value groups as possible.",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#available-groups",
    "href": "lectures/lecture-11-distancing.html#available-groups",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Available Groups",
    "text": "Available Groups\n\n\n\nGrouptype\nReq. Seats\nScore\nAvailable\nAllocated\nValue\n\n\n\n\na\n1\n1\n3\n\n\n\n\nb\n2\n2\n2\n\n\n\n\nc\n2\n4\n3\n\n\n\n\nd\n4\n4\n5\n\n\n\n\ne\n4\n5\n2\n\n\n\n\nf\n6\n6\n1\n\n\n\n\ng\n6\n12\n1\n\n\n\n\nTotal",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#seating-constraints",
    "href": "lectures/lecture-11-distancing.html#seating-constraints",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Seating Constraints",
    "text": "Seating Constraints\n\n1 empty seat between groups\n1 empty seat front-to-back\n1 empty seat diagonally\nOnly 2 groups per row are allowed\nGrey seats represent obstacles\n\n. . .\nYou have 5 minutes to find a solution.\nQuestion: What is your total score?",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#sets",
    "href": "lectures/lecture-11-distancing.html#sets",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Sets?",
    "text": "Sets?\nQuestion: What could be the sets?\n. . .\n\n\\(\\mathcal{G}\\) - Set of groups, indexed by \\(g\\)\n\\(\\mathcal{R}\\) - Set of rows, indexed by \\(r\\)\n\\(\\mathcal{C}\\) - Set of columns, indexed by \\(c\\)\n\\(\\mathcal{C}_{g,r}\\) - Available seats of row \\(r\\) for group \\(g\\), indexed by \\(c\\)\n\n. . .\n\n\n\n\n\n\n\\(\\mathcal{C}_r\\) ensures that we only consider unblocked seats in each row.",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#parameters",
    "href": "lectures/lecture-11-distancing.html#parameters",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Parameters?",
    "text": "Parameters?\nQuestion: What could be possible parameters?\n. . .\n\n\\(p_r\\) - Maximal number of groups allowed in one row \\(r\\)\n\\(d_g\\) - Required seats of a group \\(g\\) in a row\n\\(h\\) - Safety distance between groups sitting next to each other\n\\(b\\) - Vertical safety distance between groups\n\\(v_g\\) - Value of an allocation of the group \\(g\\)",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#decision-variable",
    "href": "lectures/lecture-11-distancing.html#decision-variable",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Decision Variable?",
    "text": "Decision Variable?\n\n\n\n\n\n\nImportantOur goal is to:\n\n\n\nMaximize the group values by filling the seating area given distancing regulations between groups and venue-specific constraints.\n\n\n\n\n\n\n\n\nEach group is represented by one binary variable. We don’t need to block each seat explicitly with a binary variable!",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#decision-variable-1",
    "href": "lectures/lecture-11-distancing.html#decision-variable-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Decision Variable",
    "text": "Decision Variable\n\n\n\n\n\n\nNoteWe need the following sets:\n\n\n\n\nAll the groups, \\(g \\in \\mathcal{G}\\)\nAll the rows, \\(r \\in \\mathcal{R}\\)\nAll the columns, \\(c \\in \\mathcal{C}\\)\n\n\n\nQuestion: What could be our decision variable?\n. . .\n\n\\(X_{g,r,c}\\) - 1, if first left seat of \\(g\\) is assigned to \\(r\\) in \\(c\\), else 0",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#objective-function",
    "href": "lectures/lecture-11-distancing.html#objective-function",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Objective Function?",
    "text": "Objective Function?\n\n\n\n\n\n\nImportantOur main objective is to:\n\n\n\nMaximize the group values by filling the seating area given distancing regulations between groups and venue-specific constraints.\n\n\n. . .\nQuestion: How again are groups allocated?\n. . .\n\nBy the allocation of the first left seat of a group to a row and column in the seating area",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#objective-function-1",
    "href": "lectures/lecture-11-distancing.html#objective-function-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Objective Function",
    "text": "Objective Function\n\n\n\n\n\n\nNoteWe need the following parameters and variables:\n\n\n\n\n\\(v_g\\) - Value of an allocation of the group \\(g\\)\n\\(X_{g,r,c}\\) - 1, if first left seat of \\(g\\) is assigned to \\(r\\) in \\(c\\), else 0\n\n\n\n. . .\nQuestion: What could be our objective function?\n. . .\n\\[\n\\text{maximize} \\quad \\sum_{g \\in \\mathcal{G}} \\sum_{r \\in \\mathcal{R}} \\sum_{c\\in \\mathcal{C}_{g,r}} v_g \\times X_{g,r,c}\n\\]",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#necessary-constraints",
    "href": "lectures/lecture-11-distancing.html#necessary-constraints",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Necessary Constraints",
    "text": "Necessary Constraints\nQuestion: What constraints do we need?\n. . .\n\nAssign each group only once\nRestrict the number of groups in each row\nEnsure the horizontal social distance\nKeep the vertical social distance",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#assign-each-group-only-once",
    "href": "lectures/lecture-11-distancing.html#assign-each-group-only-once",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Assign Each Group Only Once?",
    "text": "Assign Each Group Only Once?\n\n\n\n\n\n\nImportantThe goal of this constraint is to:\n\n\n\nEnsure that each group is allocated only once in the entire seating area.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following:\n\n\n\n\n\\(X_{g,r,c}\\) - 1, if first left seat of \\(g\\) is assigned to \\(r\\) in \\(c\\), else 0\n\\(\\mathcal{G}\\) - Set of groups, indexed by \\(g\\)\n\\(\\mathcal{R}\\) - Set of rows, indexed by \\(r\\)\n\\(\\mathcal{C}_{g,r}\\) - Set of columns of row \\(r\\) for group \\(g\\), indexed by \\(c\\)",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#assign-each-group-only-once-1",
    "href": "lectures/lecture-11-distancing.html#assign-each-group-only-once-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Assign Each Group Only Once",
    "text": "Assign Each Group Only Once\nQuestion: What could be the constraint?\n. . .\n\\[\n\\sum_{r \\in \\mathcal{R}} \\sum_{c \\in \\mathcal{C}_{g,r}} X_{g,r,c} \\leq 1 \\quad \\forall g \\in \\mathcal{G}\n\\]\n. . .\n\n\n\n\n\n\nThis “set packing” constraint ensures that a group is only assigned once.",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#restrict-groups-per-row",
    "href": "lectures/lecture-11-distancing.html#restrict-groups-per-row",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Restrict Groups Per Row?",
    "text": "Restrict Groups Per Row?\n\n\n\n\n\n\nImportantThe goal of this constraint is to:\n\n\n\nEnsure that the number of groups in each row does not exceed the maximum allowed number of groups.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following:\n\n\n\n\n\\(p_r\\) - Maximal number of groups allowed in one row \\(r\\)\n\\(X_{g,r,c}\\) - 1, if first left seat of \\(g\\) is assigned to \\(r\\) in \\(c\\), else 0",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#restrict-groups-per-row-1",
    "href": "lectures/lecture-11-distancing.html#restrict-groups-per-row-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Restrict Groups Per Row",
    "text": "Restrict Groups Per Row\nQuestion: What could be the constraint?\n. . .\n\\[\n\\sum_{g\\in \\mathcal{G}}\\sum_{c\\in \\mathcal{C}_{g,r}} X_{g,r,c} \\leq p_{r} \\quad r \\in \\mathcal{R}\n\\]\n. . .\n\n\n\n\n\n\nWe want to place as many highly scoring groups as possible, but people need to move to buy drinks or use restroom. Depending on the venue, they should not cross other groups in the same row.",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#section",
    "href": "lectures/lecture-11-distancing.html#section",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "",
    "text": "The last two\nconstraints are\nsomewhat tricky!",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#central-idea",
    "href": "lectures/lecture-11-distancing.html#central-idea",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Central Idea",
    "text": "Central Idea\n\n. . .\n\n\n\n\n\n\nAssume one seat between groups must be kept empty. If one group takes seat 8, it uses seats 8 and 9. We thus cannot allocate another group of size 2 to seats 6, 7 or 8.",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#horizontal-social-distance",
    "href": "lectures/lecture-11-distancing.html#horizontal-social-distance",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Horizontal Social Distance?",
    "text": "Horizontal Social Distance?\nQuestion: Any ideas how to implement this?\n. . .\n\n\n\n\n\n\nImportantThe goal of this constraint is to:\n\n\n\nEnsure that the horizontal social distance is maintained between groups.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following:\n\n\n\n\n\\(X_{g,r,c}\\) - 1, if first left seat of \\(g\\) is assigned to \\(r\\) in \\(c\\), else 0\n\\(d_g\\) - Required seats of group \\(g\\) in a row\n\\(h\\) - Safety distance between groups sitting next to each other",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#horizontal-social-distance-1",
    "href": "lectures/lecture-11-distancing.html#horizontal-social-distance-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Horizontal Social Distance",
    "text": "Horizontal Social Distance\nAs the constraint is based on a rather complex set, you don’t have to find it by yourself.\n. . .\n\\[\\sum_{g \\in \\mathcal{G}} \\sum_{\\tilde{c} \\in \\tilde{\\mathcal{C}}_{c,g}} X_{g,r,\\tilde{c}} \\leq 1 \\quad \\forall r\\in \\mathcal{R}, c\\in \\mathcal{C}\\]\n. . .\n\n\n\n\n\n\nAt first glance, this constraint looks rather easy, but it is not - it is based on the set \\(\\mathcal{C}_{c,g}\\) not defined yet in the lecture.",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#the-social-distancing-set",
    "href": "lectures/lecture-11-distancing.html#the-social-distancing-set",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "The Social Distancing Set",
    "text": "The Social Distancing Set\n\\[\\tilde{\\mathcal{C}}_{c,g} = \\{\\tilde{c}\\in \\mathcal{C}| c - d_g + 1 - h \\leq \\tilde{c} \\leq c \\}\\]\n. . .\n\n\n\n\n\n\nNoteRemember:\n\n\n\n\n\\(d_g\\) - Required seats of group \\(g\\) in a row\n\\(h\\) - Safety distance between groups sitting next to each other\n\n\n\n. . .\nQuestion: Can anybody explain the set?",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#example-two-groups",
    "href": "lectures/lecture-11-distancing.html#example-two-groups",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Example: Two Groups",
    "text": "Example: Two Groups\n\n\\[\\underbrace{X_{1,2,\\textbf{6}}+X_{1,2,\\textbf{7}}+X_{1,2,\\textbf{8}}}_{g=1} + \\underbrace{X_{2,2,\\textbf{6}}+X_{2,2,\\textbf{7}}+X_{2,2,\\textbf{8}}}_{g=2} \\leq 1 \\quad (r=2,c=8)\\]",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#example-different-group-sizes",
    "href": "lectures/lecture-11-distancing.html#example-different-group-sizes",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Example: Different Group Sizes",
    "text": "Example: Different Group Sizes\n\n\\[\\underbrace{X_{1,2,\\textbf{6}}+X_{1,2,\\textbf{7}}+X_{1,2,\\textbf{8}}}_{g=1} + \\underbrace{X_{2,2,\\textbf{5}}+X_{2,2,\\textbf{6}}+X_{2,2,\\textbf{7}}+X_{2,2,\\textbf{8}}}_{g=2} \\leq 1 \\quad (r=2,c=8)\\]",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#example-three-groups",
    "href": "lectures/lecture-11-distancing.html#example-three-groups",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Example: Three Groups",
    "text": "Example: Three Groups\n\n\n\n\\[\n\\underbrace{X_{1,2,\\textbf{6}}+X_{1,2,\\textbf{7}}+X_{1,2,\\textbf{8}}}_{g=1} + \\underbrace{X_{2,2,\\textbf{6}}+X_{2,2,\\textbf{7}}+X_{2,2,\\textbf{8}}}_{g=2} + \\underbrace{X_{3,2,\\textbf{5}}+X_{3,2,\\textbf{6}}+X_{3,2,\\textbf{7}}+X_{3,2,\\textbf{8}}}_{g=3} \\leq 1 \\quad (r=2,c=8)\n\\]",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#section-1",
    "href": "lectures/lecture-11-distancing.html#section-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "",
    "text": "Do you see\nthe pattern?",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#vertical-social-distance",
    "href": "lectures/lecture-11-distancing.html#vertical-social-distance",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Vertical Social Distance?",
    "text": "Vertical Social Distance?\n\n\n\n\n\n\nImportantThe goal of this constraint is to:\n\n\n\nEnsure that the vertical social distance is maintained between groups.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following:\n\n\n\n\n\\(b\\) - Vertical safety distance between groups\n\\(X_{g,r,c}\\) - 1, if first left seat of \\(g\\) is assigned to \\(r\\) in \\(c\\), else 0",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#vertical-social-distance-1",
    "href": "lectures/lecture-11-distancing.html#vertical-social-distance-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Vertical Social Distance",
    "text": "Vertical Social Distance\nQuestion: What could be the constraint?\n. . .\n\n\n\n\n\n\nIt is an extension of the horizontal social distance constraint we used before, but now we block a rectangular area instead of a single row.\n\n\n\n. . .\n\\[\n\\sum_{g \\in \\mathcal{G}} \\sum_{\\tilde{r} \\in \\mathcal{R}_r} \\sum_{\\tilde{c} \\in \\tilde{\\mathcal{C}}_{cg}} X_{g\\tilde{r}\\tilde{c}} \\leq 1 \\quad \\forall r\\in \\mathcal{R}, c\\in \\mathcal{C}\n\\]",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#vertical-distance-set",
    "href": "lectures/lecture-11-distancing.html#vertical-distance-set",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Vertical Distance Set",
    "text": "Vertical Distance Set\nQuestion: What could be the set?\n. . .\n\\[\n\\tilde{\\mathcal{R}}_{r} = \\{\\tilde{r}\\in \\mathcal{R}| r-b \\leq \\tilde{r} \\leq r \\}\n\\]\n. . .\n\n\n\n\n\n\nRemember:\n\n\\(b\\) - Vertical safety distance between groups\n\\(X_{g,r,c}\\) - 1, if first left seat of \\(g\\) is assigned to \\(r\\) in \\(c\\), else 0\n\n\n\n\n. . .\nLet’s look at an example.",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#example-two-groups-1",
    "href": "lectures/lecture-11-distancing.html#example-two-groups-1",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Example: Two Groups",
    "text": "Example: Two Groups\n\n\nYellow seats are blocked by the group in row 3 and column 8\nBlue allocations are possible (if second group has size 2)",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#arena-seating-problem",
    "href": "lectures/lecture-11-distancing.html#arena-seating-problem",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Arena Seating Problem",
    "text": "Arena Seating Problem\n\n\n\\[\n\\text{maximize} \\quad \\sum_{g \\in \\mathcal{G}} \\sum_{r \\in \\mathcal{R}} \\sum_{c\\in \\mathcal{C}_r} v_g \\times X_{g,r,c}\n\\] subject to: \\[\n\\begin{align*}\n& \\sum_{r \\in \\mathcal{R}}\\sum_{c \\in \\mathcal{C}_r} X_{g,r,c} \\leq 1 && \\forall g \\in \\mathcal{G} \\\\\n& \\sum_{g \\in \\mathcal{G}}\\sum_{c\\in \\mathcal{C}_r} X_{g,r,c} \\leq p_r && \\forall r \\in \\mathcal{R} \\\\\n& \\sum_{g \\in \\mathcal{G}} \\sum_{\\tilde{r} \\in \\tilde{\\mathcal{R}}_{r}} \\sum_{\\tilde{c} \\in \\tilde{\\mathcal{C}}_{c,g}} X_{g,\\tilde{r},\\tilde{c}} \\leq 1 && \\forall r\\in \\mathcal{R}, c\\in \\mathcal{C} \\\\\n& X_{g,r,c} \\in \\{0,1\\} && \\forall g \\in \\mathcal{G}, \\forall r\\in \\mathcal{R}, c\\in \\mathcal{C}_r\n\\end{align*}\n\\]",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#characteristics",
    "href": "lectures/lecture-11-distancing.html#characteristics",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Characteristics",
    "text": "Characteristics\nQuestions: On model characteristics\n\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domains do we have?",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#model-assumptions",
    "href": "lectures/lecture-11-distancing.html#model-assumptions",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\n\nWhat assumptions have we made?\nIs our approach strategic or tactical/operational?\nHave we considered all social distancing constraints?\nWhat about aisle seats?\nCan you think of any other real-world constraints?",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#arena-seating-optimization",
    "href": "lectures/lecture-11-distancing.html#arena-seating-optimization",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Arena Seating Optimization",
    "text": "Arena Seating Optimization",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#case-study-vfl-osnabrück",
    "href": "lectures/lecture-11-distancing.html#case-study-vfl-osnabrück",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Case study VfL Osnabrück",
    "text": "Case study VfL Osnabrück\n\nRelegation Return Match in 2021\n241 additional seats allocated (+12 percent)\nCompliance with all distancing requirements\nApproval from authorities\n\n. . .\n\n\n\n\n\n\nEstimated additional revenue of 8,435 EUR for one match.",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#seating-plan",
    "href": "lectures/lecture-11-distancing.html#seating-plan",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Seating Plan",
    "text": "Seating Plan",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#related-work",
    "href": "lectures/lecture-11-distancing.html#related-work",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Related Work",
    "text": "Related Work\nSimilar studies have been conducted globally:\n\nUS College-level venues, e.g. Football, Basketball, Hockey\nMusic Hall Eindhoven\nSafe Seating Solutions platform\nGeneral 2D-Knapsack applications",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#optimization-benefits",
    "href": "lectures/lecture-11-distancing.html#optimization-benefits",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Optimization Benefits",
    "text": "Optimization Benefits\n\nOptimization enables rapid generation and evaluation\nWe can easily adapt to various distancing requirements:\n\nHorizontal and vertical spacing between groups\nGroups per row limits\nAisle seat restrictions\nGroup size constraints\nMulti-row group allocation",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#wrap-up",
    "href": "lectures/lecture-11-distancing.html#wrap-up",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Wrap Up",
    "text": "Wrap Up\n\nRevenue optimization through applied optimization\nIncreased participant capacity vs basic approaches\nFlexible adaptation to various distancing requirements\nCan be adapted easily to any seating requirements\n\n. . .\n\n\n\n\n\n\nNoteAnd that’s it for todays lecture!\n\n\n\nWe now have covered the arena seating problem based on a real-world application and are ready to start solving the corresponding tasks in the upcoming tutorial.",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#section-2",
    "href": "lectures/lecture-11-distancing.html#section-2",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-11-distancing.html#literature-i",
    "href": "lectures/lecture-11-distancing.html#literature-i",
    "title": "Lecture XI - Arena Seat Planning under Distancing Rules",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "11 Distancing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#islamic-pilgrimage",
    "href": "lectures/lecture-09-presentation.html#islamic-pilgrimage",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Islamic Pilgrimage",
    "text": "Islamic Pilgrimage\n\nQuestion: Have you ever heard of the Hajj?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#the-hajj",
    "href": "lectures/lecture-09-presentation.html#the-hajj",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "The Hajj",
    "text": "The Hajj\n\nThe great Islamic pilgrimage towards Mecca\nThe holy city is the religious center of the Islamic religion\nLocated in the Kingdom of Saudi Arabia\nEach physically able Muslim should perform Hajj once\nConfined spaces around the holy sites\nOnly few million people are annually allowed"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#mina-tent-city",
    "href": "lectures/lecture-09-presentation.html#mina-tent-city",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Mina Tent City",
    "text": "Mina Tent City"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#mina-tent-city-1",
    "href": "lectures/lecture-09-presentation.html#mina-tent-city-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Mina Tent City",
    "text": "Mina Tent City"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#the-scope-of-the-hajj",
    "href": "lectures/lecture-09-presentation.html#the-scope-of-the-hajj",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "The scope of the Hajj",
    "text": "The scope of the Hajj\n\nPilgrimage is actually a multi-day journey\nInvolves a number of different rituals at several ritual sites\nOur efforts focused on the Rhamy-Al-Jamarat ritual\n\n\n\n\n\n\n\n\nRhamy-Al-Jamarat ritual\n\n\nPilgrims throw pebbles against three pillars, which symbolize the temptations of the devil. They repeat this ritual with small variations on four consecutive days."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#mina-tent-city-2",
    "href": "lectures/lecture-09-presentation.html#mina-tent-city-2",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Mina Tent City",
    "text": "Mina Tent City\n\n\n1.5–2 million people reside in the tent city\nPilgrims repeatedly access the holy site\nPerform the Rhamy-Al-Jamarat ritual\nWalk through a network of streets and pathways\nLater proceed to the Kaaba or return to the camp"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#time-preferences",
    "href": "lectures/lecture-09-presentation.html#time-preferences",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Time Preferences",
    "text": "Time Preferences\n\nWhen to perform the ritual on each of the four days?\nPilgrims have different time preferences\n\nConstrained by arrival and departure shuttle times\nExtremely hot at midday quickly leading to exhaustion\nTraditions play an important role in time preferences\n\n\n\nQuestion: What could become a problem?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#risk-overcrowding-at-mina",
    "href": "lectures/lecture-09-presentation.html#risk-overcrowding-at-mina",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Risk: Overcrowding at Mina",
    "text": "Risk: Overcrowding at Mina\n\nIn aggregation, the time preferences are clustered\nPopular peak times dating back to the Prophet Mohammad\nEquates to a city-scale crowd of millions of people\nAccessing one central place within only a few hours\n\n\n\n\n\n\n\n\nUncoordinated access within confined area can escalate into crowd disasters!"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#crowd-accidents",
    "href": "lectures/lecture-09-presentation.html#crowd-accidents",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Crowd Accidents",
    "text": "Crowd Accidents\n\nHistorical incidents of crowd disasters\nResulted in casualties and injuries\nHigh-density bottlenecks on the way to the rituals\nSeveral critical points of congestion\nWaiting times can lead to hazardous conditions\n\n\nQuestion: What could we do to prevent this?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#section",
    "href": "lectures/lecture-09-presentation.html#section",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "How is Hajj pedestrian\ntraffic different from the\nregular urban pedestrian\ntraffic in cities?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#pedestrian-traffic-1",
    "href": "lectures/lecture-09-presentation.html#pedestrian-traffic-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Pedestrian Traffic",
    "text": "Pedestrian Traffic\n\n\n\n\nIndividuals and groups\nMultitude of destinations\nMixing and formation\nDistractions\n\n\n\n\nHomogeneous groups\nShared destination\nHigher densities\nPredictable"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#types-of-pedestrian-flow",
    "href": "lectures/lecture-09-presentation.html#types-of-pedestrian-flow",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Types of Pedestrian Flow",
    "text": "Types of Pedestrian Flow\n  \n\nQuestion: What is the most dangerous type here?\n\n\n\n\n\n\n\n\nMulti-directional and intersecting flows are the most dangerous type!"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#pilgrim-flows",
    "href": "lectures/lecture-09-presentation.html#pilgrim-flows",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Pilgrim Flows",
    "text": "Pilgrim Flows\n\n\n\n\n\n\n\nGeneral idea\n\n\nAdhere to one-way flow systems and define path options for each camp under consideration of a unidirectional flow system."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#objective",
    "href": "lectures/lecture-09-presentation.html#objective",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Objective?",
    "text": "Objective?\nQuestion: What could be the objective?\n\nMinimize risk of overcrowding and accidents\nEnable ritual participation of all pilgrims\nSatisfy time preferences of pilgrims\nEasy plans to execute under pressure\n\n\nQuestion: How can we try to model this?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#objective-1",
    "href": "lectures/lecture-09-presentation.html#objective-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Objective",
    "text": "Objective\n\nSatisfy time preferences as much as possible\nConsideration of infrastructure bottleneck flow capacities\nMaximize safety for all pilgrims\nSimple plans to make the execution as simple as possible\nThis can prevent critical errors later on!\n\n\nQuestion: Where is the goal conflict?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#goal-conflict",
    "href": "lectures/lecture-09-presentation.html#goal-conflict",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Goal Conflict",
    "text": "Goal Conflict"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#basic-structure",
    "href": "lectures/lecture-09-presentation.html#basic-structure",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Basic Structure",
    "text": "Basic Structure\n\nWe follow the structure of a simple scheduling problem\nThe aim is to “assign” something to different time periods\nWe assign time slots to groups using different paths\nPlans are kept simpler by assigning paths to camps\nAssignments are fixed over the entire time horizon"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#pilgrim-routes",
    "href": "lectures/lecture-09-presentation.html#pilgrim-routes",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Pilgrim Routes",
    "text": "Pilgrim Routes\nEach camp has a set of feasible one-way paths that include the stoning ritual."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#pilgrim-routes-1",
    "href": "lectures/lecture-09-presentation.html#pilgrim-routes-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Pilgrim Routes",
    "text": "Pilgrim Routes\nPath may contain one or more bottlenecks, regarded as resources subject to a capacity."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#pilgrim-routes-2",
    "href": "lectures/lecture-09-presentation.html#pilgrim-routes-2",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Pilgrim Routes",
    "text": "Pilgrim Routes\nPilgrims departure from a camp at a time \\(x\\) and pass through the bottleneck later."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#pilgrim-routes-3",
    "href": "lectures/lecture-09-presentation.html#pilgrim-routes-3",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Pilgrim Routes",
    "text": "Pilgrim Routes\nOur model should assign one of the feasible paths to a camp on all four ritual days."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#pilgrim-routes-4",
    "href": "lectures/lecture-09-presentation.html#pilgrim-routes-4",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Pilgrim Routes",
    "text": "Pilgrim Routes\nThese bottlenecks should not be overcrowded at any time during the Hajj."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#section-1",
    "href": "lectures/lecture-09-presentation.html#section-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "How can we model\ntime preferences?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#time-preferences-1",
    "href": "lectures/lecture-09-presentation.html#time-preferences-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Time Preferences",
    "text": "Time Preferences"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#time-preference-satisfaction",
    "href": "lectures/lecture-09-presentation.html#time-preference-satisfaction",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Time preference satisfaction",
    "text": "Time preference satisfaction\n\nAssign one departure time slot\nAssigned per ritual day to each pilgrim group\nMinimize difference between assigned and preferred time\nDifferent penalty functions are possible\n\n\n\n\n\n\n\n\nGroup time preferences\n\n\nMay be computed, i.e., down-sampled given a distribution of pilgrims over time."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#penalty-functions",
    "href": "lectures/lecture-09-presentation.html#penalty-functions",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Penalty Functions",
    "text": "Penalty Functions"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#fluctuations",
    "href": "lectures/lecture-09-presentation.html#fluctuations",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Fluctuations",
    "text": "Fluctuations\nQuestion: What could become a problem?\n\n\nIf allowed demand between periods varies strongly, accidents are more likely to happen!\nWe need keep the changes between periods within bounds\n\n\n\nQuestion: Any idea how we can do that later?\n\n\n\nRestrict the change of the utilization between periods"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#goals-summarized",
    "href": "lectures/lecture-09-presentation.html#goals-summarized",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Goals Summarized",
    "text": "Goals Summarized\n\nSatisfy time preferences of the pilgrims as much as possible under the consideration of infrastructure bottleneck flow capacities by assigning “something” to a time slot.\nFor the sake of simplicity and safety, pilgrims coming from one camp will always have to be assigned the same path.\nWe need to keep track of the relative utilization of each resource to restrict the fluctuations between periods to ensure a safer event."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#sets",
    "href": "lectures/lecture-09-presentation.html#sets",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Sets?",
    "text": "Sets?\nQuestion: What could be the sets here?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#sets-1",
    "href": "lectures/lecture-09-presentation.html#sets-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Sets",
    "text": "Sets\n\n\\(\\mathcal{T}\\) - Stoning periods in ascending order, indexed by \\(t\\)\n\\(\\mathcal{R}\\) - Infrastructure resources, indexed by \\(r\\)\n\\(\\mathcal{C}\\) - Pilgrim camps, indexed by \\(c\\)\n\\(\\mathcal{P}\\) - Paths that include the stoning, indexed by \\(p\\)\n\\(\\mathcal{S}\\) - Scheduling groups, indexed by \\(s\\)\n\n\nBut we further need subsets!"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#subsets",
    "href": "lectures/lecture-09-presentation.html#subsets",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Subsets",
    "text": "Subsets\n\n\\(\\mathcal{S}_c\\) - Scheduling groups in camp \\(c\\)\n\\(\\mathcal{S}_p\\) - Scheduling groups that can use path \\(p\\)\n\\(\\mathcal{P}_c\\) - Feasible paths for camp \\(c\\)\n\\(\\mathcal{P}_s\\) - Feasible paths for group \\(s\\)\n\\(\\mathcal{P}_r\\) - Paths that contain the resource \\(r\\)\n\\(\\mathcal{T}_s\\) - Available stoning periods for scheduling group \\(s\\)"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#section-2",
    "href": "lectures/lecture-09-presentation.html#section-2",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "That looks\ncomplicated…"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#on-subsets",
    "href": "lectures/lecture-09-presentation.html#on-subsets",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "On Subsets",
    "text": "On Subsets\nQuestion: Why use subsets?\n\n\nIt may seem like a lot\nBut it also really helps a lot!\nWe reduce the problem size\n\n\n\n\n\n\n\n\n\nA smaller problem size reduces the solution space and helps the solver in finding the optimal solution faster!"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#parameters",
    "href": "lectures/lecture-09-presentation.html#parameters",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Parameters?",
    "text": "Parameters?\nQuestion: What could be possible parameters?\n\n\n\\(n_s\\) - Number of pilgrims in scheduling group \\(s\\)\n\\(f_{s,t}\\) - Penalty value of assigning period \\(t\\) to group \\(s\\)\n\\(a_{p,r}\\) - Offset between stoning and utilization period of \\(r\\) on \\(p\\)\n\\(b_{r,t}\\) - Capacity of resource \\(r\\) in period \\(t\\)\n\\(\\sigma_r\\) - max. relative utilization deviation between \\(t\\) for \\(r\\)"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#first-decision-variable",
    "href": "lectures/lecture-09-presentation.html#first-decision-variable",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "First Decision Variable?",
    "text": "First Decision Variable?\n\n\n\n\n\n\nOur first goal is to:\n\n\nSatisfy time preferences of the pilgrims as much as possible under the consideration of infrastructure bottleneck flow capacities by assigning “something” to a time slot.\n\n\n\n\n\n\n\n\n\n\nWe need the following sets:\n\n\n\nScheduling groups, \\(s \\in \\mathcal{S}\\)\nStoning periods in ascending order, \\(t \\in \\mathcal{T}\\)\nPaths that include the stoning of the devil, \\(p \\in \\mathcal{P}\\)"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#first-decision-variable-1",
    "href": "lectures/lecture-09-presentation.html#first-decision-variable-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "First Decision Variable",
    "text": "First Decision Variable\nQuestion: What could be our decision variable?\n\n\n\\(X_{s,t,p}\\) - 1, if scheduling group \\(s\\) is scheduled to perform stoning in period \\(t\\) and to use path \\(p\\), 0 otherwise.\n\n\n\nQuestion: Do you get the idea here?\n\n\nIt’s a binary assignment of a group to a time slot and a path."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#second-decision-variable",
    "href": "lectures/lecture-09-presentation.html#second-decision-variable",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Second Decision Variable?",
    "text": "Second Decision Variable?\n\n\n\n\n\n\nOur second goal (more a constraint):\n\n\nFor the sake of simplicity and safety, pilgrims coming from one camp will always have to be assigned the same path.\n\n\n\n\n\n\n\n\n\n\nWe need the following sets:\n\n\n\nPilgrim camps from which groups can depart, \\(c \\in \\mathcal{C}\\)\nPaths that include the stoning of the devil, \\(p \\in \\mathcal{P}\\)\n\n\n\n\n\n\nQuestion: What could be our second variable?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#second-decision-variable-1",
    "href": "lectures/lecture-09-presentation.html#second-decision-variable-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Second Decision Variable",
    "text": "Second Decision Variable\n\n\\(Y_{c,p}\\) - 1, if camp \\(c\\) is assigned to use path \\(p\\), 0 otherwise\n\n\nQuestion: Does anyone remember the third part?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#third-decision-variable",
    "href": "lectures/lecture-09-presentation.html#third-decision-variable",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Third Decision Variable?",
    "text": "Third Decision Variable?\n\n\n\n\n\n\nOur third goal (again, more a constraint):\n\n\nWe need to keep track of the relative utilization of each resource to restrict the fluctuations between periods to ensure a safer event.\n\n\n\n\n\n\n\n\n\n\nWe need the following sets:\n\n\n\nInfrastructure resources, \\(r \\in \\mathcal{R}\\)\nStoning periods in ascending order, \\(t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nQuestion: What could be our third variable?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#third-decision-variable-1",
    "href": "lectures/lecture-09-presentation.html#third-decision-variable-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Third Decision Variable",
    "text": "Third Decision Variable\n\n\\(U_{r,t}\\) - Relative utilization of \\(r\\) in \\(t\\) with \\(0 \\leq U_{rt} \\leq 1\\)\n\n\nQuestion: What does relative utilization mean?\n\n\n\nIt’s a percentage of the capacity usage of the resource\nNormalizes the capacities between different resources"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#section-3",
    "href": "lectures/lecture-09-presentation.html#section-3",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "Let’s start with our\nobjective function!"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#objective-function",
    "href": "lectures/lecture-09-presentation.html#objective-function",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Objective Function?",
    "text": "Objective Function?\n\n\n\n\n\n\nOur main objective is to:\n\n\nSatisfy time preferences of the pilgrims as much as possible under the consideration of infrastructure bottleneck flow capacities by assigning “something” to a time slot. Hint: We thus could aim to minimize the total dissatisfaction with the timetable.\n\n\n\n\nQuestion: How could we minimize the total dissatisfaction?\n\nPenalize difference between assigned and preferred time\nDifferent penalty functions, e.g., linear, quadratic, etc."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#objective-function-1",
    "href": "lectures/lecture-09-presentation.html#objective-function-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Objective Function",
    "text": "Objective Function\n\n\n\n\n\n\nWe need the following parameters and variables:\n\n\n\n\\(f_{s,t}\\) - Penalty value of assigning period \\(t\\) to group \\(s\\)\n\\(X_{s,t,p}\\) - 1 if group \\(s\\) is scheduled to perform stoning in \\(t\\) and to use \\(p\\), 0 otherwise\n\n\n\n\n\nQuestion: What could be our objective function?\n\n\n\\[\n\\text{minimize} \\quad \\sum_{s \\in \\mathcal{S}}\\sum_{t \\in \\mathcal{T}}\\sum_{p \\in \\mathcal{P}} f_{s,t} \\times X_{s,t,p}\n\\]"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#objective-function-characteristics",
    "href": "lectures/lecture-09-presentation.html#objective-function-characteristics",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Objective Function Characteristics",
    "text": "Objective Function Characteristics\nQuestion: Is our objective function linear?\n\n\nWe can use non-linear penalty functions\nBut still, it will always be linear\n\n\n\nQuestion: Anybody an idea why?\n\n\n\nWe can compute the penalties in advance\nDo not depend on the decision variables"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#constraints-needed",
    "href": "lectures/lecture-09-presentation.html#constraints-needed",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Constraints needed?",
    "text": "Constraints needed?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#key-constraints",
    "href": "lectures/lecture-09-presentation.html#key-constraints",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Key Constraints",
    "text": "Key Constraints\nQuestion: Which constraints do we need?\n\nEach group must have one path assigned\nEach camp must have one path assigned\nEach group must have one time slot assigned\nEach resource must have a capacity limit\nConstraint the relative utilization between periods"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#assign-paths-to-camps",
    "href": "lectures/lecture-09-presentation.html#assign-paths-to-camps",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Assign Paths to Camps",
    "text": "Assign Paths to Camps\n\n\n\n\n\n\nThe goal of this constraint is to:\n\n\nAssign one path to each camp over the entire time horizon.\n\n\n\n\n\n\n\n\n\n\nWe need the following variables:\n\n\n\n\\(Y_{c,p}\\) - 1 if camp \\(c\\) is assigned to use path \\(p\\), 0 otherwise\n\n\n\n\n\n\nQuestion: What could be the constraint?\n\\[\n\\sum_{p \\in \\mathcal{P}_c} Y_{c,p} = 1 \\quad \\forall c \\in \\mathcal{C}\n\\]"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#assign-time-slots-to-groups",
    "href": "lectures/lecture-09-presentation.html#assign-time-slots-to-groups",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Assign Time Slots to Groups?",
    "text": "Assign Time Slots to Groups?\n\n\n\n\n\n\nThe goal of this constraint is to:\n\n\nAssign one time slot to each group over the entire time horizon using the same path we have assigned to the camp in the previous constraint.\n\n\n\n\n\n\n\n\n\n\nWe need the following variables:\n\n\n\n\\(X_{s,t,p}\\) - 1 if group \\(s\\) is scheduled to perform stoning in \\(t\\) and to use \\(p\\), 0 otherwise\n\\(Y_{c,p}\\) - 1 if camp \\(c\\) is assigned to use path \\(p\\), 0 otherwise\n\n\n\n\n\n\nQuestion: What could be the constraint?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#assign-time-slots-to-groups-1",
    "href": "lectures/lecture-09-presentation.html#assign-time-slots-to-groups-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Assign Time Slots to Groups",
    "text": "Assign Time Slots to Groups\n\\[\n\\sum_{t \\in \\mathcal{T}_s} X_{s,t,p}  = Y_{c,p} \\quad  \\forall c \\in \\mathcal{C}, p \\in \\mathcal{P}_c, s \\in \\mathcal{S}_c\n\\]\n\n\n\n\n\n\n\nWe use the following sets:\n\n\n\n\\(\\mathcal{C}\\) - Pilgrim camps\n\\(\\mathcal{S}_c\\) - Scheduling groups in camp \\(c\\)\n\\(\\mathcal{T}_s\\) - Available stoning periods for scheduling group \\(s\\)\n\\(\\mathcal{P}_c\\) - Feasible paths for camp \\(c\\)"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#relative-utilization-and-capacities",
    "href": "lectures/lecture-09-presentation.html#relative-utilization-and-capacities",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Relative Utilization and Capacities",
    "text": "Relative Utilization and Capacities\n\n\n\n\n\n\nThe goal of this constraint is to:\n\n\nCompute the relative utilization of each resource while also ensuring that the utilization does not exceed the capacity limit. This one is very tricky!\n\n\n\n\nDifficulties:\n\nIncludes the time-shift between stoning and utilization\nUsed as parameter to shift periods in variable \\(X_{s,t,p}\\)"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#compute-relative-utilization",
    "href": "lectures/lecture-09-presentation.html#compute-relative-utilization",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Compute Relative Utilization?",
    "text": "Compute Relative Utilization?\n\n\n\n\n\n\nWe need the following:\n\n\n\n\\(n_s\\) - Number of pilgrims in scheduling group \\(s\\)\n\\(a_{p,r}\\) - Period offset between stoning period and utilization period of \\(r\\) on \\(p\\)\n\\(b_{r,t}\\) - Capacity of resource \\(r\\) in period \\(t\\) in number of pilgrims\n\\(X_{s,t,p}\\) - 1, if \\(s\\) is scheduled to perform stoning in \\(t\\) and to use \\(p\\), 0 else\n\\(U_{r,t}\\) - Relative utilization of resource \\(r\\) in period \\(t\\) with \\(0 \\leq U_{r,t} \\leq 1\\)\n\n\n\n\n\nQuestion: What could be the constraint?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#compute-relative-utilization-1",
    "href": "lectures/lecture-09-presentation.html#compute-relative-utilization-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Compute Relative Utilization",
    "text": "Compute Relative Utilization\n\\[\n\\sum_{p \\in \\mathcal{P}_r}\\sum_{s \\in S_p} n_s \\times X_{s,t-a_{p,r},p}  = b_{r,t}\\times U_{r,t} \\quad \\forall r \\in \\mathcal{R}, t \\in \\mathcal{T}\n\\]\n\n\n\n\n\n\n\nWe use the following:\n\n\n\n\\(n_s\\) - Number of pilgrims in scheduling group \\(s\\)\n\\(a_{p,r}\\) - Period offset between stoning period and utilization period of \\(r\\) on \\(p\\)\n\\(b_{r,t}\\) - Capacity of resource \\(r\\) in period \\(t\\) in number of pilgrims\n\\(X_{s,t,p}\\) - 1, if \\(s\\) is scheduled to perform stoning in \\(t\\) and to use \\(p\\), 0 else\n\\(U_{r,t}\\) - Relative utilization of resource \\(r\\) in period \\(t\\) with \\(0 \\leq U_{r,t} \\leq 1\\)"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#section-4",
    "href": "lectures/lecture-09-presentation.html#section-4",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "Let’s pause!\nHave you understood\nthis part?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#how-does-the-shift-work",
    "href": "lectures/lecture-09-presentation.html#how-does-the-shift-work",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "How does the shift work?",
    "text": "How does the shift work?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#keep-fluctuations-within-bounds",
    "href": "lectures/lecture-09-presentation.html#keep-fluctuations-within-bounds",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Keep Fluctuations within Bounds?",
    "text": "Keep Fluctuations within Bounds?\n\n\n\n\n\n\nThe goal of this constraint is to:\n\n\nKeep the relative utilization of each resource within bounds to ensure a safer event.\n\n\n\n\n\n\n\n\n\n\nWe need the following:\n\n\n\n\\(\\sigma_r\\) - max. relative utilization deviation between \\(t\\) for \\(r\\)\n\\(U_{r,t}\\) - Relative utilization of resource \\(r\\) in period \\(t\\) with \\(0 \\leq U_{rt} \\leq 1\\)\n\n\n\n\n\n\nQuestion: What could be the constraint?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#keep-fluctuations-within-bounds-1",
    "href": "lectures/lecture-09-presentation.html#keep-fluctuations-within-bounds-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Keep Fluctuations within Bounds",
    "text": "Keep Fluctuations within Bounds\n\\[\nU_{r,t} - U_{r,t-1} \\leq \\sigma_r \\quad \\forall (r,t) \\in \\left| \\mathcal{R}\\times \\mathcal{T}\\right|\n\\]\n\\[\nU_{r,t-1} - U_{r,t} \\leq \\sigma_r \\quad \\forall (r,t) \\in \\left| \\mathcal{R}\\times \\mathcal{T}\\right|\n\\]\n\nQuestion: Can somebody explain why this works?\n\nEach constraint limits the change\nThe first one limits the increase\nThe second one limits the decrease"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#scheduling-problem-i",
    "href": "lectures/lecture-09-presentation.html#scheduling-problem-i",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Scheduling Problem I",
    "text": "Scheduling Problem I\n\\[\\begin{align*}\n\\text{min} \\quad \\sum_{s\\in \\mathcal{S}}\\sum_{t \\in \\mathcal{T}_s}\\sum_{p \\in P_s} f_{s,t} \\times X_{s,t,p}\n\\end{align*}\\]\nsubject to:\n\\[\\begin{align*}\n& \\sum_{p \\in \\mathcal{P}_c} Y_{c,p} = 1 && \\forall c \\in \\mathcal{C} \\\\\n& \\sum_{t \\in \\mathcal{T}_s} X_{s,t,p}  = Y_{c,p} &&  \\forall c \\in \\mathcal{C}, p \\in \\mathcal{P}_c, s \\in \\mathcal{S}_c\n\\end{align*}\\]"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#scheduling-problem-ii",
    "href": "lectures/lecture-09-presentation.html#scheduling-problem-ii",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Scheduling Problem II",
    "text": "Scheduling Problem II\n\\[\\begin{align*}\n& \\sum_{p \\in \\mathcal{P}_r}\\sum_{s \\in S_p} n_s \\cdot X_{s,t-a_{p,r},p}  = b_{r,t}\\cdot U_{r,t} && \\forall r \\in \\mathcal{R}, t \\in \\mathcal{T} \\\\\n& U_{r,t} - U_{r,t-1} \\leq \\sigma_r && \\forall (r,t) \\in \\left| \\mathcal{R}\\times \\mathcal{T}\\right| \\\\\n& U_{r,t-1} - U_{r,t} \\leq \\sigma_r && \\forall (r,t) \\in \\left| \\mathcal{R}\\times \\mathcal{T}\\right|\n\\end{align*}\\]\n\n\n\n\n\n\nRestricting the relative utilization of each resource to a certain bound."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#scheduling-problem-iii",
    "href": "lectures/lecture-09-presentation.html#scheduling-problem-iii",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Scheduling Problem III",
    "text": "Scheduling Problem III\n\\[\\begin{align*}\n& X_{s,t,p} \\in \\{0,1\\}  && \\forall s \\in \\mathcal{S}, \\forall t \\in \\mathcal{T}_s, \\forall p \\in \\mathcal{P}_s \\\\\n& Y_{c,p} \\in \\{0,1\\} && \\forall c \\in \\mathcal{C}, p \\in \\mathcal{P}_c \\\\\n& U_{r,t} \\in [0,1] && \\forall r \\in \\mathcal{R}, t \\in \\mathcal{T}\n\\end{align*}\\]\n\n\n\n\n\n\nAll variables, except for \\(U_{r,t}\\), are binary."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#characteristics",
    "href": "lectures/lecture-09-presentation.html#characteristics",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Characteristics",
    "text": "Characteristics\nQuestions: On model characteristics\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domains do we have?\nHave we specified the length of a period?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#model-assumptions",
    "href": "lectures/lecture-09-presentation.html#model-assumptions",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\nWhat assumptions have we made?\nWhat are likely issues that can arise if applied?\nHow can we measure flow capacities?\nAre all pilgrims equally fast?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#capacity-buffers",
    "href": "lectures/lecture-09-presentation.html#capacity-buffers",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Capacity Buffers",
    "text": "Capacity Buffers"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#section-5",
    "href": "lectures/lecture-09-presentation.html#section-5",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "Can this be\napplied?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#implementation",
    "href": "lectures/lecture-09-presentation.html#implementation",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Implementation",
    "text": "Implementation\n\nOptimization part of a bigger picture\nMany projects with several disciplines involved\nE.g. Simulations, infrastructure projects, real-time monitoring, contingency plans, awareness campaigns, …\n\n\n\n\n\n\n\n\nOptimization was part of a project by Knut Haase and his team (Haase et al. 2016)."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#wrap-up",
    "href": "lectures/lecture-09-presentation.html#wrap-up",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Wrap Up",
    "text": "Wrap Up\n\n\n\n\n\n\nAnd that’s it for todays lecture!\n\n\nWe now have covered a scheduling problem based on a real-world application and are ready to start solving some new tasks in the upcoming tutorial."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#section-9",
    "href": "lectures/lecture-09-presentation.html#section-9",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#literature-i",
    "href": "lectures/lecture-09-presentation.html#literature-i",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lecture-09-presentation.html#literature-ii",
    "href": "lectures/lecture-09-presentation.html#literature-ii",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Literature II",
    "text": "Literature II\n\n\n\n\nHaase, Knut, Habib Zain Al Abideen, Salim Al-Bosta, Mathias Kasper, Matthes Koch, Sven Müller, and Dirk Helbing. 2016. “Improving Pilgrim Safety During the Hajj: An Analytical and Operational Research Approach.” Interfaces 46 (1): 74–90."
  },
  {
    "objectID": "lectures/lecture-09-safety.html",
    "href": "lectures/lecture-09-safety.html",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "Question: Have you ever heard of the Hajj?\n\n\n\n\n\n\n\n\nThe great Islamic pilgrimage towards Mecca\nThe holy city is the religious center of the Islamic religion\nLocated in the Kingdom of Saudi Arabia\nEach physically able Muslim should perform Hajj once\nConfined spaces around the holy sites\nOnly few million people are annually allowed\n\n\n\n\n\n\n\n\n\n\n\n\n\nPilgrimage is actually a multi-day journey\nInvolves a number of different rituals at several ritual sites\nOur efforts focused on the Rhamy-Al-Jamarat ritual\n\n. . .\n\n\n\n\n\n\nCautionRhamy-Al-Jamarat ritual\n\n\n\nPilgrims throw pebbles against three pillars, which symbolize the temptations of the devil. They repeat this ritual with small variations on four consecutive days.\n\n\n\n\n\n\n\n1.5–2 million people reside in the tent city\nPilgrims repeatedly access the holy site\nPerform the Rhamy-Al-Jamarat ritual\nWalk through a network of streets and pathways\nLater proceed to the Kaaba or return to the camp\n\n\n\n\n\n\n\n\n\nWhen to perform the ritual on each of the four days?\nPilgrims have different time preferences\n\nConstrained by arrival and departure shuttle times\nExtremely hot at midday quickly leading to exhaustion\nTraditions play an important role in time preferences\n\n\n. . .\nQuestion: What could become a problem?\n\n\n\n\nIn aggregation, the time preferences are clustered\nPopular peak times dating back to the Prophet Mohammad\nEquates to a city-scale crowd of millions of people\nAccessing one central place within only a few hours\n\n. . .\n\n\n\n\n\n\nUncoordinated access within confined area can escalate into crowd disasters!\n\n\n\n\n\n\n\nHistorical incidents of crowd disasters\nResulted in casualties and injuries\nHigh-density bottlenecks on the way to the rituals\nSeveral critical points of congestion\nWaiting times can lead to hazardous conditions\n\n. . .\nQuestion: What could we do to prevent this?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#islamic-pilgrimage",
    "href": "lectures/lecture-09-safety.html#islamic-pilgrimage",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "Question: Have you ever heard of the Hajj?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#the-hajj",
    "href": "lectures/lecture-09-safety.html#the-hajj",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "The great Islamic pilgrimage towards Mecca\nThe holy city is the religious center of the Islamic religion\nLocated in the Kingdom of Saudi Arabia\nEach physically able Muslim should perform Hajj once\nConfined spaces around the holy sites\nOnly few million people are annually allowed",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#the-scope-of-the-hajj",
    "href": "lectures/lecture-09-safety.html#the-scope-of-the-hajj",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "Pilgrimage is actually a multi-day journey\nInvolves a number of different rituals at several ritual sites\nOur efforts focused on the Rhamy-Al-Jamarat ritual\n\n. . .\n\n\n\n\n\n\nCautionRhamy-Al-Jamarat ritual\n\n\n\nPilgrims throw pebbles against three pillars, which symbolize the temptations of the devil. They repeat this ritual with small variations on four consecutive days.",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#mina-tent-city-2",
    "href": "lectures/lecture-09-safety.html#mina-tent-city-2",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "1.5–2 million people reside in the tent city\nPilgrims repeatedly access the holy site\nPerform the Rhamy-Al-Jamarat ritual\nWalk through a network of streets and pathways\nLater proceed to the Kaaba or return to the camp",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#time-preferences",
    "href": "lectures/lecture-09-safety.html#time-preferences",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "When to perform the ritual on each of the four days?\nPilgrims have different time preferences\n\nConstrained by arrival and departure shuttle times\nExtremely hot at midday quickly leading to exhaustion\nTraditions play an important role in time preferences\n\n\n. . .\nQuestion: What could become a problem?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#risk-overcrowding-at-mina",
    "href": "lectures/lecture-09-safety.html#risk-overcrowding-at-mina",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "In aggregation, the time preferences are clustered\nPopular peak times dating back to the Prophet Mohammad\nEquates to a city-scale crowd of millions of people\nAccessing one central place within only a few hours\n\n. . .\n\n\n\n\n\n\nUncoordinated access within confined area can escalate into crowd disasters!",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#crowd-accidents",
    "href": "lectures/lecture-09-safety.html#crowd-accidents",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "Historical incidents of crowd disasters\nResulted in casualties and injuries\nHigh-density bottlenecks on the way to the rituals\nSeveral critical points of congestion\nWaiting times can lead to hazardous conditions\n\n. . .\nQuestion: What could we do to prevent this?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#section",
    "href": "lectures/lecture-09-safety.html#section",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "How is Hajj pedestrian\ntraffic different from the\nregular urban pedestrian\ntraffic in cities?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#pedestrian-traffic-1",
    "href": "lectures/lecture-09-safety.html#pedestrian-traffic-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Pedestrian Traffic",
    "text": "Pedestrian Traffic\n\n\n\n\nIndividuals and groups\nMultitude of destinations\nMixing and formation\nDistractions\n\n\n\n\nHomogeneous groups\nShared destination\nHigher densities\nPredictable",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#types-of-pedestrian-flow",
    "href": "lectures/lecture-09-safety.html#types-of-pedestrian-flow",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Types of Pedestrian Flow",
    "text": "Types of Pedestrian Flow\n  \n. . .\nQuestion: What is the most dangerous type here?\n. . .\n\n\n\n\n\n\nMulti-directional and intersecting flows are the most dangerous type!",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#pilgrim-flows",
    "href": "lectures/lecture-09-safety.html#pilgrim-flows",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Pilgrim Flows",
    "text": "Pilgrim Flows\n\n\n\n\n\n\n\nNoteGeneral idea\n\n\n\nAdhere to one-way flow systems and define path options for each camp under consideration of a unidirectional flow system.",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#objective",
    "href": "lectures/lecture-09-safety.html#objective",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Objective?",
    "text": "Objective?\nQuestion: What could be the objective?\n\n\nMinimize risk of overcrowding and accidents\nEnable ritual participation of all pilgrims\nSatisfy time preferences of pilgrims\nEasy plans to execute under pressure\n\n\n. . .\nQuestion: How can we try to model this?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#objective-1",
    "href": "lectures/lecture-09-safety.html#objective-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Objective",
    "text": "Objective\n\nSatisfy time preferences as much as possible\nConsideration of infrastructure bottleneck flow capacities\nMaximize safety for all pilgrims\nSimple plans to make the execution as simple as possible\nThis can prevent critical errors later on!\n\n. . .\nQuestion: Where is the goal conflict?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#goal-conflict",
    "href": "lectures/lecture-09-safety.html#goal-conflict",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Goal Conflict",
    "text": "Goal Conflict",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#basic-structure",
    "href": "lectures/lecture-09-safety.html#basic-structure",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Basic Structure",
    "text": "Basic Structure\n\nWe follow the structure of a simple scheduling problem\nThe aim is to “assign” something to different time periods\nWe assign time slots to groups using different paths\nPlans are kept simpler by assigning paths to camps\nAssignments are fixed over the entire time horizon",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#pilgrim-routes",
    "href": "lectures/lecture-09-safety.html#pilgrim-routes",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Pilgrim Routes",
    "text": "Pilgrim Routes\nEach camp has a set of feasible one-way paths that include the stoning ritual.",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#pilgrim-routes-1",
    "href": "lectures/lecture-09-safety.html#pilgrim-routes-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Pilgrim Routes",
    "text": "Pilgrim Routes\nPath may contain one or more bottlenecks, regarded as resources subject to a capacity.",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#pilgrim-routes-2",
    "href": "lectures/lecture-09-safety.html#pilgrim-routes-2",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Pilgrim Routes",
    "text": "Pilgrim Routes\nPilgrims departure from a camp at a time \\(x\\) and pass through the bottleneck later.",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#pilgrim-routes-3",
    "href": "lectures/lecture-09-safety.html#pilgrim-routes-3",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Pilgrim Routes",
    "text": "Pilgrim Routes\nOur model should assign one of the feasible paths to a camp on all four ritual days.",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#pilgrim-routes-4",
    "href": "lectures/lecture-09-safety.html#pilgrim-routes-4",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Pilgrim Routes",
    "text": "Pilgrim Routes\nThese bottlenecks should not be overcrowded at any time during the Hajj.",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#section-1",
    "href": "lectures/lecture-09-safety.html#section-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "How can we model\ntime preferences?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#time-preferences-1",
    "href": "lectures/lecture-09-safety.html#time-preferences-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Time Preferences",
    "text": "Time Preferences",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#time-preference-satisfaction",
    "href": "lectures/lecture-09-safety.html#time-preference-satisfaction",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Time preference satisfaction",
    "text": "Time preference satisfaction\n\nAssign one departure time slot\nAssigned per ritual day to each pilgrim group\nMinimize difference between assigned and preferred time\nDifferent penalty functions are possible\n\n. . .\n\n\n\n\n\n\nNoteGroup time preferences\n\n\n\nMay be computed, i.e., down-sampled given a distribution of pilgrims over time.",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#penalty-functions",
    "href": "lectures/lecture-09-safety.html#penalty-functions",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Penalty Functions",
    "text": "Penalty Functions",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#fluctuations",
    "href": "lectures/lecture-09-safety.html#fluctuations",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Fluctuations",
    "text": "Fluctuations\nQuestion: What could become a problem?\n. . .\n\nIf allowed demand between periods varies strongly, accidents are more likely to happen!\nWe need keep the changes between periods within bounds\n\n. . .\nQuestion: Any idea how we can do that later?\n. . .\n\nRestrict the change of the utilization between periods",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#goals-summarized",
    "href": "lectures/lecture-09-safety.html#goals-summarized",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Goals Summarized",
    "text": "Goals Summarized\n\n\nSatisfy time preferences of the pilgrims as much as possible under the consideration of infrastructure bottleneck flow capacities by assigning “something” to a time slot.\nFor the sake of simplicity and safety, pilgrims coming from one camp will always have to be assigned the same path.\nWe need to keep track of the relative utilization of each resource to restrict the fluctuations between periods to ensure a safer event.",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#sets",
    "href": "lectures/lecture-09-safety.html#sets",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Sets?",
    "text": "Sets?\nQuestion: What could be the sets here?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#sets-1",
    "href": "lectures/lecture-09-safety.html#sets-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Sets",
    "text": "Sets\n\n\\(\\mathcal{T}\\) - Stoning periods in ascending order, indexed by \\(t\\)\n\\(\\mathcal{R}\\) - Infrastructure resources, indexed by \\(r\\)\n\\(\\mathcal{C}\\) - Pilgrim camps, indexed by \\(c\\)\n\\(\\mathcal{P}\\) - Paths that include the stoning, indexed by \\(p\\)\n\\(\\mathcal{S}\\) - Scheduling groups, indexed by \\(s\\)\n\n. . .\nBut we further need subsets!",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#subsets",
    "href": "lectures/lecture-09-safety.html#subsets",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Subsets",
    "text": "Subsets\n\n\\(\\mathcal{S}_c\\) - Scheduling groups in camp \\(c\\)\n\\(\\mathcal{S}_p\\) - Scheduling groups that can use path \\(p\\)\n\\(\\mathcal{P}_c\\) - Feasible paths for camp \\(c\\)\n\\(\\mathcal{P}_s\\) - Feasible paths for group \\(s\\)\n\\(\\mathcal{P}_r\\) - Paths that contain the resource \\(r\\)\n\\(\\mathcal{T}_s\\) - Available stoning periods for scheduling group \\(s\\)",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#section-2",
    "href": "lectures/lecture-09-safety.html#section-2",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "That looks\ncomplicated…",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#on-subsets",
    "href": "lectures/lecture-09-safety.html#on-subsets",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "On Subsets",
    "text": "On Subsets\nQuestion: Why use subsets?\n. . .\n\nIt may seem like a lot\nBut it also really helps a lot!\nWe reduce the problem size\n\n. . .\n\n\n\n\n\n\nA smaller problem size reduces the solution space and helps the solver in finding the optimal solution faster!",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#parameters",
    "href": "lectures/lecture-09-safety.html#parameters",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Parameters?",
    "text": "Parameters?\nQuestion: What could be possible parameters?\n. . .\n\n\\(n_s\\) - Number of pilgrims in scheduling group \\(s\\)\n\\(f_{s,t}\\) - Penalty value of assigning period \\(t\\) to group \\(s\\)\n\\(a_{p,r}\\) - Offset between stoning and utilization period of \\(r\\) on \\(p\\)\n\\(b_{r,t}\\) - Capacity of resource \\(r\\) in period \\(t\\)\n\\(\\sigma_r\\) - max. relative utilization deviation between \\(t\\) for \\(r\\)",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#first-decision-variable",
    "href": "lectures/lecture-09-safety.html#first-decision-variable",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "First Decision Variable?",
    "text": "First Decision Variable?\n\n\n\n\n\n\nImportantOur first goal is to:\n\n\n\nSatisfy time preferences of the pilgrims as much as possible under the consideration of infrastructure bottleneck flow capacities by assigning “something” to a time slot.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following sets:\n\n\n\n\nScheduling groups, \\(s \\in \\mathcal{S}\\)\nStoning periods in ascending order, \\(t \\in \\mathcal{T}\\)\nPaths that include the stoning of the devil, \\(p \\in \\mathcal{P}\\)",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#first-decision-variable-1",
    "href": "lectures/lecture-09-safety.html#first-decision-variable-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "First Decision Variable",
    "text": "First Decision Variable\nQuestion: What could be our decision variable?\n. . .\n\n\\(X_{s,t,p}\\) - 1, if scheduling group \\(s\\) is scheduled to perform stoning in period \\(t\\) and to use path \\(p\\), 0 otherwise.\n\n. . .\nQuestion: Do you get the idea here?\n. . .\nIt’s a binary assignment of a group to a time slot and a path.",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#second-decision-variable",
    "href": "lectures/lecture-09-safety.html#second-decision-variable",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Second Decision Variable?",
    "text": "Second Decision Variable?\n\n\n\n\n\n\nImportantOur second goal (more a constraint):\n\n\n\nFor the sake of simplicity and safety, pilgrims coming from one camp will always have to be assigned the same path.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following sets:\n\n\n\n\nPilgrim camps from which groups can depart, \\(c \\in \\mathcal{C}\\)\nPaths that include the stoning of the devil, \\(p \\in \\mathcal{P}\\)\n\n\n\n. . .\nQuestion: What could be our second variable?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#second-decision-variable-1",
    "href": "lectures/lecture-09-safety.html#second-decision-variable-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Second Decision Variable",
    "text": "Second Decision Variable\n\n\\(Y_{c,p}\\) - 1, if camp \\(c\\) is assigned to use path \\(p\\), 0 otherwise\n\n. . .\nQuestion: Does anyone remember the third part?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#third-decision-variable",
    "href": "lectures/lecture-09-safety.html#third-decision-variable",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Third Decision Variable?",
    "text": "Third Decision Variable?\n\n\n\n\n\n\nImportantOur third goal (again, more a constraint):\n\n\n\nWe need to keep track of the relative utilization of each resource to restrict the fluctuations between periods to ensure a safer event.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following sets:\n\n\n\n\nInfrastructure resources, \\(r \\in \\mathcal{R}\\)\nStoning periods in ascending order, \\(t \\in \\mathcal{T}\\)\n\n\n\n. . .\nQuestion: What could be our third variable?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#third-decision-variable-1",
    "href": "lectures/lecture-09-safety.html#third-decision-variable-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Third Decision Variable",
    "text": "Third Decision Variable\n\n\\(U_{r,t}\\) - Relative utilization of \\(r\\) in \\(t\\) with \\(0 \\leq U_{rt} \\leq 1\\)\n\n. . .\nQuestion: What does relative utilization mean?\n. . .\n\nIt’s a percentage of the capacity usage of the resource\nNormalizes the capacities between different resources",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#section-3",
    "href": "lectures/lecture-09-safety.html#section-3",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "Let’s start with our\nobjective function!",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#objective-function",
    "href": "lectures/lecture-09-safety.html#objective-function",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Objective Function?",
    "text": "Objective Function?\n\n\n\n\n\n\nImportantOur main objective is to:\n\n\n\nSatisfy time preferences of the pilgrims as much as possible under the consideration of infrastructure bottleneck flow capacities by assigning “something” to a time slot. Hint: We thus could aim to minimize the total dissatisfaction with the timetable.\n\n\n. . .\nQuestion: How could we minimize the total dissatisfaction?\n\n\nPenalize difference between assigned and preferred time\nDifferent penalty functions, e.g., linear, quadratic, etc.",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#objective-function-1",
    "href": "lectures/lecture-09-safety.html#objective-function-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Objective Function",
    "text": "Objective Function\n\n\n\n\n\n\nNoteWe need the following parameters and variables:\n\n\n\n\n\\(f_{s,t}\\) - Penalty value of assigning period \\(t\\) to group \\(s\\)\n\\(X_{s,t,p}\\) - 1 if group \\(s\\) is scheduled to perform stoning in \\(t\\) and to use \\(p\\), 0 otherwise\n\n\n\n. . .\nQuestion: What could be our objective function?\n. . .\n\\[\n\\text{minimize} \\quad \\sum_{s \\in \\mathcal{S}}\\sum_{t \\in \\mathcal{T}}\\sum_{p \\in \\mathcal{P}} f_{s,t} \\times X_{s,t,p}\n\\]",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#objective-function-characteristics",
    "href": "lectures/lecture-09-safety.html#objective-function-characteristics",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Objective Function Characteristics",
    "text": "Objective Function Characteristics\nQuestion: Is our objective function linear?\n. . .\n\nWe can use non-linear penalty functions\nBut still, it will always be linear\n\n. . .\nQuestion: Anybody an idea why?\n. . .\n\nWe can compute the penalties in advance\nDo not depend on the decision variables",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#constraints-needed",
    "href": "lectures/lecture-09-safety.html#constraints-needed",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Constraints needed?",
    "text": "Constraints needed?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#key-constraints",
    "href": "lectures/lecture-09-safety.html#key-constraints",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Key Constraints",
    "text": "Key Constraints\nQuestion: Which constraints do we need?\n\n\nEach group must have one path assigned\nEach camp must have one path assigned\nEach group must have one time slot assigned\nEach resource must have a capacity limit\nConstraint the relative utilization between periods",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#assign-paths-to-camps",
    "href": "lectures/lecture-09-safety.html#assign-paths-to-camps",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Assign Paths to Camps",
    "text": "Assign Paths to Camps\n\n\n\n\n\n\nImportantThe goal of this constraint is to:\n\n\n\nAssign one path to each camp over the entire time horizon.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following variables:\n\n\n\n\n\\(Y_{c,p}\\) - 1 if camp \\(c\\) is assigned to use path \\(p\\), 0 otherwise\n\n\n\n. . .\nQuestion: What could be the constraint?\n\\[\n\\sum_{p \\in \\mathcal{P}_c} Y_{c,p} = 1 \\quad \\forall c \\in \\mathcal{C}\n\\]",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#assign-time-slots-to-groups",
    "href": "lectures/lecture-09-safety.html#assign-time-slots-to-groups",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Assign Time Slots to Groups?",
    "text": "Assign Time Slots to Groups?\n\n\n\n\n\n\nImportantThe goal of this constraint is to:\n\n\n\nAssign one time slot to each group over the entire time horizon using the same path we have assigned to the camp in the previous constraint.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following variables:\n\n\n\n\n\\(X_{s,t,p}\\) - 1 if group \\(s\\) is scheduled to perform stoning in \\(t\\) and to use \\(p\\), 0 otherwise\n\\(Y_{c,p}\\) - 1 if camp \\(c\\) is assigned to use path \\(p\\), 0 otherwise\n\n\n\n. . .\nQuestion: What could be the constraint?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#assign-time-slots-to-groups-1",
    "href": "lectures/lecture-09-safety.html#assign-time-slots-to-groups-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Assign Time Slots to Groups",
    "text": "Assign Time Slots to Groups\n\\[\n\\sum_{t \\in \\mathcal{T}_s} X_{s,t,p}  = Y_{c,p} \\quad  \\forall c \\in \\mathcal{C}, p \\in \\mathcal{P}_c, s \\in \\mathcal{S}_c\n\\]\n. . .\n\n\n\n\n\n\nNoteWe use the following sets:\n\n\n\n\n\\(\\mathcal{C}\\) - Pilgrim camps\n\\(\\mathcal{S}_c\\) - Scheduling groups in camp \\(c\\)\n\\(\\mathcal{T}_s\\) - Available stoning periods for scheduling group \\(s\\)\n\\(\\mathcal{P}_c\\) - Feasible paths for camp \\(c\\)",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#relative-utilization-and-capacities",
    "href": "lectures/lecture-09-safety.html#relative-utilization-and-capacities",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Relative Utilization and Capacities",
    "text": "Relative Utilization and Capacities\n\n\n\n\n\n\nImportantThe goal of this constraint is to:\n\n\n\nCompute the relative utilization of each resource while also ensuring that the utilization does not exceed the capacity limit. This one is very tricky!\n\n\n. . .\nDifficulties:\n\nIncludes the time-shift between stoning and utilization\nUsed as parameter to shift periods in variable \\(X_{s,t,p}\\)",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#compute-relative-utilization",
    "href": "lectures/lecture-09-safety.html#compute-relative-utilization",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Compute Relative Utilization?",
    "text": "Compute Relative Utilization?\n\n\n\n\n\n\nNoteWe need the following:\n\n\n\n\n\\(n_s\\) - Number of pilgrims in scheduling group \\(s\\)\n\\(a_{p,r}\\) - Period offset between stoning period and utilization period of \\(r\\) on \\(p\\)\n\\(b_{r,t}\\) - Capacity of resource \\(r\\) in period \\(t\\) in number of pilgrims\n\\(X_{s,t,p}\\) - 1, if \\(s\\) is scheduled to perform stoning in \\(t\\) and to use \\(p\\), 0 else\n\\(U_{r,t}\\) - Relative utilization of resource \\(r\\) in period \\(t\\) with \\(0 \\leq U_{r,t} \\leq 1\\)\n\n\n\n. . .\nQuestion: What could be the constraint?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#compute-relative-utilization-1",
    "href": "lectures/lecture-09-safety.html#compute-relative-utilization-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Compute Relative Utilization",
    "text": "Compute Relative Utilization\n\\[\n\\sum_{p \\in \\mathcal{P}_r}\\sum_{s \\in S_p} n_s \\times X_{s,t-a_{p,r},p}  = b_{r,t}\\times U_{r,t} \\quad \\forall r \\in \\mathcal{R}, t \\in \\mathcal{T}\n\\]\n. . .\n\n\n\n\n\n\nNoteWe use the following:\n\n\n\n\n\\(n_s\\) - Number of pilgrims in scheduling group \\(s\\)\n\\(a_{p,r}\\) - Period offset between stoning period and utilization period of \\(r\\) on \\(p\\)\n\\(b_{r,t}\\) - Capacity of resource \\(r\\) in period \\(t\\) in number of pilgrims\n\\(X_{s,t,p}\\) - 1, if \\(s\\) is scheduled to perform stoning in \\(t\\) and to use \\(p\\), 0 else\n\\(U_{r,t}\\) - Relative utilization of resource \\(r\\) in period \\(t\\) with \\(0 \\leq U_{r,t} \\leq 1\\)",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#section-4",
    "href": "lectures/lecture-09-safety.html#section-4",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "Let’s pause!\nHave you understood\nthis part?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#how-does-the-shift-work",
    "href": "lectures/lecture-09-safety.html#how-does-the-shift-work",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "How does the shift work?",
    "text": "How does the shift work?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#keep-fluctuations-within-bounds",
    "href": "lectures/lecture-09-safety.html#keep-fluctuations-within-bounds",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Keep Fluctuations within Bounds?",
    "text": "Keep Fluctuations within Bounds?\n\n\n\n\n\n\nImportantThe goal of this constraint is to:\n\n\n\nKeep the relative utilization of each resource within bounds to ensure a safer event.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following:\n\n\n\n\n\\(\\sigma_r\\) - max. relative utilization deviation between \\(t\\) for \\(r\\)\n\\(U_{r,t}\\) - Relative utilization of resource \\(r\\) in period \\(t\\) with \\(0 \\leq U_{rt} \\leq 1\\)\n\n\n\n. . .\nQuestion: What could be the constraint?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#keep-fluctuations-within-bounds-1",
    "href": "lectures/lecture-09-safety.html#keep-fluctuations-within-bounds-1",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Keep Fluctuations within Bounds",
    "text": "Keep Fluctuations within Bounds\n\\[\nU_{r,t} - U_{r,t-1} \\leq \\sigma_r \\quad \\forall (r,t) \\in \\left| \\mathcal{R}\\times \\mathcal{T}\\right|\n\\]\n\\[\nU_{r,t-1} - U_{r,t} \\leq \\sigma_r \\quad \\forall (r,t) \\in \\left| \\mathcal{R}\\times \\mathcal{T}\\right|\n\\]\n. . .\nQuestion: Can somebody explain why this works?\n\nEach constraint limits the change\nThe first one limits the increase\nThe second one limits the decrease",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#scheduling-problem-i",
    "href": "lectures/lecture-09-safety.html#scheduling-problem-i",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Scheduling Problem I",
    "text": "Scheduling Problem I\n\\[\\begin{align*}\n\\text{min} \\quad \\sum_{s\\in \\mathcal{S}}\\sum_{t \\in \\mathcal{T}_s}\\sum_{p \\in P_s} f_{s,t} \\times X_{s,t,p}\n\\end{align*}\\]\nsubject to:\n\\[\\begin{align*}\n& \\sum_{p \\in \\mathcal{P}_c} Y_{c,p} = 1 && \\forall c \\in \\mathcal{C} \\\\\n& \\sum_{t \\in \\mathcal{T}_s} X_{s,t,p}  = Y_{c,p} &&  \\forall c \\in \\mathcal{C}, p \\in \\mathcal{P}_c, s \\in \\mathcal{S}_c\n\\end{align*}\\]",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#scheduling-problem-ii",
    "href": "lectures/lecture-09-safety.html#scheduling-problem-ii",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Scheduling Problem II",
    "text": "Scheduling Problem II\n\\[\\begin{align*}\n& \\sum_{p \\in \\mathcal{P}_r}\\sum_{s \\in S_p} n_s \\cdot X_{s,t-a_{p,r},p}  = b_{r,t}\\cdot U_{r,t} && \\forall r \\in \\mathcal{R}, t \\in \\mathcal{T} \\\\\n& U_{r,t} - U_{r,t-1} \\leq \\sigma_r && \\forall (r,t) \\in \\left| \\mathcal{R}\\times \\mathcal{T}\\right| \\\\\n& U_{r,t-1} - U_{r,t} \\leq \\sigma_r && \\forall (r,t) \\in \\left| \\mathcal{R}\\times \\mathcal{T}\\right|\n\\end{align*}\\]\n\n\n\n\n\n\nRestricting the relative utilization of each resource to a certain bound.",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#scheduling-problem-iii",
    "href": "lectures/lecture-09-safety.html#scheduling-problem-iii",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Scheduling Problem III",
    "text": "Scheduling Problem III\n\\[\\begin{align*}\n& X_{s,t,p} \\in \\{0,1\\}  && \\forall s \\in \\mathcal{S}, \\forall t \\in \\mathcal{T}_s, \\forall p \\in \\mathcal{P}_s \\\\\n& Y_{c,p} \\in \\{0,1\\} && \\forall c \\in \\mathcal{C}, p \\in \\mathcal{P}_c \\\\\n& U_{r,t} \\in [0,1] && \\forall r \\in \\mathcal{R}, t \\in \\mathcal{T}\n\\end{align*}\\]\n\n\n\n\n\n\nAll variables, except for \\(U_{r,t}\\), are binary.",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#characteristics",
    "href": "lectures/lecture-09-safety.html#characteristics",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Characteristics",
    "text": "Characteristics\nQuestions: On model characteristics\n\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domains do we have?\nHave we specified the length of a period?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#model-assumptions",
    "href": "lectures/lecture-09-safety.html#model-assumptions",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\n\nWhat assumptions have we made?\nWhat are likely issues that can arise if applied?\nHow can we measure flow capacities?\nAre all pilgrims equally fast?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#capacity-buffers",
    "href": "lectures/lecture-09-safety.html#capacity-buffers",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Capacity Buffers",
    "text": "Capacity Buffers",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#section-5",
    "href": "lectures/lecture-09-safety.html#section-5",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "Can this be\napplied?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#implementation",
    "href": "lectures/lecture-09-safety.html#implementation",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Implementation",
    "text": "Implementation\n\nOptimization part of a bigger picture\nMany projects with several disciplines involved\nE.g. Simulations, infrastructure projects, real-time monitoring, contingency plans, awareness campaigns, …\n\n. . .\n\n\n\n\n\n\nOptimization was part of a project by Knut Haase and his team (Haase et al. 2016).",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#wrap-up",
    "href": "lectures/lecture-09-safety.html#wrap-up",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Wrap Up",
    "text": "Wrap Up\n\n\n\n\n\n\nNoteAnd that’s it for todays lecture!\n\n\n\nWe now have covered a scheduling problem based on a real-world application and are ready to start solving some new tasks in the upcoming tutorial.",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#section-9",
    "href": "lectures/lecture-09-safety.html#section-9",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-09-safety.html#literature-i",
    "href": "lectures/lecture-09-safety.html#literature-i",
    "title": "Lecture IX - Safety Planning for the Islamic Pilgrimage",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "09 Safety",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#central-libraries",
    "href": "lectures/lecture-07-presentation.html#central-libraries",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Central Libraries",
    "text": "Central Libraries\n\nQuestion: Anybody an idea what a central library is?"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#central-libraries-1",
    "href": "lectures/lecture-07-presentation.html#central-libraries-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Central Libraries",
    "text": "Central Libraries\n\nBook Delivery to Libraries in Germany\nThey supply all local libraries within the same state\nComplex, as the number of libraries per state can be large\nBooks and media in the libraries change often\nCustomers can request books from other libraries"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#structure-of-the-deliveries",
    "href": "lectures/lecture-07-presentation.html#structure-of-the-deliveries",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Structure of the Deliveries",
    "text": "Structure of the Deliveries\n\nFor delivery, central has several employees and cars\nLocal libraries differ in size, some receive more items\nItems are collected as well during the tours1\nThey are transported back to the central library\n\nDue to regulations, the delivery tours cannot exceed a certain duration"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#potential-decisions",
    "href": "lectures/lecture-07-presentation.html#potential-decisions",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Potential Decisions",
    "text": "Potential Decisions\nQuestion: What decisions can the library make for tours?\n\n\nSubdivide their set of libraries into several ordered tours\nDecide in which order to visit the libraries\nEvaluate which car to use for each of the tours\nDecide which driver to assign to each of the tours"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#impact-of-the-decisions",
    "href": "lectures/lecture-07-presentation.html#impact-of-the-decisions",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Impact of the Decisions",
    "text": "Impact of the Decisions\nQuestion: What is the impact of the decisions?\n\n\nLonger driving routes increase the footprint of the deliveries\nSuboptimal tours can lead to unnecessary costs\nFuel, personnel, and repairs are increased\nUnhappy customers due to waiting times on ordered books"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#section",
    "href": "lectures/lecture-07-presentation.html#section",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Have you heard of\nthis problem before?"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#objective",
    "href": "lectures/lecture-07-presentation.html#objective",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Objective",
    "text": "Objective\nQuestion: What could be the objective for central libraries?\n\n\nLowering costs through improved tours\nImprovement of their footprint through shorter tours\nFaster fulfillment of the deliveries"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#modelling",
    "href": "lectures/lecture-07-presentation.html#modelling",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Modelling",
    "text": "Modelling\nQuestion: What could we try to model?\n\nMinimization of the travel time while supplying all libraries in the state and adhering to the vehicle capacities and driving time restrictions."
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#section-1",
    "href": "lectures/lecture-07-presentation.html#section-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Capacitated\nVehicle Routing\n(CVRP)"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#vehicle-routing-problem",
    "href": "lectures/lecture-07-presentation.html#vehicle-routing-problem",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Vehicle Routing Problem",
    "text": "Vehicle Routing Problem\n\nCVRP is a subproblem\nMain problem is Vehicle Routing Problem (VRP)\nProblem class about designing routes for vehicle fleets\n\n\n\n\n\n\n\n\nThere are many variants of the VRP! E.g., with time windows, periodic deliveries, allowing for pickups or deliveries, and much more!"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#section-2",
    "href": "lectures/lecture-07-presentation.html#section-2",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Let’s visualize\nthe problem!"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#basic-problem-setting",
    "href": "lectures/lecture-07-presentation.html#basic-problem-setting",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Basic Problem Setting",
    "text": "Basic Problem Setting"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#basic-problem-setting-with-arcs",
    "href": "lectures/lecture-07-presentation.html#basic-problem-setting-with-arcs",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Basic Problem Setting with Arcs",
    "text": "Basic Problem Setting with Arcs"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#setting-with-vehicles",
    "href": "lectures/lecture-07-presentation.html#setting-with-vehicles",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Setting with Vehicles",
    "text": "Setting with Vehicles"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#basic-problem-setting-with-tours",
    "href": "lectures/lecture-07-presentation.html#basic-problem-setting-with-tours",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Basic Problem Setting with Tours",
    "text": "Basic Problem Setting with Tours"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#available-sets",
    "href": "lectures/lecture-07-presentation.html#available-sets",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Available Sets",
    "text": "Available Sets\nQuestion: What could be the sets here?\n\n\n\\(\\mathcal{V}\\) - Set of all nodes, index \\(i \\in \\{0,1,2,...,n\\}\\)\n\\(\\mathcal{A}\\) - Set of all arcs between the nodes, index \\((i,j) \\in \\mathcal{A}\\)\n\\(\\mathcal{K}\\) - Set of vehicles with identical capacity, index \\(k \\in \\mathcal{K}\\)\n\\(0 \\in \\mathcal{V}\\) - Depot where the vehicles start"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#available-parameters",
    "href": "lectures/lecture-07-presentation.html#available-parameters",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Available Parameters",
    "text": "Available Parameters\nQuestion: What are possible parameters?\n\n\n\\(b\\) - Capacity per vehicle\n\\(t\\) - Maximal duration of each tour\n\\(d_i\\) - Demand at node \\(i\\)\n\\(c_{i,j}\\) - Travel time on an arc from \\(i\\) to \\(j\\)\n\n\n\n\n\n\n\n\n\n\\(t\\) is the maximal duration of each tour, not the travel time on an arc or an index!"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#decision-variables",
    "href": "lectures/lecture-07-presentation.html#decision-variables",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Decision Variable(s)?",
    "text": "Decision Variable(s)?\n\n\n\n\n\n\nWe have the following sets:\n\n\n\nAll nodes, including the depot, \\(i \\in \\mathcal{V}\\)\nAll arcs between the nodes, \\((i,j) \\in \\mathcal{A}\\)\nThe available vehicles, \\(k \\in \\mathcal{K}\\)\n\n\n\n\n\n\n\n\n\n\n\nOur objective is to:\n\n\nMinimize the total travel time while supplying all customers and adhering to the vehicle capacities and duration restrictions.\n\n\n\n\n\nQuestion: What could be our decision variable/s?"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#decision-variables-1",
    "href": "lectures/lecture-07-presentation.html#decision-variables-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Decision Variables",
    "text": "Decision Variables\n\n\\(X_{i,j,k}\\) - 1, if \\(k\\) passes between \\(i\\) and \\(j\\) on its tour, 0 otherwise\n\n\n\n\n\n\n\n\nVariable Domain\n\n\n\\(X_{i,j,k}\\) is a binary variable, as it can only take values 0 or 1. But most likely, you will already have spotted that!\n\n\n\n\n\nQuestion: Why this might make the problem difficult?"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#decision-variables-again",
    "href": "lectures/lecture-07-presentation.html#decision-variables-again",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Decision Variable/s (again)?",
    "text": "Decision Variable/s (again)?\n\n\n\n\n\n\nWe have the following sets:\n\n\n\nAll nodes, including the depot, \\(i \\in \\mathcal{V}\\)\nAll arcs between the nodes, \\((i,j) \\in \\mathcal{A}\\)\nThe available vehicles, \\(k \\in \\mathcal{K}\\)\n\n\n\n\n\n\n\n\n\n\n\nOur objective is to:\n\n\nMinimization of the travel time (or driving distance), while supplying all customers and adhering to the vehicle capacities and duration restrictions. Hint: Even with many vehicles, each arc can maximally be passed once!"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#decision-variables-again-1",
    "href": "lectures/lecture-07-presentation.html#decision-variables-again-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Decision Variables (again)",
    "text": "Decision Variables (again)\nQuestion: What could be our decision variable/s?\n\n\n\\(X_{i,j}\\) - 1, if the arc between \\(i\\) and \\(j\\) is part of a tour, else 0\n\n\n\n\n\n\n\n\n\nOnly possible under certain conditions!\n\n\nOnly possible, if time and capacity constraints are equal for all vehicles!"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#objective-function",
    "href": "lectures/lecture-07-presentation.html#objective-function",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Objective Function?",
    "text": "Objective Function?\n\n\n\n\n\n\nOur objective is to:\n\n\nMinimization of the travel time (or driving distance), while supplying all customers and adhering to the vehicle capacities and duration restrictions.\n\n\n\n\nQuestion: What could be our objective function?\n\n\n\n\n\n\n\n\nWe need the following variable:\n\n\n\n\\(X_{i,j}\\) - 1, if the arc between \\(i\\) and \\(j\\) is part of a tour, else 0"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#objective-function-1",
    "href": "lectures/lecture-07-presentation.html#objective-function-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Objective Function",
    "text": "Objective Function\n\n\n\n\n\n\nWe need the following parameters:\n\n\n\n\\(c_{i,j}\\) - travel time on an arc from \\(i\\) to \\(j\\)\n\n\n\n\n\n\\[\\text{minimize} \\quad \\sum_{(i,j) \\in \\mathcal{A}} c_{i,j} \\times X_{i,j}\\]\n\n\nQuestion: What does \\((i,j) \\in \\mathcal{A}\\) under the sum mean?"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#problem-constraints",
    "href": "lectures/lecture-07-presentation.html#problem-constraints",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Problem Constraints",
    "text": "Problem Constraints"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#constraints",
    "href": "lectures/lecture-07-presentation.html#constraints",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Constraints?",
    "text": "Constraints?\nQuestion: What constraints do we need?\n\n\nEach customer has to be visited once\nThe depot has to be entered and left \\(|\\mathcal{K}|\\) times\nWe have to enforce the capacity of our vehicles\nWe have to ensure the maximal duration of each tour\n\n\n\n\n\n\n\n\n\nSubtours\n\n\nIn addition, we have to prevent subtours!"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#section-3",
    "href": "lectures/lecture-07-presentation.html#section-3",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "What is a\nsubtour?"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#subtours-1",
    "href": "lectures/lecture-07-presentation.html#subtours-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Subtours",
    "text": "Subtours"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#visit-each-customer-once",
    "href": "lectures/lecture-07-presentation.html#visit-each-customer-once",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Visit Each Customer Once?",
    "text": "Visit Each Customer Once?\n\n\n\n\n\n\nThe goal of these constraints is to:\n\n\nEnsure that each customer is visited exactly once. Essentially, we could also say that each node has to be entered and left exactly once.\n\n\n\n\n\n\n\n\n\n\nWe need the following sets and variables:\n\n\n\n\\(\\mathcal{V}\\) - Set of all nodes, index \\(i \\in \\{0,1,2,...,n\\}\\)\n\\(X_{i,j}\\) - 1, if the arc between \\(i\\) and \\(j\\) is part of a tour, 0 otherwise"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#visit-each-customer-once-1",
    "href": "lectures/lecture-07-presentation.html#visit-each-customer-once-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Visit Each Customer Once",
    "text": "Visit Each Customer Once\nQuestion: What could the constraint look like?\n\n\\[\n\\sum_{i \\in \\mathcal{V}} X_{i,j} = 1 \\quad \\forall j \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n\\[\n\\sum_{j \\in \\mathcal{V}} X_{i,j} = 1 \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n\n\nQuestion: Why for all nodes except the depot?\n\n\nThe depot is the only node that is visited multiple times!"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#depot-entry-and-exit-constraints",
    "href": "lectures/lecture-07-presentation.html#depot-entry-and-exit-constraints",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Depot Entry and Exit Constraints?",
    "text": "Depot Entry and Exit Constraints?\n\n\n\n\n\n\nThe goal of these constraints is to:\n\n\nEnsure that each vehicle enters and leaves the depot exactly \\(|\\mathcal{K}|\\) times, as we have \\(|\\mathcal{K}|\\) vehicles and each vehicle has to return to the depot.\n\n\n\n\n\n\n\n\n\n\nWe need the following sets and variables:\n\n\n\n\\(\\mathcal{V}\\) - Set of all nodes, index \\(i \\in \\{0,1,2,...,n\\}\\)\n\\(|\\mathcal{K}|\\) - Number of vehicles\n\\(X_{i,j}\\) - 1, if the arc between \\(i\\) and \\(j\\) is part of a tour, 0 otherwise\n\n\n\n\n\n\nQuestion: What could the constraint look like?"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#depot-entry-and-exit-constraints-1",
    "href": "lectures/lecture-07-presentation.html#depot-entry-and-exit-constraints-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Depot Entry and Exit Constraints",
    "text": "Depot Entry and Exit Constraints\n\\[\n\\sum_{i \\in \\mathcal{V} \\setminus \\{0\\}} X_{i,0} = |\\mathcal{K}|\n\\]\n\\[\n\\sum_{j \\in \\mathcal{V} \\setminus \\{0\\}} X_{0,j} = |\\mathcal{K}|\n\\]\n\n\n\n\n\n\n\nAre all constraints necessary?\n\n\nNo, theoretically we could also say that we only have to leave or enter the depot exactly \\(|\\mathcal{K}|\\) times, as the other constraint is already enforced by the “visit each customer once constraint”."
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#section-4",
    "href": "lectures/lecture-07-presentation.html#section-4",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "The next ones are\na little bit tricky."
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#mtz-formulation",
    "href": "lectures/lecture-07-presentation.html#mtz-formulation",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "MTZ Formulation",
    "text": "MTZ Formulation\n\nMiller-Tucker-Zemlin (MTZ) Constraints\nFormulation by Kara, Laporte, and Bektas (2004)\nPrevent subtours and track routes and capacity utilization\nFirst, we need an additional variable!\n\\(U_{i}\\) - Capacity utilization at \\(i\\) of vehicle on its tour with \\(i \\in \\mathcal{I}\\)\n\n\n\n\n\n\n\n\nYou don’t need to guess these constraints, as they are quite tricky!"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#mtz-constraints",
    "href": "lectures/lecture-07-presentation.html#mtz-constraints",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "MTZ Constraints",
    "text": "MTZ Constraints\n\n\n\n\n\n\nWe need the following sets, parameters, and variables:\n\n\n\n\\(\\mathcal{V}\\) - Set of all nodes, index \\(i \\in \\{0,1,2,...,n\\}\\)\n\\(X_{i,j}\\) - 1, if the arc between \\(i\\) and \\(j\\) is part of a tour, 0 otherwise\n\\(U_{i}\\) - Capacity utilization at \\(i\\) of vehicle on its tour with \\(i \\in \\mathcal{I}\\)\n\\(b\\) - Capacity per vehicle (all are identical!)\n\\(d_i\\) - Demand at node \\(i\\)\n\n\n\n\n\n\\[\nU_i - U_j + b \\times X_{i,j} \\leq b - d_j \\quad \\forall i,j \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n\n\n\\[\nd_i \\leq U_i \\leq b \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}\n\\]"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#section-5",
    "href": "lectures/lecture-07-presentation.html#section-5",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Too\ncomplicated?"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#dont-worry",
    "href": "lectures/lecture-07-presentation.html#dont-worry",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Don’t worry!",
    "text": "Don’t worry!\n\n\n\n\n\nLet’s break it down!\n\\(d_i\\) for all customers is 1\nCapacity \\(b\\) per vehicle is 5\n\\(U_i\\) is the current capacity utilization at node \\(i \\in \\mathcal{I}\\)"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#no-connection-between-nodes",
    "href": "lectures/lecture-07-presentation.html#no-connection-between-nodes",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "No connection between nodes",
    "text": "No connection between nodes\n\n\n\n\n\nIn case \\(X_{ij} = 0\\):\n\n\\(U_i - U_j \\leq b - d_j\\)\nNon-binding for relation between two nodes\n\nFollowing is perfectly fine:\n\n\\(U_i \\leq b\\) and \\(U_j \\geq d_j\\)"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#connection-between-two-nodes",
    "href": "lectures/lecture-07-presentation.html#connection-between-two-nodes",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Connection between two nodes",
    "text": "Connection between two nodes\n\n\n\n\n\nIn case \\(X_{ij} = 1\\):\n\n\\[U_i - U_j + b \\leq b - d_j\\]\nBinding for relation between two nodes\n\nCan be summarized to:\n\n\\(U_j \\geq d_j + U_i\\)"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#connection-in-more-detail",
    "href": "lectures/lecture-07-presentation.html#connection-in-more-detail",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Connection in more detail",
    "text": "Connection in more detail\nQuestion: Why is it binding?\n\n\nBinding as \\(U_j\\) has to be at least as large as \\(d_i + U_i\\)\nHence, fullfiled if the demand of \\(i\\) is added to the vehicle\n\n\n\nQuestion: Do you get the idea?\n\n\n\nIf \\(X_{ij} = 1\\), then \\(U_j\\) has to be at least as large as \\(d_i + U_i\\)\nIf \\(X_{ij} = 0\\), then \\(U_i \\leq b\\) and \\(U_j \\geq d_j\\)"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#tour-from-the-depot",
    "href": "lectures/lecture-07-presentation.html#tour-from-the-depot",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Tour from the Depot",
    "text": "Tour from the Depot\n\n\n\n\n\nTour of vehicle A ok\nDepot is the only node visited multiple times\nBut the constraints are not applied here!"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#tour-on-its-own",
    "href": "lectures/lecture-07-presentation.html#tour-on-its-own",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Tour on its Own",
    "text": "Tour on its Own\n\n\n\n\n\nLet’s start at node \\(H\\)\nWe drive to node \\(C\\)\n\\(U_C\\) = 1"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#tour-on-its-own-ii",
    "href": "lectures/lecture-07-presentation.html#tour-on-its-own-ii",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Tour on its Own II",
    "text": "Tour on its Own II\n\n\n\n\n\nWe continue to node \\(I\\)\n\\(U_I\\) = 2"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#tour-on-its-own-iii",
    "href": "lectures/lecture-07-presentation.html#tour-on-its-own-iii",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Tour on its Own III",
    "text": "Tour on its Own III\n\n\n\n\n\nWe continue to node \\(H\\)\n\\(U_H\\) = 3\nConnection from \\(H\\) to \\(C\\)\n\\(U_H\\) is greater than \\(U_C\\)!\nInfeasible solution!"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#subtour-elimination",
    "href": "lectures/lecture-07-presentation.html#subtour-elimination",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Subtour Elimination",
    "text": "Subtour Elimination\n\nConnection in the other direction wouldn’t work as well\nOnly depot as “reset” , as constraints are not applied here\n\nQuestion: What about the capacity?\n\n\nRemember variable domain of \\(U_i\\)?\n\\(d_i \\leq U_i \\leq b\\) → Overall capacity limit enforced!"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#ensure-time-limit",
    "href": "lectures/lecture-07-presentation.html#ensure-time-limit",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Ensure time limit?",
    "text": "Ensure time limit?\nQuestion: Anybody an idea?\n\n\nConstraints basically follow the same idea!\nFirst, we again need an additional variable\n\\(T_{i}\\) - Time spent on tour at the node \\(i\\) of a vehicle with \\(i \\in \\mathcal{I}\\)"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#ensure-time-limit-1",
    "href": "lectures/lecture-07-presentation.html#ensure-time-limit-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Ensure time limit",
    "text": "Ensure time limit\n\n\n\n\n\n\nWe need the following sets and variables:\n\n\n\n\\(\\mathcal{V}\\) - Set of all nodes, index \\(i \\in \\{0,1,2,...,n\\}\\)\n\\(X_{i,j}\\) - 1, if the arc between \\(i\\) and \\(j\\) is part of a tour, 0 otherwise\n\\(T_{i}\\) - Time spent on tour at the node \\(i\\) of a vehicle with \\(i \\in \\mathcal{I}\\)\n\\(t\\) - Maximal duration of a tour\n\\(c_{i,j}\\) - Travel time on an arc from \\(i\\) to \\(j\\)\n\n\n\n\n\n\\[\nT_i - T_j + t \\times X_{i,j} \\leq t - c_{i,j} \\quad \\forall i,j \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n\n\n\\[\n0 \\leq T_{i} \\leq t \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}\n\\]"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#section-6",
    "href": "lectures/lecture-07-presentation.html#section-6",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Any questions?"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#objective-1",
    "href": "lectures/lecture-07-presentation.html#objective-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Objective",
    "text": "Objective\n\\[\n\\text{minimize} \\quad \\sum_{(i,j) \\in \\mathcal{A}} c_{i,j} \\times X_{i,j}\n\\]\n\n\n\n\n\n\nThe goal of the objective function is to:\n\n\nMinimize the total travel distance."
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#each-customer-is-visited-once",
    "href": "lectures/lecture-07-presentation.html#each-customer-is-visited-once",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Each customer is visited once",
    "text": "Each customer is visited once\n\\[\n\\sum_{i \\in \\mathcal{V}} X_{i,j} = 1 \\quad \\forall j \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n\\[\n\\sum_{j \\in \\mathcal{V}} X_{i,j} = 1 \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n\n\n\n\n\n\nOur constraints ensure:\n\n\nEach customer is visited exactly once."
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#depot-entry-and-exit",
    "href": "lectures/lecture-07-presentation.html#depot-entry-and-exit",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Depot entry and exit",
    "text": "Depot entry and exit\n\\[\n\\sum_{i \\in \\mathcal{V} \\setminus \\{0\\}} X_{i,0} = |\\mathcal{K}|\n\\]\n\\[\n\\sum_{j \\in \\mathcal{V} \\setminus \\{0\\}} X_{0,j} = |\\mathcal{K}|\n\\]\n\n\n\n\n\n\nOur constraints ensure:\n\n\nThe depot is visited by exactly \\(|\\mathcal{K}|\\) vehicles. Note, that we could remove one of the constraints and the solution would still be optimal."
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#capacity-and-subtour-elimination-1",
    "href": "lectures/lecture-07-presentation.html#capacity-and-subtour-elimination-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Capacity and subtour elimination",
    "text": "Capacity and subtour elimination\n\\[\nU_i - U_j + b \\times X_{i,j} \\leq b - d_j \\quad \\forall i,j \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n\\[\nd_i \\leq U_i \\leq b \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}\n\\]\n\n\n\n\n\n\nOur constraints ensure:\n\n\nThe capacity limit is respected and subtours are eliminated."
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#time-constraints",
    "href": "lectures/lecture-07-presentation.html#time-constraints",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Time constraints",
    "text": "Time constraints\n\\[\nT_i - T_j + t \\times X_{i,j} \\leq t - c_{i,j} \\quad \\forall i,j \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n\\[\n0 \\leq T_i \\leq t \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}\n\\]\n\n\n\n\n\n\nOur constraints ensure:\n\n\nThe time limit is respected (and subtours are eliminated)."
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#variables",
    "href": "lectures/lecture-07-presentation.html#variables",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Variables",
    "text": "Variables\n\\[\nX_{i,j} \\in \\{0,1\\} \\quad \\forall i,j \\in \\mathcal{V}\n\\]\n\\[\nd_i \\leq U_i \\leq b \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}\n\\]\n\\[\n0 \\leq T_i \\leq t \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}\n\\]\n\n\n\n\n\n\nThe variable domains make sure that:\n\n\nThe binary setup variable is either 0 or 1 and the new variables are below the time and capacity limit."
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#characteristics",
    "href": "lectures/lecture-07-presentation.html#characteristics",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Characteristics",
    "text": "Characteristics\nQuestions: On model characteristics\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domains do we have?\nWhat do you think, can the model be solved quickly?"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#model-assumptions",
    "href": "lectures/lecture-07-presentation.html#model-assumptions",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\nWhat assumptions have we made?\nWhat are likely issues that can arise if the model is applied?\nHave we considered service times?"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#extensions-of-the-cvrp",
    "href": "lectures/lecture-07-presentation.html#extensions-of-the-cvrp",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Extensions of the CVRP",
    "text": "Extensions of the CVRP\nQuestions: What extensions do you know?\n\n\ntime windows (TW)\nsoft time windows (STW)\nmultiple depots (MD)\nheterogeneous fleet (HF)\nbackhauls (B)\npickup and delivery (PD)"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#case-study-in-schleswig-holstein",
    "href": "lectures/lecture-07-presentation.html#case-study-in-schleswig-holstein",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Case Study in Schleswig-Holstein",
    "text": "Case Study in Schleswig-Holstein\n\n\n\n165 libraries\n119 visited biweekly\nUp to 9 different tours\nTime-Limit of 8 hours for each tour"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#section-7",
    "href": "lectures/lecture-07-presentation.html#section-7",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Can our formulation\nsolve the problem\non a real-world instance?"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#section-8",
    "href": "lectures/lecture-07-presentation.html#section-8",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "No, although we can find\nsolutions within one hour,\nthe gap is still very large\nwith 40%-45%."
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#problem-is-np-hard",
    "href": "lectures/lecture-07-presentation.html#problem-is-np-hard",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Problem is NP-hard",
    "text": "Problem is NP-hard\n\nWe have already seen that a problem can be NP-hard\nLikely, that there are no polynomial-time algorithms\nDoesn’t mean that it can’t be solved!\n\n\n\n\n\n\n\n\nWe won’t go deeper into this, but feel free to ask me!"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#section-9",
    "href": "lectures/lecture-07-presentation.html#section-9",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Can we do\nanything to solve\nthe model?"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#heuristics",
    "href": "lectures/lecture-07-presentation.html#heuristics",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Heuristics",
    "text": "Heuristics\n\nWe can still solve the problem with a heuristic\nLikely not the optimal solution, but a lot of research goes into efficient algorithms to solve these problems\nIn our case study we applied Hybrid Genetic Search for the CVRP (HGS-CVRP) by Vidal (2022)\n\n\n\n\n\n\n\n\nFor problems with 100+ locations, heuristics are often the only practical choice."
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#applications-beyond-libraries",
    "href": "lectures/lecture-07-presentation.html#applications-beyond-libraries",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Applications Beyond Libraries",
    "text": "Applications Beyond Libraries\n\n\nLogistics & Delivery\n\nPackage delivery\nFood delivery services\nGrocery delivery\nMail distribution\n\n\nService Industries\n\nMaintenance crews\nHome healthcare visits\nWaste collection\nSchool bus routing\n\n\n\nQuestion: Can you think of other applications?"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#conclusion",
    "href": "lectures/lecture-07-presentation.html#conclusion",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Conclusion",
    "text": "Conclusion\n\nStandard problem that occurs in many different places\nSolving the problem with a mathematical model is difficult\nNowadays, there are many good heuristics\nMany companies are working on the problem\n\n\n\n\n\n\n\n\nAnd that’s it for todays lecture!\n\n\nWe now have covered the Capacitated Vehicle Routing Problem and are ready to start solving some tasks in the upcoming tutorial."
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#section-10",
    "href": "lectures/lecture-07-presentation.html#section-10",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#literature-i",
    "href": "lectures/lecture-07-presentation.html#literature-i",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lecture-07-presentation.html#literature-ii",
    "href": "lectures/lecture-07-presentation.html#literature-ii",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Literature II",
    "text": "Literature II\n\n\n\n\nKara, Imdat, Gilbert Laporte, and Tolga Bektas. 2004. “A Note on the Lifted Miller–Tucker–Zemlin Subtour Elimination Constraints for the Capacitated Vehicle Routing Problem.” European Journal of Operational Research 158 (3): 793–95. https://doi.org/https://doi.org/10.1016/S0377-2217(03)00377-1.\n\n\nVidal, Thibaut. 2022. “Hybrid Genetic Search for the CVRP: Open-Source Implementation and SWAP* Neighborhood.” Computers & Operations Research 140 (April): 105643. https://doi.org/10.1016/j.cor.2021.105643."
  },
  {
    "objectID": "lectures/lecture-07-routing.html",
    "href": "lectures/lecture-07-routing.html",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": ". . .\nQuestion: Anybody an idea what a central library is?\n\n\n\n\n\n\n\nBook Delivery to Libraries in Germany\nThey supply all local libraries within the same state\nComplex, as the number of libraries per state can be large\nBooks and media in the libraries change often\nCustomers can request books from other libraries\n\n\n\n\n\nFor delivery, central has several employees and cars\nLocal libraries differ in size, some receive more items\nItems are collected as well during the tours1\nThey are transported back to the central library\n\n\n\n\nQuestion: What decisions can the library make for tours?\n. . .\n\nSubdivide their set of libraries into several ordered tours\nDecide in which order to visit the libraries\nEvaluate which car to use for each of the tours\nDecide which driver to assign to each of the tours\n\n\n\n\nQuestion: What is the impact of the decisions?\n. . .\n\nLonger driving routes increase the footprint of the deliveries\nSuboptimal tours can lead to unnecessary costs\nFuel, personnel, and repairs are increased\nUnhappy customers due to waiting times on ordered books\n\n\n\n\n\nHave you heard of\nthis problem before?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#central-libraries",
    "href": "lectures/lecture-07-routing.html#central-libraries",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": ". . .\nQuestion: Anybody an idea what a central library is?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#central-libraries-1",
    "href": "lectures/lecture-07-routing.html#central-libraries-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Book Delivery to Libraries in Germany\nThey supply all local libraries within the same state\nComplex, as the number of libraries per state can be large\nBooks and media in the libraries change often\nCustomers can request books from other libraries",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#structure-of-the-deliveries",
    "href": "lectures/lecture-07-routing.html#structure-of-the-deliveries",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "For delivery, central has several employees and cars\nLocal libraries differ in size, some receive more items\nItems are collected as well during the tours1\nThey are transported back to the central library",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#potential-decisions",
    "href": "lectures/lecture-07-routing.html#potential-decisions",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Question: What decisions can the library make for tours?\n. . .\n\nSubdivide their set of libraries into several ordered tours\nDecide in which order to visit the libraries\nEvaluate which car to use for each of the tours\nDecide which driver to assign to each of the tours",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#impact-of-the-decisions",
    "href": "lectures/lecture-07-routing.html#impact-of-the-decisions",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Question: What is the impact of the decisions?\n. . .\n\nLonger driving routes increase the footprint of the deliveries\nSuboptimal tours can lead to unnecessary costs\nFuel, personnel, and repairs are increased\nUnhappy customers due to waiting times on ordered books",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#section",
    "href": "lectures/lecture-07-routing.html#section",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Have you heard of\nthis problem before?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#objective",
    "href": "lectures/lecture-07-routing.html#objective",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Objective",
    "text": "Objective\nQuestion: What could be the objective for central libraries?\n. . .\n\nLowering costs through improved tours\nImprovement of their footprint through shorter tours\nFaster fulfillment of the deliveries",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#modelling",
    "href": "lectures/lecture-07-routing.html#modelling",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Modelling",
    "text": "Modelling\nQuestion: What could we try to model?\n. . .\nMinimization of the travel time while supplying all libraries in the state and adhering to the vehicle capacities and driving time restrictions.",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#section-1",
    "href": "lectures/lecture-07-routing.html#section-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Capacitated\nVehicle Routing\n(CVRP)",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#vehicle-routing-problem",
    "href": "lectures/lecture-07-routing.html#vehicle-routing-problem",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Vehicle Routing Problem",
    "text": "Vehicle Routing Problem\n\nCVRP is a subproblem\nMain problem is Vehicle Routing Problem (VRP)\nProblem class about designing routes for vehicle fleets\n\n. . .\n\n\n\n\n\n\nThere are many variants of the VRP! E.g., with time windows, periodic deliveries, allowing for pickups or deliveries, and much more!",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#section-2",
    "href": "lectures/lecture-07-routing.html#section-2",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Let’s visualize\nthe problem!",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#basic-problem-setting",
    "href": "lectures/lecture-07-routing.html#basic-problem-setting",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Basic Problem Setting",
    "text": "Basic Problem Setting",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#basic-problem-setting-with-arcs",
    "href": "lectures/lecture-07-routing.html#basic-problem-setting-with-arcs",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Basic Problem Setting with Arcs",
    "text": "Basic Problem Setting with Arcs",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#setting-with-vehicles",
    "href": "lectures/lecture-07-routing.html#setting-with-vehicles",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Setting with Vehicles",
    "text": "Setting with Vehicles",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#basic-problem-setting-with-tours",
    "href": "lectures/lecture-07-routing.html#basic-problem-setting-with-tours",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Basic Problem Setting with Tours",
    "text": "Basic Problem Setting with Tours",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#available-sets",
    "href": "lectures/lecture-07-routing.html#available-sets",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Available Sets",
    "text": "Available Sets\nQuestion: What could be the sets here?\n. . .\n\n\\(\\mathcal{V}\\) - Set of all nodes, index \\(i \\in \\{0,1,2,...,n\\}\\)\n\\(\\mathcal{A}\\) - Set of all arcs between the nodes, index \\((i,j) \\in \\mathcal{A}\\)\n\\(\\mathcal{K}\\) - Set of vehicles with identical capacity, index \\(k \\in \\mathcal{K}\\)\n\\(0 \\in \\mathcal{V}\\) - Depot where the vehicles start",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#available-parameters",
    "href": "lectures/lecture-07-routing.html#available-parameters",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Available Parameters",
    "text": "Available Parameters\nQuestion: What are possible parameters?\n. . .\n\n\\(b\\) - Capacity per vehicle\n\\(t\\) - Maximal duration of each tour\n\\(d_i\\) - Demand at node \\(i\\)\n\\(c_{i,j}\\) - Travel time on an arc from \\(i\\) to \\(j\\)\n\n. . .\n\n\n\n\n\n\n\\(t\\) is the maximal duration of each tour, not the travel time on an arc or an index!",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#decision-variables",
    "href": "lectures/lecture-07-routing.html#decision-variables",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Decision Variable(s)?",
    "text": "Decision Variable(s)?\n\n\n\n\n\n\nNoteWe have the following sets:\n\n\n\n\nAll nodes, including the depot, \\(i \\in \\mathcal{V}\\)\nAll arcs between the nodes, \\((i,j) \\in \\mathcal{A}\\)\nThe available vehicles, \\(k \\in \\mathcal{K}\\)\n\n\n\n. . .\n\n\n\n\n\n\nImportantOur objective is to:\n\n\n\nMinimize the total travel time while supplying all customers and adhering to the vehicle capacities and duration restrictions.\n\n\n. . .\nQuestion: What could be our decision variable/s?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#decision-variables-1",
    "href": "lectures/lecture-07-routing.html#decision-variables-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Decision Variables",
    "text": "Decision Variables\n\n\\(X_{i,j,k}\\) - 1, if \\(k\\) passes between \\(i\\) and \\(j\\) on its tour, 0 otherwise\n\n. . .\n\n\n\n\n\n\nNoteVariable Domain\n\n\n\n\\(X_{i,j,k}\\) is a binary variable, as it can only take values 0 or 1. But most likely, you will already have spotted that!\n\n\n. . .\nQuestion: Why this might make the problem difficult?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#decision-variables-again",
    "href": "lectures/lecture-07-routing.html#decision-variables-again",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Decision Variable/s (again)?",
    "text": "Decision Variable/s (again)?\n\n\n\n\n\n\nNoteWe have the following sets:\n\n\n\n\nAll nodes, including the depot, \\(i \\in \\mathcal{V}\\)\nAll arcs between the nodes, \\((i,j) \\in \\mathcal{A}\\)\nThe available vehicles, \\(k \\in \\mathcal{K}\\)\n\n\n\n. . .\n\n\n\n\n\n\nImportantOur objective is to:\n\n\n\nMinimization of the travel time (or driving distance), while supplying all customers and adhering to the vehicle capacities and duration restrictions. Hint: Even with many vehicles, each arc can maximally be passed once!",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#decision-variables-again-1",
    "href": "lectures/lecture-07-routing.html#decision-variables-again-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Decision Variables (again)",
    "text": "Decision Variables (again)\nQuestion: What could be our decision variable/s?\n. . .\n\n\\(X_{i,j}\\) - 1, if the arc between \\(i\\) and \\(j\\) is part of a tour, else 0\n\n. . .\n\n\n\n\n\n\nImportantOnly possible under certain conditions!\n\n\n\nOnly possible, if time and capacity constraints are equal for all vehicles!",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#objective-function",
    "href": "lectures/lecture-07-routing.html#objective-function",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Objective Function?",
    "text": "Objective Function?\n\n\n\n\n\n\nImportantOur objective is to:\n\n\n\nMinimization of the travel time (or driving distance), while supplying all customers and adhering to the vehicle capacities and duration restrictions.\n\n\n. . .\nQuestion: What could be our objective function?\n. . .\n\n\n\n\n\n\nNoteWe need the following variable:\n\n\n\n\n\\(X_{i,j}\\) - 1, if the arc between \\(i\\) and \\(j\\) is part of a tour, else 0",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#objective-function-1",
    "href": "lectures/lecture-07-routing.html#objective-function-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Objective Function",
    "text": "Objective Function\n\n\n\n\n\n\nNoteWe need the following parameters:\n\n\n\n\n\\(c_{i,j}\\) - travel time on an arc from \\(i\\) to \\(j\\)\n\n\n\n. . .\n\\[\\text{minimize} \\quad \\sum_{(i,j) \\in \\mathcal{A}} c_{i,j} \\times X_{i,j}\\]\n. . .\nQuestion: What does \\((i,j) \\in \\mathcal{A}\\) under the sum mean?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#problem-constraints",
    "href": "lectures/lecture-07-routing.html#problem-constraints",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Problem Constraints",
    "text": "Problem Constraints",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#constraints",
    "href": "lectures/lecture-07-routing.html#constraints",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Constraints?",
    "text": "Constraints?\nQuestion: What constraints do we need?\n. . .\n\nEach customer has to be visited once\nThe depot has to be entered and left \\(|\\mathcal{K}|\\) times\nWe have to enforce the capacity of our vehicles\nWe have to ensure the maximal duration of each tour\n\n. . .\n\n\n\n\n\n\nImportantSubtours\n\n\n\nIn addition, we have to prevent subtours!",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#section-3",
    "href": "lectures/lecture-07-routing.html#section-3",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "What is a\nsubtour?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#subtours-1",
    "href": "lectures/lecture-07-routing.html#subtours-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Subtours",
    "text": "Subtours",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#visit-each-customer-once",
    "href": "lectures/lecture-07-routing.html#visit-each-customer-once",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Visit Each Customer Once?",
    "text": "Visit Each Customer Once?\n\n\n\n\n\n\nImportantThe goal of these constraints is to:\n\n\n\nEnsure that each customer is visited exactly once. Essentially, we could also say that each node has to be entered and left exactly once.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following sets and variables:\n\n\n\n\n\\(\\mathcal{V}\\) - Set of all nodes, index \\(i \\in \\{0,1,2,...,n\\}\\)\n\\(X_{i,j}\\) - 1, if the arc between \\(i\\) and \\(j\\) is part of a tour, 0 otherwise",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#visit-each-customer-once-1",
    "href": "lectures/lecture-07-routing.html#visit-each-customer-once-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Visit Each Customer Once",
    "text": "Visit Each Customer Once\nQuestion: What could the constraint look like?\n. . .\n\\[\n\\sum_{i \\in \\mathcal{V}} X_{i,j} = 1 \\quad \\forall j \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n\\[\n\\sum_{j \\in \\mathcal{V}} X_{i,j} = 1 \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n. . .\nQuestion: Why for all nodes except the depot?\n. . .\nThe depot is the only node that is visited multiple times!",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#depot-entry-and-exit-constraints",
    "href": "lectures/lecture-07-routing.html#depot-entry-and-exit-constraints",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Depot Entry and Exit Constraints?",
    "text": "Depot Entry and Exit Constraints?\n\n\n\n\n\n\nImportantThe goal of these constraints is to:\n\n\n\nEnsure that each vehicle enters and leaves the depot exactly \\(|\\mathcal{K}|\\) times, as we have \\(|\\mathcal{K}|\\) vehicles and each vehicle has to return to the depot.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following sets and variables:\n\n\n\n\n\\(\\mathcal{V}\\) - Set of all nodes, index \\(i \\in \\{0,1,2,...,n\\}\\)\n\\(|\\mathcal{K}|\\) - Number of vehicles\n\\(X_{i,j}\\) - 1, if the arc between \\(i\\) and \\(j\\) is part of a tour, 0 otherwise\n\n\n\n. . .\nQuestion: What could the constraint look like?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#depot-entry-and-exit-constraints-1",
    "href": "lectures/lecture-07-routing.html#depot-entry-and-exit-constraints-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Depot Entry and Exit Constraints",
    "text": "Depot Entry and Exit Constraints\n\\[\n\\sum_{i \\in \\mathcal{V} \\setminus \\{0\\}} X_{i,0} = |\\mathcal{K}|\n\\]\n\\[\n\\sum_{j \\in \\mathcal{V} \\setminus \\{0\\}} X_{0,j} = |\\mathcal{K}|\n\\]\n. . .\n\n\n\n\n\n\nNoteAre all constraints necessary?\n\n\n\nNo, theoretically we could also say that we only have to leave or enter the depot exactly \\(|\\mathcal{K}|\\) times, as the other constraint is already enforced by the “visit each customer once constraint”.",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#section-4",
    "href": "lectures/lecture-07-routing.html#section-4",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "The next ones are\na little bit tricky.",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#mtz-formulation",
    "href": "lectures/lecture-07-routing.html#mtz-formulation",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "MTZ Formulation",
    "text": "MTZ Formulation\n\n\nMiller-Tucker-Zemlin (MTZ) Constraints\nFormulation by Kara, Laporte, and Bektas (2004)\nPrevent subtours and track routes and capacity utilization\nFirst, we need an additional variable!\n\\(U_{i}\\) - Capacity utilization at \\(i\\) of vehicle on its tour with \\(i \\in \\mathcal{I}\\)\n\n\n. . .\n\n\n\n\n\n\nYou don’t need to guess these constraints, as they are quite tricky!",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#mtz-constraints",
    "href": "lectures/lecture-07-routing.html#mtz-constraints",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "MTZ Constraints",
    "text": "MTZ Constraints\n\n\n\n\n\n\nNoteWe need the following sets, parameters, and variables:\n\n\n\n\n\\(\\mathcal{V}\\) - Set of all nodes, index \\(i \\in \\{0,1,2,...,n\\}\\)\n\\(X_{i,j}\\) - 1, if the arc between \\(i\\) and \\(j\\) is part of a tour, 0 otherwise\n\\(U_{i}\\) - Capacity utilization at \\(i\\) of vehicle on its tour with \\(i \\in \\mathcal{I}\\)\n\\(b\\) - Capacity per vehicle (all are identical!)\n\\(d_i\\) - Demand at node \\(i\\)\n\n\n\n. . .\n\\[\nU_i - U_j + b \\times X_{i,j} \\leq b - d_j \\quad \\forall i,j \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n. . .\n\\[\nd_i \\leq U_i \\leq b \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}\n\\]",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#section-5",
    "href": "lectures/lecture-07-routing.html#section-5",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Too\ncomplicated?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#dont-worry",
    "href": "lectures/lecture-07-routing.html#dont-worry",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Don’t worry!",
    "text": "Don’t worry!\n\n\n\n\n\nLet’s break it down!\n\\(d_i\\) for all customers is 1\nCapacity \\(b\\) per vehicle is 5\n\\(U_i\\) is the current capacity utilization at node \\(i \\in \\mathcal{I}\\)",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#no-connection-between-nodes",
    "href": "lectures/lecture-07-routing.html#no-connection-between-nodes",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "No connection between nodes",
    "text": "No connection between nodes\n\n\n\n\n\nIn case \\(X_{ij} = 0\\):\n\n\\(U_i - U_j \\leq b - d_j\\)\nNon-binding for relation between two nodes\n\nFollowing is perfectly fine:\n\n\\(U_i \\leq b\\) and \\(U_j \\geq d_j\\)",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#connection-between-two-nodes",
    "href": "lectures/lecture-07-routing.html#connection-between-two-nodes",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Connection between two nodes",
    "text": "Connection between two nodes\n\n\n\n\n\nIn case \\(X_{ij} = 1\\):\n\n\\[U_i - U_j + b \\leq b - d_j\\]\nBinding for relation between two nodes\n\nCan be summarized to:\n\n\\(U_j \\geq d_j + U_i\\)",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#connection-in-more-detail",
    "href": "lectures/lecture-07-routing.html#connection-in-more-detail",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Connection in more detail",
    "text": "Connection in more detail\nQuestion: Why is it binding?\n. . .\n\nBinding as \\(U_j\\) has to be at least as large as \\(d_i + U_i\\)\nHence, fullfiled if the demand of \\(i\\) is added to the vehicle\n\n. . .\nQuestion: Do you get the idea?\n. . .\n\nIf \\(X_{ij} = 1\\), then \\(U_j\\) has to be at least as large as \\(d_i + U_i\\)\nIf \\(X_{ij} = 0\\), then \\(U_i \\leq b\\) and \\(U_j \\geq d_j\\)",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#tour-from-the-depot",
    "href": "lectures/lecture-07-routing.html#tour-from-the-depot",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Tour from the Depot",
    "text": "Tour from the Depot\n\n\n\n\n\nTour of vehicle A ok\nDepot is the only node visited multiple times\nBut the constraints are not applied here!",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#tour-on-its-own",
    "href": "lectures/lecture-07-routing.html#tour-on-its-own",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Tour on its Own",
    "text": "Tour on its Own\n\n\n\n\n\nLet’s start at node \\(H\\)\nWe drive to node \\(C\\)\n\\(U_C\\) = 1",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#tour-on-its-own-ii",
    "href": "lectures/lecture-07-routing.html#tour-on-its-own-ii",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Tour on its Own II",
    "text": "Tour on its Own II\n\n\n\n\n\nWe continue to node \\(I\\)\n\\(U_I\\) = 2",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#tour-on-its-own-iii",
    "href": "lectures/lecture-07-routing.html#tour-on-its-own-iii",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Tour on its Own III",
    "text": "Tour on its Own III\n\n\n\n\n\nWe continue to node \\(H\\)\n\\(U_H\\) = 3\nConnection from \\(H\\) to \\(C\\)\n\\(U_H\\) is greater than \\(U_C\\)!\nInfeasible solution!",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#subtour-elimination",
    "href": "lectures/lecture-07-routing.html#subtour-elimination",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Subtour Elimination",
    "text": "Subtour Elimination\n\nConnection in the other direction wouldn’t work as well\nOnly depot as “reset” , as constraints are not applied here\n\nQuestion: What about the capacity?\n. . .\n\nRemember variable domain of \\(U_i\\)?\n\\(d_i \\leq U_i \\leq b\\) → Overall capacity limit enforced!",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#ensure-time-limit",
    "href": "lectures/lecture-07-routing.html#ensure-time-limit",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Ensure time limit?",
    "text": "Ensure time limit?\nQuestion: Anybody an idea?\n. . .\n\nConstraints basically follow the same idea!\nFirst, we again need an additional variable\n\\(T_{i}\\) - Time spent on tour at the node \\(i\\) of a vehicle with \\(i \\in \\mathcal{I}\\)",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#ensure-time-limit-1",
    "href": "lectures/lecture-07-routing.html#ensure-time-limit-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Ensure time limit",
    "text": "Ensure time limit\n\n\n\n\n\n\nNoteWe need the following sets and variables:\n\n\n\n\n\\(\\mathcal{V}\\) - Set of all nodes, index \\(i \\in \\{0,1,2,...,n\\}\\)\n\\(X_{i,j}\\) - 1, if the arc between \\(i\\) and \\(j\\) is part of a tour, 0 otherwise\n\\(T_{i}\\) - Time spent on tour at the node \\(i\\) of a vehicle with \\(i \\in \\mathcal{I}\\)\n\\(t\\) - Maximal duration of a tour\n\\(c_{i,j}\\) - Travel time on an arc from \\(i\\) to \\(j\\)\n\n\n\n. . .\n\\[\nT_i - T_j + t \\times X_{i,j} \\leq t - c_{i,j} \\quad \\forall i,j \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n. . .\n\\[\n0 \\leq T_{i} \\leq t \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}\n\\]",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#section-6",
    "href": "lectures/lecture-07-routing.html#section-6",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Any questions?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#objective-1",
    "href": "lectures/lecture-07-routing.html#objective-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Objective",
    "text": "Objective\n\\[\n\\text{minimize} \\quad \\sum_{(i,j) \\in \\mathcal{A}} c_{i,j} \\times X_{i,j}\n\\]\n\n\n\n\n\n\nImportantThe goal of the objective function is to:\n\n\n\nMinimize the total travel distance.",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#each-customer-is-visited-once",
    "href": "lectures/lecture-07-routing.html#each-customer-is-visited-once",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Each customer is visited once",
    "text": "Each customer is visited once\n\\[\n\\sum_{i \\in \\mathcal{V}} X_{i,j} = 1 \\quad \\forall j \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n\\[\n\\sum_{j \\in \\mathcal{V}} X_{i,j} = 1 \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n\n\n\n\n\n\nImportantOur constraints ensure:\n\n\n\nEach customer is visited exactly once.",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#depot-entry-and-exit",
    "href": "lectures/lecture-07-routing.html#depot-entry-and-exit",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Depot entry and exit",
    "text": "Depot entry and exit\n\\[\n\\sum_{i \\in \\mathcal{V} \\setminus \\{0\\}} X_{i,0} = |\\mathcal{K}|\n\\]\n\\[\n\\sum_{j \\in \\mathcal{V} \\setminus \\{0\\}} X_{0,j} = |\\mathcal{K}|\n\\]\n\n\n\n\n\n\nImportantOur constraints ensure:\n\n\n\nThe depot is visited by exactly \\(|\\mathcal{K}|\\) vehicles. Note, that we could remove one of the constraints and the solution would still be optimal.",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#capacity-and-subtour-elimination-1",
    "href": "lectures/lecture-07-routing.html#capacity-and-subtour-elimination-1",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Capacity and subtour elimination",
    "text": "Capacity and subtour elimination\n\\[\nU_i - U_j + b \\times X_{i,j} \\leq b - d_j \\quad \\forall i,j \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n\\[\nd_i \\leq U_i \\leq b \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}\n\\]\n\n\n\n\n\n\nImportantOur constraints ensure:\n\n\n\nThe capacity limit is respected and subtours are eliminated.",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#time-constraints",
    "href": "lectures/lecture-07-routing.html#time-constraints",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Time constraints",
    "text": "Time constraints\n\\[\nT_i - T_j + t \\times X_{i,j} \\leq t - c_{i,j} \\quad \\forall i,j \\in \\mathcal{V} \\setminus \\{0\\}, i \\neq j\n\\]\n\\[\n0 \\leq T_i \\leq t \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}\n\\]\n\n\n\n\n\n\nImportantOur constraints ensure:\n\n\n\nThe time limit is respected (and subtours are eliminated).",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#variables",
    "href": "lectures/lecture-07-routing.html#variables",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Variables",
    "text": "Variables\n\\[\nX_{i,j} \\in \\{0,1\\} \\quad \\forall i,j \\in \\mathcal{V}\n\\]\n\\[\nd_i \\leq U_i \\leq b \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}\n\\]\n\\[\n0 \\leq T_i \\leq t \\quad \\forall i \\in \\mathcal{V} \\setminus \\{0\\}\n\\]\n\n\n\n\n\n\nImportantThe variable domains make sure that:\n\n\n\nThe binary setup variable is either 0 or 1 and the new variables are below the time and capacity limit.",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#characteristics",
    "href": "lectures/lecture-07-routing.html#characteristics",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Characteristics",
    "text": "Characteristics\nQuestions: On model characteristics\n\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domains do we have?\nWhat do you think, can the model be solved quickly?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#model-assumptions",
    "href": "lectures/lecture-07-routing.html#model-assumptions",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\n\nWhat assumptions have we made?\nWhat are likely issues that can arise if the model is applied?\nHave we considered service times?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#extensions-of-the-cvrp",
    "href": "lectures/lecture-07-routing.html#extensions-of-the-cvrp",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Extensions of the CVRP",
    "text": "Extensions of the CVRP\nQuestions: What extensions do you know?\n. . .\n\ntime windows (TW)\nsoft time windows (STW)\nmultiple depots (MD)\nheterogeneous fleet (HF)\nbackhauls (B)\npickup and delivery (PD)",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#case-study-in-schleswig-holstein",
    "href": "lectures/lecture-07-routing.html#case-study-in-schleswig-holstein",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Case Study in Schleswig-Holstein",
    "text": "Case Study in Schleswig-Holstein\n. . .\n\n\n165 libraries\n119 visited biweekly\nUp to 9 different tours\nTime-Limit of 8 hours for each tour",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#section-7",
    "href": "lectures/lecture-07-routing.html#section-7",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Can our formulation\nsolve the problem\non a real-world instance?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#section-8",
    "href": "lectures/lecture-07-routing.html#section-8",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "No, although we can find\nsolutions within one hour,\nthe gap is still very large\nwith 40%-45%.",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#problem-is-np-hard",
    "href": "lectures/lecture-07-routing.html#problem-is-np-hard",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Problem is NP-hard",
    "text": "Problem is NP-hard\n\nWe have already seen that a problem can be NP-hard\nLikely, that there are no polynomial-time algorithms\nDoesn’t mean that it can’t be solved!\n\n. . .\n\n\n\n\n\n\nWe won’t go deeper into this, but feel free to ask me!",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#section-9",
    "href": "lectures/lecture-07-routing.html#section-9",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Can we do\nanything to solve\nthe model?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#heuristics",
    "href": "lectures/lecture-07-routing.html#heuristics",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Heuristics",
    "text": "Heuristics\n\nWe can still solve the problem with a heuristic\nLikely not the optimal solution, but a lot of research goes into efficient algorithms to solve these problems\nIn our case study we applied Hybrid Genetic Search for the CVRP (HGS-CVRP) by Vidal (2022)\n\n. . .\n\n\n\n\n\n\nFor problems with 100+ locations, heuristics are often the only practical choice.",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#applications-beyond-libraries",
    "href": "lectures/lecture-07-routing.html#applications-beyond-libraries",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Applications Beyond Libraries",
    "text": "Applications Beyond Libraries\n\n\nLogistics & Delivery\n\nPackage delivery\nFood delivery services\nGrocery delivery\nMail distribution\n\n\nService Industries\n\nMaintenance crews\nHome healthcare visits\nWaste collection\nSchool bus routing\n\n\n\n. . .\nQuestion: Can you think of other applications?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#conclusion",
    "href": "lectures/lecture-07-routing.html#conclusion",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Conclusion",
    "text": "Conclusion\n\nStandard problem that occurs in many different places\nSolving the problem with a mathematical model is difficult\nNowadays, there are many good heuristics\nMany companies are working on the problem\n\n. . .\n\n\n\n\n\n\nNoteAnd that’s it for todays lecture!\n\n\n\nWe now have covered the Capacitated Vehicle Routing Problem and are ready to start solving some tasks in the upcoming tutorial.",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#section-10",
    "href": "lectures/lecture-07-routing.html#section-10",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#literature-i",
    "href": "lectures/lecture-07-routing.html#literature-i",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-07-routing.html#footnotes",
    "href": "lectures/lecture-07-routing.html#footnotes",
    "title": "Lecture VII - Library Routing Optimization",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDue to regulations, the delivery tours cannot exceed a certain duration↩︎",
    "crumbs": [
      "07 Routing",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#case-study",
    "href": "lectures/lecture-05-presentation.html#case-study",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Case Study",
    "text": "Case Study\n\n\n\n\n\nLarge brewery\nBrews and sells beverages\nProduction planning by hand\nPlanner has a lot of experience\nBut will retire soon"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#challenges",
    "href": "lectures/lecture-05-presentation.html#challenges",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Challenges",
    "text": "Challenges\n\n\n\n\n\nStrong competition\nCustomer demand is changing\nCraft beer gains popularity\nVariety of drinks is increasing\nBatch sizes are getting smaller"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#different-costs",
    "href": "lectures/lecture-05-presentation.html#different-costs",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Different costs",
    "text": "Different costs\n\n\n\n\n\nPlant can fill multiple types\nTime depends on type and batch\nChanging type leads to set-up costs for preparation and cleaning\nUnsold beer bottles can be stored in a warehouse\nThis leads to inventory costs"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#section",
    "href": "lectures/lecture-05-presentation.html#section",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "",
    "text": "Where is the\nchallenge?"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#objective",
    "href": "lectures/lecture-05-presentation.html#objective",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Objective",
    "text": "Objective\n\n\n\n\nQuestion: What could be the objective?\nMinimize the combined setup and inventory holding cost while satisfying the demand and adhering to the production capacity."
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#trade-off",
    "href": "lectures/lecture-05-presentation.html#trade-off",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Trade-Off",
    "text": "Trade-Off\n\n\n\n\nQuestion: What is the trade-off?\nLarger batches require less setup cost per bottle, but increase the storage cost."
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#available-sets",
    "href": "lectures/lecture-05-presentation.html#available-sets",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Available Sets",
    "text": "Available Sets\nQuestion: What are sets again?\n\nSets are collections of objects.\n\n\nQuestion: What could be the sets here?\n\n\n\n\\(\\mathcal{I}\\) - Set of beer types indexed by \\(i \\in \\{1,2,...,|\\mathcal{I}|\\}\\)\n\\(\\mathcal{T}\\) - Set of time periods indexed by \\(t \\in \\{1,2,...,|\\mathcal{T}|\\}\\)"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#available-parameters",
    "href": "lectures/lecture-05-presentation.html#available-parameters",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Available Parameters",
    "text": "Available Parameters\nQuestion: What are possible parameters?\n\n\n\\(a_t\\) - Available time on the bottling plant in period \\(t\\in\\mathcal{T}\\)\n\\(b_i\\) - Time used for bottling one unit of beer type \\(i\\in\\mathcal{I}\\)\n\\(g_i\\) - Setup time for beer type \\(i\\in\\mathcal{I}\\)\n\\(f_i\\) - Setup cost of beer type \\(i\\in\\mathcal{I}\\)\n\\(c_i\\) - Inventory holding cost for one unit of beer type \\(i\\in\\mathcal{I}\\)\n\\(d_{i,t}\\) - Demand of beer type \\(i\\in\\mathcal{I}\\) in period \\(t\\in\\mathcal{T}\\)"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#decision-variables",
    "href": "lectures/lecture-05-presentation.html#decision-variables",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Decision Variables?",
    "text": "Decision Variables?\n\n\n\n\n\n\nWe have the following sets:\n\n\n\nBeer types indexed by \\(i \\in \\{1,2,...,|\\mathcal{I}|\\}\\)\nTime periods of the planning horizon indexed by \\(t \\in \\{1,2,...,|\\mathcal{T}|\\}\\)\n\n\n\n\n\n\n\n\n\n\n\nOur objective is to:\n\n\nMinimize the combined setup and inventory holding cost while satisfying the demand and adhering to the production capacity.\n\n\n\n\n\nQuestion: What could be our decision variable/s?"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#decision-variables-1",
    "href": "lectures/lecture-05-presentation.html#decision-variables-1",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Decision Variables",
    "text": "Decision Variables\n\n\\(W_{i,t}\\) - Inventory of type \\(i\\in\\mathcal{I}\\) at the end of \\(t\\in\\mathcal{T}\\)\n\\(Y_{i,t}\\) - 1, if type \\(i\\in\\mathcal{I}\\) is bottled in \\(t\\in\\mathcal{T}\\), 0 otherwise\n\\(X_{i,t}\\) - Batch size of type \\(i\\in\\mathcal{I}\\) in \\(t\\in\\mathcal{T}\\)"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#objective-function",
    "href": "lectures/lecture-05-presentation.html#objective-function",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Objective Function?",
    "text": "Objective Function?\n\n\n\n\n\n\nOur objective is to:\n\n\nMinimize the combined setup and inventory holding cost while satisfying the demand and adhering to the production capacity.\n\n\n\n\nQuestion: What could be our objective function?\n\n\n\n\n\n\n\n\nWe need the following variables:\n\n\n\n\\(W_{i,t}\\) - Inventory of type \\(i\\in\\mathcal{I}\\) at the end of \\(t\\in\\mathcal{T}\\)\n\\(Y_{i,t}\\) - 1, if type \\(i\\in\\mathcal{I}\\) is bottled in \\(t\\in\\mathcal{T}\\), 0 otherwise"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#objective-function-1",
    "href": "lectures/lecture-05-presentation.html#objective-function-1",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Objective Function",
    "text": "Objective Function\n\n\n\n\n\n\nWe need the following parameters:\n\n\n\n\\(f_i\\) - Setup cost of beer type \\(i\\in\\mathcal{I}\\)\n\\(c_i\\) - Inventory holding cost for one unit of beer type \\(i\\in\\mathcal{I}\\)\n\n\n\n\n\n\\[\\text{Minimize} \\quad \\sum_{i=1}^{\\mathcal{I}} \\sum_{t=1}^{\\mathcal{T}} (c_i \\times W_{i,t} + f_i \\times Y_{i,t})\\]"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#constraints",
    "href": "lectures/lecture-05-presentation.html#constraints",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Constraints",
    "text": "Constraints\n\n\n\n\nQuestion: What constraints?\n\n\nTransfer unused inventory\nFulfill the customer demand\nSet up beer types\nCalculate the batch size per set-up\nCompute remaining inventory\nLimit the bottling plant"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#demandinventory-constraints",
    "href": "lectures/lecture-05-presentation.html#demandinventory-constraints",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Demand/Inventory Constraints?",
    "text": "Demand/Inventory Constraints?\n\n\n\n\n\n\nThe goal of these constraints is to:\n\n\nConsider the current inventory and batch sizes and compute the remaining inventory.\n\n\n\n\n\n\n\n\n\n\nWe need the following variables and parameters:\n\n\n\n\\(W_{i,t}\\) - Inventory of beer type \\(i\\in\\mathcal{I}\\) at the end of period \\(t\\in\\mathcal{T}\\)\n\\(X_{i,t}\\) - Batch size of beer type \\(i\\in\\mathcal{I}\\) in \\(t\\in\\mathcal{T}\\)\n\\(d_{i,t}\\) - Demand of beer type \\(i\\in\\mathcal{I}\\) in period \\(t\\in\\mathcal{T}\\)\n\n\n\n\n\n\nQuestion: What could the constraint look like?"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#demandinventory-constraints-1",
    "href": "lectures/lecture-05-presentation.html#demandinventory-constraints-1",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Demand/Inventory Constraints",
    "text": "Demand/Inventory Constraints\n\\[W_{i,t-1} + X_{i,t} - W_{i,t} = d_{i,t} \\quad \\forall i\\in\\mathcal{I},t\\in\\mathcal{T}|t&gt;1\\]\n\n\n\n\n\n\n\nRemember, these are the variables and parameters:\n\n\n\n\\(W_{i,t}\\) - Inventory of beer type \\(i\\in\\mathcal{I}\\) at the end of period \\(t\\in\\mathcal{T}\\)\n\\(X_{i,t}\\) - Batch size of beer type \\(i\\in\\mathcal{I}\\) in \\(t\\in\\mathcal{T}\\)\n\\(d_{i,t}\\) - Demand of beer type \\(i\\in\\mathcal{I}\\) in period \\(t\\in\\mathcal{T}\\)\n\n\n\n\n\n\nQuestion: What does \\(|t&gt;1\\) mean?"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#setup-constraints",
    "href": "lectures/lecture-05-presentation.html#setup-constraints",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Setup Constraints?",
    "text": "Setup Constraints?\n\n\n\n\n\n\nThe goal of these constraints is to:\n\n\nSet up beer types where the batch size is \\(\\geq\\) 0.\n\n\n\n\n\n\n\n\n\n\nWe need the following variables and parameters:\n\n\n\n\\(Y_{i,t}\\) - 1, if beer type \\(i\\in\\mathcal{I}\\) is bottled in period \\(t\\in\\mathcal{T}\\), 0 otherwise\n\\(X_{i,t}\\) - Batch size of beer type \\(i\\in\\mathcal{I}\\) in \\(t\\in\\mathcal{T}\\)\n\\(d_{i,t}\\) - Demand of beer type \\(i\\in\\mathcal{I}\\) in period \\(t\\in\\mathcal{T}\\)\n\n\n\n\n\n\nQuestion: What could the second constraint be?"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#setup-constraints-1",
    "href": "lectures/lecture-05-presentation.html#setup-constraints-1",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Setup Constraints",
    "text": "Setup Constraints\n\\[X_{i,t} \\leq Y_{i,t} \\times \\sum_{\\tau=1}^{\\mathcal{T}} d_{i\\tau} \\quad \\forall i\\in\\mathcal{I},\\forall t\\in\\mathcal{T}\\]\n\nQuestion: Do you know this type of constraint?\n\n\nThis type of constraint is called a “Big-M” constraint!\n\n\n\nM (here \\(\\sum_{\\tau=1}^{\\mathcal{T}} d_{i\\tau}\\)) is a large number\nIt is coupled with a binary variable (here \\(Y_{i,t}\\))\nLike an if-then constraint"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#capacity-constraints",
    "href": "lectures/lecture-05-presentation.html#capacity-constraints",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Capacity Constraints?",
    "text": "Capacity Constraints?\n\n\n\n\n\n\nThe goal of these constraints is to:\n\n\nLimit the capacity of the bottling plant per period.\n\n\n\n\n\n\n\n\n\n\nWe need the following variables and parameters:\n\n\n\n\\(Y_{i,t}\\) - 1, if beer type \\(i\\in\\mathcal{I}\\) is bottled in period \\(t\\in\\mathcal{T}\\), 0 otherwise\n\\(X_{i,t}\\) - Batch size of beer type \\(i\\in\\mathcal{I}\\) in \\(t\\in\\mathcal{T}\\)\n\\(a_t\\) - Available time on the bottling plant in period \\(t\\in\\mathcal{T}\\)\n\\(b_i\\) - Time used for bottling one unit of beer type \\(i\\in\\mathcal{I}\\)\n\\(g_i\\) - Setup time for beer type \\(i\\in\\mathcal{I}\\)"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#capacity-constraints-1",
    "href": "lectures/lecture-05-presentation.html#capacity-constraints-1",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Capacity Constraints",
    "text": "Capacity Constraints\nQuestion: What could the third constraint be?\nIt has more variables and parameters when compared to the other constraints but it is easier to understand.\n\n\\[\\sum_{i=1}^{\\mathcal{I}} (b_i \\times X_{i,t} + g_i \\times Y_{i,t}) \\leq a_t \\quad \\forall t\\in\\mathcal{T}\\]\n\n\nAnd that’s basically it!"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#clsp-objective-function",
    "href": "lectures/lecture-05-presentation.html#clsp-objective-function",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "CLSP: Objective Function",
    "text": "CLSP: Objective Function\n\\[\\text{Minimize} \\quad \\sum_{i \\in \\mathcal{I}} \\sum_{t \\in \\mathcal{T}} (c_i \\times W_{i,t} + f_i \\times Y_{i,t})\\]\n\n\n\n\n\n\nThe goal of the objective function is to:\n\n\nMinimize the combined setup and inventory holding cost while satisfying the demand and adhering to the production capacity."
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#clsp-constraints",
    "href": "lectures/lecture-05-presentation.html#clsp-constraints",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "CLSP: Constraints",
    "text": "CLSP: Constraints\n\\[W_{i,t-1} + X_{i,t} - W_{i,t} = d_{i,t} \\quad \\forall i\\in\\mathcal{I},t\\in\\mathcal{T}|t&gt;1\\]\n\\[X_{i,t} \\leq Y_{i,t} \\times \\sum_{\\tau \\in \\mathcal{T}} d_{i,\\tau} \\quad \\forall i\\in\\mathcal{I},\\forall t\\in\\mathcal{T}\\]\n\\[\\sum_{i \\in \\mathcal{I}} (b_i \\times X_{i,t} + g_i \\times Y_{i,t}) \\leq a_t \\quad \\forall t\\in\\mathcal{T}\\]\n\n\n\n\n\n\nOur constraints ensure:\n\n\nDemand is met, inventory transferred, setup taken care of, and capacity respected."
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#clsp-variable-domains",
    "href": "lectures/lecture-05-presentation.html#clsp-variable-domains",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "CLSP: Variable Domains",
    "text": "CLSP: Variable Domains\n\\[Y_{i,t}\\in\\{0,1\\} \\quad \\forall i\\in\\mathcal{I},t\\in\\mathcal{T}\\]\n\\[W_{i,t}, X_{i,t}\\geq 0 \\quad \\forall i\\in\\mathcal{I},t\\in\\mathcal{T}\\]\n\n\n\n\n\n\nThe variable domains make sure that:\n\n\nThe binary setup variable is either 0 or 1 and that the inventory and batch size are non-negative."
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#recap-on-some-basics",
    "href": "lectures/lecture-05-presentation.html#recap-on-some-basics",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Recap on some Basics",
    "text": "Recap on some Basics\nThere exist several types of optimization problems:\n\nLinear (LP): Linear constraints and objective function\nMixed-integer (MIP): Linear constraints and objective function, but discrete variable domains\nQuadratic (QP): Quadratic constraints and/or objective\nNon-linear (NLP): Non-linear constraints and/or objective\nAnd more!"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#recap-on-solution-algorithms",
    "href": "lectures/lecture-05-presentation.html#recap-on-solution-algorithms",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Recap on Solution Algorithms",
    "text": "Recap on Solution Algorithms\n\nSimplex algorithm to solve LPs\nBranch & Bound to solve MIPs\nOuter-Approximation for mixed-integer NLPs\nMath-Heuristics (e.g., Fix-and-Optimize, Tabu-Search, …)\nDecomposition methods (Lagrange, Benders, …)\nHeuristics (greedy, construction method, n-opt, …)\nGraph theoretical methods (network flow, shortest path)"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#model-characteristics-1",
    "href": "lectures/lecture-05-presentation.html#model-characteristics-1",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Model Characteristics",
    "text": "Model Characteristics\nQuestions: On model characteristics\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domains do we have?\nWhat kind of solver could we use?\nCan the Big-M constraint be tightened?"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#model-assumptions",
    "href": "lectures/lecture-05-presentation.html#model-assumptions",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\nWhat assumptions have we made?\nWhat is the problem with the planning horizon?\nAny idea how to solve it?"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#section-1",
    "href": "lectures/lecture-05-presentation.html#section-1",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "",
    "text": "Can this be\napplied?"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#scale-as-a-problem",
    "href": "lectures/lecture-05-presentation.html#scale-as-a-problem",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Scale as a Problem",
    "text": "Scale as a Problem\nSolving the problem with commercial solvers is not feasible."
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#scale-of-the-case-study",
    "href": "lectures/lecture-05-presentation.html#scale-of-the-case-study",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Scale of the Case Study",
    "text": "Scale of the Case Study\n\n220 finished products\n100 semi-finished products\n13 production resources\n8 storage resources\n3 main production levels\n52 weeks planning horizon"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#section-2",
    "href": "lectures/lecture-05-presentation.html#section-2",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "",
    "text": "Any idea what\ncould be done?"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#heuristics-and-optimization",
    "href": "lectures/lecture-05-presentation.html#heuristics-and-optimization",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Heuristics and Optimization",
    "text": "Heuristics and Optimization\n\nMulti-level Capacitated Lot-Sizing Problem\nHeuristic fix and optimize approach 1\nOperating cost reduction by 5% and planning effort by 40%\n\n\n\n\n\n\n\n\nAnd that’s it for todays lecture!\n\n\nWe now have covered the basics of the CLSP and are ready to start solving some tasks in the upcoming tutorial.\n\n\n\n\nMickein, Koch, and Haase (2022)"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#section-3",
    "href": "lectures/lecture-05-presentation.html#section-3",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#literature-i",
    "href": "lectures/lecture-05-presentation.html#literature-i",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lecture-05-presentation.html#literature-ii",
    "href": "lectures/lecture-05-presentation.html#literature-ii",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Literature II",
    "text": "Literature II\n\n\n\n\nMickein, Markus, Matthes Koch, and Knut Haase. 2022. “A Decision Support System for Brewery Production Planning at Feldschlösschen.” INFORMS Journal on Applied Analytics 52 (2): 158–72."
  },
  {
    "objectID": "lectures/lecture-05-production.html",
    "href": "lectures/lecture-05-production.html",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "",
    "text": "Large brewery\nBrews and sells beverages\nProduction planning by hand\nPlanner has a lot of experience\nBut will retire soon\n\n\n\n\n\n\n\n\n\n\n\nStrong competition\nCustomer demand is changing\nCraft beer gains popularity\nVariety of drinks is increasing\nBatch sizes are getting smaller\n\n\n\n\n\n\n\n\n\n\n\nPlant can fill multiple types\nTime depends on type and batch\nChanging type leads to set-up costs for preparation and cleaning\nUnsold beer bottles can be stored in a warehouse\nThis leads to inventory costs\n\n\n\n\n\n\n\nWhere is the\nchallenge?",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#case-study",
    "href": "lectures/lecture-05-production.html#case-study",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "",
    "text": "Large brewery\nBrews and sells beverages\nProduction planning by hand\nPlanner has a lot of experience\nBut will retire soon",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#challenges",
    "href": "lectures/lecture-05-production.html#challenges",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "",
    "text": "Strong competition\nCustomer demand is changing\nCraft beer gains popularity\nVariety of drinks is increasing\nBatch sizes are getting smaller",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#different-costs",
    "href": "lectures/lecture-05-production.html#different-costs",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "",
    "text": "Plant can fill multiple types\nTime depends on type and batch\nChanging type leads to set-up costs for preparation and cleaning\nUnsold beer bottles can be stored in a warehouse\nThis leads to inventory costs",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#section",
    "href": "lectures/lecture-05-production.html#section",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "",
    "text": "Where is the\nchallenge?",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#objective",
    "href": "lectures/lecture-05-production.html#objective",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Objective",
    "text": "Objective\n\n\n\n\nQuestion: What could be the objective?\nMinimize the combined setup and inventory holding cost while satisfying the demand and adhering to the production capacity.",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#trade-off",
    "href": "lectures/lecture-05-production.html#trade-off",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Trade-Off",
    "text": "Trade-Off\n\n\n\n\nQuestion: What is the trade-off?\nLarger batches require less setup cost per bottle, but increase the storage cost.",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#available-sets",
    "href": "lectures/lecture-05-production.html#available-sets",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Available Sets",
    "text": "Available Sets\nQuestion: What are sets again?\n. . .\nSets are collections of objects.\n. . .\nQuestion: What could be the sets here?\n. . .\n\n\\(\\mathcal{I}\\) - Set of beer types indexed by \\(i \\in \\{1,2,...,|\\mathcal{I}|\\}\\)\n\\(\\mathcal{T}\\) - Set of time periods indexed by \\(t \\in \\{1,2,...,|\\mathcal{T}|\\}\\)",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#available-parameters",
    "href": "lectures/lecture-05-production.html#available-parameters",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Available Parameters",
    "text": "Available Parameters\nQuestion: What are possible parameters?\n. . .\n\n\\(a_t\\) - Available time on the bottling plant in period \\(t\\in\\mathcal{T}\\)\n\\(b_i\\) - Time used for bottling one unit of beer type \\(i\\in\\mathcal{I}\\)\n\\(g_i\\) - Setup time for beer type \\(i\\in\\mathcal{I}\\)\n\\(f_i\\) - Setup cost of beer type \\(i\\in\\mathcal{I}\\)\n\\(c_i\\) - Inventory holding cost for one unit of beer type \\(i\\in\\mathcal{I}\\)\n\\(d_{i,t}\\) - Demand of beer type \\(i\\in\\mathcal{I}\\) in period \\(t\\in\\mathcal{T}\\)",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#decision-variables",
    "href": "lectures/lecture-05-production.html#decision-variables",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Decision Variables?",
    "text": "Decision Variables?\n\n\n\n\n\n\nNoteWe have the following sets:\n\n\n\n\nBeer types indexed by \\(i \\in \\{1,2,...,|\\mathcal{I}|\\}\\)\nTime periods of the planning horizon indexed by \\(t \\in \\{1,2,...,|\\mathcal{T}|\\}\\)\n\n\n\n. . .\n\n\n\n\n\n\nImportantOur objective is to:\n\n\n\nMinimize the combined setup and inventory holding cost while satisfying the demand and adhering to the production capacity.\n\n\n. . .\nQuestion: What could be our decision variable/s?",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#decision-variables-1",
    "href": "lectures/lecture-05-production.html#decision-variables-1",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Decision Variables",
    "text": "Decision Variables\n\n\\(W_{i,t}\\) - Inventory of type \\(i\\in\\mathcal{I}\\) at the end of \\(t\\in\\mathcal{T}\\)\n\\(Y_{i,t}\\) - 1, if type \\(i\\in\\mathcal{I}\\) is bottled in \\(t\\in\\mathcal{T}\\), 0 otherwise\n\\(X_{i,t}\\) - Batch size of type \\(i\\in\\mathcal{I}\\) in \\(t\\in\\mathcal{T}\\)",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#objective-function",
    "href": "lectures/lecture-05-production.html#objective-function",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Objective Function?",
    "text": "Objective Function?\n\n\n\n\n\n\nImportantOur objective is to:\n\n\n\nMinimize the combined setup and inventory holding cost while satisfying the demand and adhering to the production capacity.\n\n\n. . .\nQuestion: What could be our objective function?\n. . .\n\n\n\n\n\n\nNoteWe need the following variables:\n\n\n\n\n\\(W_{i,t}\\) - Inventory of type \\(i\\in\\mathcal{I}\\) at the end of \\(t\\in\\mathcal{T}\\)\n\\(Y_{i,t}\\) - 1, if type \\(i\\in\\mathcal{I}\\) is bottled in \\(t\\in\\mathcal{T}\\), 0 otherwise",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#objective-function-1",
    "href": "lectures/lecture-05-production.html#objective-function-1",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Objective Function",
    "text": "Objective Function\n\n\n\n\n\n\nNoteWe need the following parameters:\n\n\n\n\n\\(f_i\\) - Setup cost of beer type \\(i\\in\\mathcal{I}\\)\n\\(c_i\\) - Inventory holding cost for one unit of beer type \\(i\\in\\mathcal{I}\\)\n\n\n\n. . .\n\\[\\text{Minimize} \\quad \\sum_{i=1}^{\\mathcal{I}} \\sum_{t=1}^{\\mathcal{T}} (c_i \\times W_{i,t} + f_i \\times Y_{i,t})\\]",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#constraints",
    "href": "lectures/lecture-05-production.html#constraints",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Constraints",
    "text": "Constraints\n\n\n\n\nQuestion: What constraints?\n\n\nTransfer unused inventory\nFulfill the customer demand\nSet up beer types\nCalculate the batch size per set-up\nCompute remaining inventory\nLimit the bottling plant",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#demandinventory-constraints",
    "href": "lectures/lecture-05-production.html#demandinventory-constraints",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Demand/Inventory Constraints?",
    "text": "Demand/Inventory Constraints?\n\n\n\n\n\n\nImportantThe goal of these constraints is to:\n\n\n\nConsider the current inventory and batch sizes and compute the remaining inventory.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following variables and parameters:\n\n\n\n\n\\(W_{i,t}\\) - Inventory of beer type \\(i\\in\\mathcal{I}\\) at the end of period \\(t\\in\\mathcal{T}\\)\n\\(X_{i,t}\\) - Batch size of beer type \\(i\\in\\mathcal{I}\\) in \\(t\\in\\mathcal{T}\\)\n\\(d_{i,t}\\) - Demand of beer type \\(i\\in\\mathcal{I}\\) in period \\(t\\in\\mathcal{T}\\)\n\n\n\n. . .\nQuestion: What could the constraint look like?",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#demandinventory-constraints-1",
    "href": "lectures/lecture-05-production.html#demandinventory-constraints-1",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Demand/Inventory Constraints",
    "text": "Demand/Inventory Constraints\n\\[W_{i,t-1} + X_{i,t} - W_{i,t} = d_{i,t} \\quad \\forall i\\in\\mathcal{I},t\\in\\mathcal{T}|t&gt;1\\]\n. . .\n\n\n\n\n\n\nNoteRemember, these are the variables and parameters:\n\n\n\n\n\\(W_{i,t}\\) - Inventory of beer type \\(i\\in\\mathcal{I}\\) at the end of period \\(t\\in\\mathcal{T}\\)\n\\(X_{i,t}\\) - Batch size of beer type \\(i\\in\\mathcal{I}\\) in \\(t\\in\\mathcal{T}\\)\n\\(d_{i,t}\\) - Demand of beer type \\(i\\in\\mathcal{I}\\) in period \\(t\\in\\mathcal{T}\\)\n\n\n\n. . .\nQuestion: What does \\(|t&gt;1\\) mean?",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#setup-constraints",
    "href": "lectures/lecture-05-production.html#setup-constraints",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Setup Constraints?",
    "text": "Setup Constraints?\n\n\n\n\n\n\nImportantThe goal of these constraints is to:\n\n\n\nSet up beer types where the batch size is \\(\\geq\\) 0.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following variables and parameters:\n\n\n\n\n\\(Y_{i,t}\\) - 1, if beer type \\(i\\in\\mathcal{I}\\) is bottled in period \\(t\\in\\mathcal{T}\\), 0 otherwise\n\\(X_{i,t}\\) - Batch size of beer type \\(i\\in\\mathcal{I}\\) in \\(t\\in\\mathcal{T}\\)\n\\(d_{i,t}\\) - Demand of beer type \\(i\\in\\mathcal{I}\\) in period \\(t\\in\\mathcal{T}\\)\n\n\n\n. . .\nQuestion: What could the second constraint be?",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#setup-constraints-1",
    "href": "lectures/lecture-05-production.html#setup-constraints-1",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Setup Constraints",
    "text": "Setup Constraints\n\\[X_{i,t} \\leq Y_{i,t} \\times \\sum_{\\tau=1}^{\\mathcal{T}} d_{i\\tau} \\quad \\forall i\\in\\mathcal{I},\\forall t\\in\\mathcal{T}\\]\n. . .\nQuestion: Do you know this type of constraint?\n. . .\nThis type of constraint is called a “Big-M” constraint!\n. . .\n\nM (here \\(\\sum_{\\tau=1}^{\\mathcal{T}} d_{i\\tau}\\)) is a large number\nIt is coupled with a binary variable (here \\(Y_{i,t}\\))\nLike an if-then constraint",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#capacity-constraints",
    "href": "lectures/lecture-05-production.html#capacity-constraints",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Capacity Constraints?",
    "text": "Capacity Constraints?\n\n\n\n\n\n\nImportantThe goal of these constraints is to:\n\n\n\nLimit the capacity of the bottling plant per period.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following variables and parameters:\n\n\n\n\n\\(Y_{i,t}\\) - 1, if beer type \\(i\\in\\mathcal{I}\\) is bottled in period \\(t\\in\\mathcal{T}\\), 0 otherwise\n\\(X_{i,t}\\) - Batch size of beer type \\(i\\in\\mathcal{I}\\) in \\(t\\in\\mathcal{T}\\)\n\\(a_t\\) - Available time on the bottling plant in period \\(t\\in\\mathcal{T}\\)\n\\(b_i\\) - Time used for bottling one unit of beer type \\(i\\in\\mathcal{I}\\)\n\\(g_i\\) - Setup time for beer type \\(i\\in\\mathcal{I}\\)",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#capacity-constraints-1",
    "href": "lectures/lecture-05-production.html#capacity-constraints-1",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Capacity Constraints",
    "text": "Capacity Constraints\nQuestion: What could the third constraint be?\nIt has more variables and parameters when compared to the other constraints but it is easier to understand.\n. . .\n\\[\\sum_{i=1}^{\\mathcal{I}} (b_i \\times X_{i,t} + g_i \\times Y_{i,t}) \\leq a_t \\quad \\forall t\\in\\mathcal{T}\\]\n. . .\nAnd that’s basically it!",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#clsp-objective-function",
    "href": "lectures/lecture-05-production.html#clsp-objective-function",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "CLSP: Objective Function",
    "text": "CLSP: Objective Function\n\\[\\text{Minimize} \\quad \\sum_{i \\in \\mathcal{I}} \\sum_{t \\in \\mathcal{T}} (c_i \\times W_{i,t} + f_i \\times Y_{i,t})\\]\n\n\n\n\n\n\nImportantThe goal of the objective function is to:\n\n\n\nMinimize the combined setup and inventory holding cost while satisfying the demand and adhering to the production capacity.",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#clsp-constraints",
    "href": "lectures/lecture-05-production.html#clsp-constraints",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "CLSP: Constraints",
    "text": "CLSP: Constraints\n\\[W_{i,t-1} + X_{i,t} - W_{i,t} = d_{i,t} \\quad \\forall i\\in\\mathcal{I},t\\in\\mathcal{T}|t&gt;1\\]\n\\[X_{i,t} \\leq Y_{i,t} \\times \\sum_{\\tau \\in \\mathcal{T}} d_{i,\\tau} \\quad \\forall i\\in\\mathcal{I},\\forall t\\in\\mathcal{T}\\]\n\\[\\sum_{i \\in \\mathcal{I}} (b_i \\times X_{i,t} + g_i \\times Y_{i,t}) \\leq a_t \\quad \\forall t\\in\\mathcal{T}\\]\n\n\n\n\n\n\nImportantOur constraints ensure:\n\n\n\nDemand is met, inventory transferred, setup taken care of, and capacity respected.",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#clsp-variable-domains",
    "href": "lectures/lecture-05-production.html#clsp-variable-domains",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "CLSP: Variable Domains",
    "text": "CLSP: Variable Domains\n\\[Y_{i,t}\\in\\{0,1\\} \\quad \\forall i\\in\\mathcal{I},t\\in\\mathcal{T}\\]\n\\[W_{i,t}, X_{i,t}\\geq 0 \\quad \\forall i\\in\\mathcal{I},t\\in\\mathcal{T}\\]\n\n\n\n\n\n\nImportantThe variable domains make sure that:\n\n\n\nThe binary setup variable is either 0 or 1 and that the inventory and batch size are non-negative.",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#recap-on-some-basics",
    "href": "lectures/lecture-05-production.html#recap-on-some-basics",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Recap on some Basics",
    "text": "Recap on some Basics\nThere exist several types of optimization problems:\n\n\nLinear (LP): Linear constraints and objective function\nMixed-integer (MIP): Linear constraints and objective function, but discrete variable domains\nQuadratic (QP): Quadratic constraints and/or objective\nNon-linear (NLP): Non-linear constraints and/or objective\nAnd more!",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#recap-on-solution-algorithms",
    "href": "lectures/lecture-05-production.html#recap-on-solution-algorithms",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Recap on Solution Algorithms",
    "text": "Recap on Solution Algorithms\n\n\nSimplex algorithm to solve LPs\nBranch & Bound to solve MIPs\nOuter-Approximation for mixed-integer NLPs\nMath-Heuristics (e.g., Fix-and-Optimize, Tabu-Search, …)\nDecomposition methods (Lagrange, Benders, …)\nHeuristics (greedy, construction method, n-opt, …)\nGraph theoretical methods (network flow, shortest path)",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#model-characteristics-1",
    "href": "lectures/lecture-05-production.html#model-characteristics-1",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Model Characteristics",
    "text": "Model Characteristics\nQuestions: On model characteristics\n\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domains do we have?\nWhat kind of solver could we use?\nCan the Big-M constraint be tightened?",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#model-assumptions",
    "href": "lectures/lecture-05-production.html#model-assumptions",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\n\nWhat assumptions have we made?\nWhat is the problem with the planning horizon?\nAny idea how to solve it?",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#section-1",
    "href": "lectures/lecture-05-production.html#section-1",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "",
    "text": "Can this be\napplied?",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#scale-as-a-problem",
    "href": "lectures/lecture-05-production.html#scale-as-a-problem",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Scale as a Problem",
    "text": "Scale as a Problem\nSolving the problem with commercial solvers is not feasible.",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#scale-of-the-case-study",
    "href": "lectures/lecture-05-production.html#scale-of-the-case-study",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Scale of the Case Study",
    "text": "Scale of the Case Study\n\n220 finished products\n100 semi-finished products\n13 production resources\n8 storage resources\n3 main production levels\n52 weeks planning horizon",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#section-2",
    "href": "lectures/lecture-05-production.html#section-2",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "",
    "text": "Any idea what\ncould be done?",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#heuristics-and-optimization",
    "href": "lectures/lecture-05-production.html#heuristics-and-optimization",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Heuristics and Optimization",
    "text": "Heuristics and Optimization\n\nMulti-level Capacitated Lot-Sizing Problem\nHeuristic fix and optimize approach 1\nOperating cost reduction by 5% and planning effort by 40%\n\n. . .\n\n\n\n\n\n\nNoteAnd that’s it for todays lecture!\n\n\n\nWe now have covered the basics of the CLSP and are ready to start solving some tasks in the upcoming tutorial.",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#section-3",
    "href": "lectures/lecture-05-production.html#section-3",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#literature-i",
    "href": "lectures/lecture-05-production.html#literature-i",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-05-production.html#footnotes",
    "href": "lectures/lecture-05-production.html#footnotes",
    "title": "Lecture V - Production Planning in Breweries",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nMickein, Koch, and Haase (2022)↩︎",
    "crumbs": [
      "05 Production",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-03-presentation.html#variables-and-data-types",
    "href": "lectures/lecture-03-presentation.html#variables-and-data-types",
    "title": "Lecture III - Packages and Data Management",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\n\nVariables are used to store values\nAssign a value to a variable using the = operator\nYou can use different data types for variables\nYou can change the value of a variable\n\n\n\n\n\n\n\n\nYou can use the typeof function to check the type of a variable."
  },
  {
    "objectID": "lectures/lecture-03-presentation.html#vectors-and-matrices",
    "href": "lectures/lecture-03-presentation.html#vectors-and-matrices",
    "title": "Lecture III - Packages and Data Management",
    "section": "Vectors and Matrices",
    "text": "Vectors and Matrices\n\nVectors and matrices are used to store multiple values\nYou can create a them using the [ and ] operators\nAccess their elements using square brackets\n\n\n\n\n\n\n\n\nYou can use the push! function to add elements to a vector or the pop! function to remove elements from a vector."
  },
  {
    "objectID": "lectures/lecture-03-presentation.html#comparisons-and-logic",
    "href": "lectures/lecture-03-presentation.html#comparisons-and-logic",
    "title": "Lecture III - Packages and Data Management",
    "section": "Comparisons and Logic",
    "text": "Comparisons and Logic\n\nComparisons are used to compare values\n== checks if two values are equal\n!= checks if two values are not equal\n&lt; checks if one value is smaller than the other\n&gt;= checks if one value is greater than or equal to the other\n&& checks if two values are true\n|| checks if at least one of two values is true"
  },
  {
    "objectID": "lectures/lecture-03-presentation.html#loops",
    "href": "lectures/lecture-03-presentation.html#loops",
    "title": "Lecture III - Packages and Data Management",
    "section": "Loops",
    "text": "Loops\n\nLoops are used to repeat code\nfor loop repeats code for a fixed number of times\nwhile loop repeats code until a condition is met\nif statement checks if a condition is true\nelse executes code if a condition is false\nelseif checks if a condition is true and executes if it is"
  },
  {
    "objectID": "lectures/lecture-03-presentation.html#scope",
    "href": "lectures/lecture-03-presentation.html#scope",
    "title": "Lecture III - Packages and Data Management",
    "section": "Scope",
    "text": "Scope\n\nScope determines where a variable is defined and lives\nglobal keyword defines a global variable\nlocal keyword defines a local variable\nlet keyword defines a local variable\n\n\n\n\n\n\n\n\nGlobal variables usually make your code much slower, if they are not defined as constants. But for this leeture this is not that important."
  },
  {
    "objectID": "lectures/lecture-03-presentation.html#solutions-from-last-week",
    "href": "lectures/lecture-03-presentation.html#solutions-from-last-week",
    "title": "Lecture III - Packages and Data Management",
    "section": "Solutions from last Week",
    "text": "Solutions from last Week\n\nThe tutorials from last week will be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n\n\n\n\n\n\n\nYou can ask questions anytime in class or via email!"
  },
  {
    "objectID": "lectures/lecture-03-presentation.html#topics-of-the-tutorials",
    "href": "lectures/lecture-03-presentation.html#topics-of-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nFunctions: Learn how to define and use functions\nPackages: Learn how to install and use packages\nDataFrames: Learn how to work with tabular data in Julia\nIO: Learn how to read and write data in Julia\nPlots: Learn how to create plots in Julia"
  },
  {
    "objectID": "lectures/lecture-03-presentation.html#get-started-with-the-tutorials",
    "href": "lectures/lecture-03-presentation.html#get-started-with-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload this weeks tutorials and start with the first one\nRemember, you can ask questions anytime!\n\n\n\n\n\n\n\n\nAnd that’s it for this lecture!\n\n\nThe remaining time we will already start working on the problems of the third lecture."
  },
  {
    "objectID": "lectures/lecture-03-presentation.html#literature-1",
    "href": "lectures/lecture-03-presentation.html#literature-1",
    "title": "Lecture III - Packages and Data Management",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lecture-03-packages.html",
    "href": "lectures/lecture-03-packages.html",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Variables are used to store values\nAssign a value to a variable using the = operator\nYou can use different data types for variables\nYou can change the value of a variable\n\n. . .\n\n\n\n\n\n\nYou can use the typeof function to check the type of a variable.\n\n\n\n\n\n\n\nVectors and matrices are used to store multiple values\nYou can create a them using the [ and ] operators\nAccess their elements using square brackets\n\n. . .\n\n\n\n\n\n\nYou can use the push! function to add elements to a vector or the pop! function to remove elements from a vector.\n\n\n\n\n\n\n\nComparisons are used to compare values\n== checks if two values are equal\n!= checks if two values are not equal\n&lt; checks if one value is smaller than the other\n&gt;= checks if one value is greater than or equal to the other\n&& checks if two values are true\n|| checks if at least one of two values is true\n\n\n\n\n\nLoops are used to repeat code\nfor loop repeats code for a fixed number of times\nwhile loop repeats code until a condition is met\nif statement checks if a condition is true\nelse executes code if a condition is false\nelseif checks if a condition is true and executes if it is\n\n\n\n\n\nScope determines where a variable is defined and lives\nglobal keyword defines a global variable\nlocal keyword defines a local variable\nlet keyword defines a local variable\n\n. . .\n\n\n\n\n\n\nGlobal variables usually make your code much slower, if they are not defined as constants. But for this leeture this is not that important.\n\n\n\n\n\n\n\nThe tutorials from last week will be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-03-packages.html#variables-and-data-types",
    "href": "lectures/lecture-03-packages.html#variables-and-data-types",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Variables are used to store values\nAssign a value to a variable using the = operator\nYou can use different data types for variables\nYou can change the value of a variable\n\n. . .\n\n\n\n\n\n\nYou can use the typeof function to check the type of a variable.",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-03-packages.html#vectors-and-matrices",
    "href": "lectures/lecture-03-packages.html#vectors-and-matrices",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Vectors and matrices are used to store multiple values\nYou can create a them using the [ and ] operators\nAccess their elements using square brackets\n\n. . .\n\n\n\n\n\n\nYou can use the push! function to add elements to a vector or the pop! function to remove elements from a vector.",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-03-packages.html#comparisons-and-logic",
    "href": "lectures/lecture-03-packages.html#comparisons-and-logic",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Comparisons are used to compare values\n== checks if two values are equal\n!= checks if two values are not equal\n&lt; checks if one value is smaller than the other\n&gt;= checks if one value is greater than or equal to the other\n&& checks if two values are true\n|| checks if at least one of two values is true",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-03-packages.html#loops",
    "href": "lectures/lecture-03-packages.html#loops",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Loops are used to repeat code\nfor loop repeats code for a fixed number of times\nwhile loop repeats code until a condition is met\nif statement checks if a condition is true\nelse executes code if a condition is false\nelseif checks if a condition is true and executes if it is",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-03-packages.html#scope",
    "href": "lectures/lecture-03-packages.html#scope",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Scope determines where a variable is defined and lives\nglobal keyword defines a global variable\nlocal keyword defines a local variable\nlet keyword defines a local variable\n\n. . .\n\n\n\n\n\n\nGlobal variables usually make your code much slower, if they are not defined as constants. But for this leeture this is not that important.",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-03-packages.html#solutions-from-last-week",
    "href": "lectures/lecture-03-packages.html#solutions-from-last-week",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "The tutorials from last week will be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-03-packages.html#topics-of-the-tutorials",
    "href": "lectures/lecture-03-packages.html#topics-of-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nFunctions: Learn how to define and use functions\nPackages: Learn how to install and use packages\nDataFrames: Learn how to work with tabular data in Julia\nIO: Learn how to read and write data in Julia\nPlots: Learn how to create plots in Julia",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-03-packages.html#get-started-with-the-tutorials",
    "href": "lectures/lecture-03-packages.html#get-started-with-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload this weeks tutorials and start with the first one\nRemember, you can ask questions anytime!\n\n. . .\n\n\n\n\n\n\nNoteAnd that’s it for this lecture!\n\n\n\nThe remaining time we will already start working on the problems of the third lecture.",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-03-packages.html#literature-1",
    "href": "lectures/lecture-03-packages.html#literature-1",
    "title": "Lecture III - Packages and Data Management",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#about-me",
    "href": "lectures/lecture-01-presentation.html#about-me",
    "title": "Lecture I - Welcome and Introduction",
    "section": "About me",
    "text": "About me\n\nField: Optimizing and simulating complex systems\nLanguages of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: tobias.vlcek@uni-hamburg.de\n\n\n\n\n\n\n\n\nI really appreciate active participation and interaction!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#lectures",
    "href": "lectures/lecture-01-presentation.html#lectures",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Lectures",
    "text": "Lectures\n\nEvery Tuesday between 10.15 AM and 11.45 AM\nFirst four lectures repeat modelling and programming\nLater lectures discuss practical problems and implementation\nLectures are interactive → We discuss approaches!\nCommunication takes place via OpenOlat and E-Mail"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#tutorials",
    "href": "lectures/lecture-01-presentation.html#tutorials",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Tutorials",
    "text": "Tutorials\n\nTutorials every Friday between 8.15 AM and 9.45 AM\nIn these tutorials we are working on assignments\nPlease bring a laptop with Windows, macOS, or Linux!\nThis Friday there is no tutorial!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#assignments",
    "href": "lectures/lecture-01-presentation.html#assignments",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Assignments",
    "text": "Assignments\n\nBased on applied problems of the lecture\nUp to 3 students can solve assignments together\nSubmitted solutions earn bonus points for the exam\nMax. 0.5 point per tutorial\n\n\n\n\n\n\n\n\nBonus points only count if the mark is at least 4.0!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#applied-optimization",
    "href": "lectures/lecture-01-presentation.html#applied-optimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Applied Optimization",
    "text": "Applied Optimization\n\nReal-world problems can be addressed with models\nOur objective is to foster your interest in the topic\nEnable you to recognize and solve problem structures\nIncludes problem understanding and implementation"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#research-in-operations-research",
    "href": "lectures/lecture-01-presentation.html#research-in-operations-research",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Research in Operations Research",
    "text": "Research in Operations Research\n\nPart of the University of Hamburg Business School\nAiming to solve real-world problems\nOr improving our theoretical understanding\nPublication in journals and conferences\n\n\n\n\n\n\n\n\nWe are also happy to supervise Bachelor and Master theses!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#national-and-international-journals",
    "href": "lectures/lecture-01-presentation.html#national-and-international-journals",
    "title": "Lecture I - Welcome and Introduction",
    "section": "National and international journals",
    "text": "National and international journals\n\nEuropean Journal of OR\nJournal of the Operational Research Society\nJournal on Applied Analytics\nManagement Science\nOperations Research\nOR Spectrum"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#brewery-production-planning",
    "href": "lectures/lecture-01-presentation.html#brewery-production-planning",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Brewery Production Planning",
    "text": "Brewery Production Planning\n\nMickein, Koch, and Haase (2022)"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#police-service-district-planning",
    "href": "lectures/lecture-01-presentation.html#police-service-district-planning",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Police Service District Planning",
    "text": "Police Service District Planning\n\nVlćek, Haase, Fliedner, et al. (2024)"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#venue-seating-under-covid-19",
    "href": "lectures/lecture-01-presentation.html#venue-seating-under-covid-19",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Venue Seating under COVID-19",
    "text": "Venue Seating under COVID-19\n\nUsama Dkaidik and Matthes Koch; Current research with a likely paper submission in 2024"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#metro-inflow-management",
    "href": "lectures/lecture-01-presentation.html#metro-inflow-management",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Metro Inflow Management",
    "text": "Metro Inflow Management\n\nVlćek, Haase, Koch, et al. (2024)"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#split-order-minimization",
    "href": "lectures/lecture-01-presentation.html#split-order-minimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Split-Order Minimization",
    "text": "Split-Order Minimization\n\nVlćek and Voigt (2024)"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#crowd-management",
    "href": "lectures/lecture-01-presentation.html#crowd-management",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Crowd Management",
    "text": "Crowd Management\n\nHaase et al. (2016)"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#part-i",
    "href": "lectures/lecture-01-presentation.html#part-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part I",
    "text": "Part I\n\nWelcome and Introduction\nFirst Steps in Julia\nPackages and Data Management\nModelling with JuMP"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#part-ii",
    "href": "lectures/lecture-01-presentation.html#part-ii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part II",
    "text": "Part II\n\nBeer Production Planning\nMinimizing Split Orders in E-Commerce\nPeriodic Library Routing\nPolice Districting"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#part-iii",
    "href": "lectures/lecture-01-presentation.html#part-iii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part III",
    "text": "Part III\n\nSafety Planning for the Islamic Pilgrimage in Mecca\nIntermission\nArena Seat Planning under Distancing Rules\nPassenger Flow Control in Urban Rail\nRecap and Discussion\n????"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#choice-of-programming-language",
    "href": "lectures/lecture-01-presentation.html#choice-of-programming-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Choice of Programming Language",
    "text": "Choice of Programming Language\n\n\nQuestion: Have you ever heard of Julia?"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#why-julia",
    "href": "lectures/lecture-01-presentation.html#why-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Why Julia?",
    "text": "Why Julia?\n\nDesigned to be:\n\nas general as Python\nas statistics-friendly as R\nas fast as C++!\n\n\n\n\n\n\n\n\n\nAllows for fast data workflows, particularly in scientific computing!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#syntax",
    "href": "lectures/lecture-01-presentation.html#syntax",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Syntax",
    "text": "Syntax\n\nDynamically-typed syntax just like Python\nSimilar to R, Matlab and Python - not like C++\nIn comparison, accessible and easy to learn!\nNo need to worry about memory management!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#jump",
    "href": "lectures/lecture-01-presentation.html#jump",
    "title": "Lecture I - Welcome and Introduction",
    "section": "JuMP",
    "text": "JuMP\n\nPackage for algebraic modeling in Julia\nSimplifies solving complex optimization problems\nProvides a high-level, user-friendly interface\nUseful for operations research and data science\n\n\n\n\n\n\n\n\nJuMP is an alternative to Pyomo, GAMS, and AMPL!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#must-it-be-a-new-language",
    "href": "lectures/lecture-01-presentation.html#must-it-be-a-new-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Must it be a new language?",
    "text": "Must it be a new language?\n\nYes, but no need to worry!\nJulia is quite similar to Python and R\nWe will learn the syntax together in the first part\nIt is helpful to switch languages from time to time"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#section",
    "href": "lectures/lecture-01-presentation.html#section",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nexperience with\nalgebraic modeling?"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#what-is-algebraic-modeling",
    "href": "lectures/lecture-01-presentation.html#what-is-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is algebraic modeling?",
    "text": "What is algebraic modeling?\n\nA “mathematical language” for optimization problems\nAllows for describing complex systems and constraints\nBased on linear algebra (Equations and Inequalities)"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#how-to-learn-algebraic-modeling",
    "href": "lectures/lecture-01-presentation.html#how-to-learn-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to learn algebraic modeling?",
    "text": "How to learn algebraic modeling?\n\nPractice, practice, and practice!\nUnderstand standard models and their approach\nDevelop an understanding of constraints\nUnderstand the structure of a models solution space\nUse an available algorithms to determine solutions"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#central-questions",
    "href": "lectures/lecture-01-presentation.html#central-questions",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Central Questions",
    "text": "Central Questions\n\nWhat is to be decided?\nWhat is relevant to the decision?\nWhat information is given and relevant?\nWhat parameters (data) are needed?\nWhich variables and of which type are needed?\n\n\n\n\n\n\n\n\nModeling is a creative process!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#model-components",
    "href": "lectures/lecture-01-presentation.html#model-components",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Model Components",
    "text": "Model Components\n\nObjective function\nConstraints\nVariables\n\n\n\n\n\n\n\n\nWe will go through these components step by step in each lecture!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#linear-optimization-model",
    "href": "lectures/lecture-01-presentation.html#linear-optimization-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Linear Optimization Model",
    "text": "Linear Optimization Model\n\n\nBasic Model Formulation\n\\[\n\\begin{aligned}\n&\\text{maximize} \\quad F = \\sum_{j\\in \\mathcal{J}} c_j \\times X_j\n\\end{aligned}\n\\]\nsubject to\n\\[\n\\begin{aligned}\n&\\sum_{j\\in \\mathcal{J}} a_{i,j} \\times X_j  \\le b_i && \\forall i \\in \\mathcal{I} \\\\\n&X_j \\ge 0 &&  \\forall  j \\in \\mathcal{J}\n\\end{aligned}\n\\]\n\nModel Components\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{set of $i \\in \\mathcal{I}$,}\\\\\n\\mathcal{J} &: \\text{set of $j \\in \\mathcal{J}$,}\\\\\nF   &: \\text{Objective function variable,}\\\\\nX_{j}   &: \\text{decision variables,}\\\\\nc_{j}   &: \\text{objective function coefficients,}\\\\\na_{i,j} &: \\text{parameters,}\\\\\nb_{i}   &: \\text{parameters}\n\\end{aligned}\n\\]\n\n\nQuestion: Have you ever seen something like this before?"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#what-is-this-good-for",
    "href": "lectures/lecture-01-presentation.html#what-is-this-good-for",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is this good for?",
    "text": "What is this good for?\n\nGood Question! A lot of things:\n\nModeling real-world problems\nSolving complex systems\nOptimizing resource allocation\nDecision-making under constraints\nSimulation and prediction"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#from-abstract-to-concrete",
    "href": "lectures/lecture-01-presentation.html#from-abstract-to-concrete",
    "title": "Lecture I - Welcome and Introduction",
    "section": "From Abstract to Concrete",
    "text": "From Abstract to Concrete\nWe’ve just seen the general structure:\n\nSets (\\(\\mathcal{I}\\), \\(\\mathcal{J}\\))\nParameters (\\(c_j\\), \\(a_{i,j}\\), \\(b_i\\))\nDecision variables (\\(X_j\\))\nObjective function and constraints\n\n\nNow let’s see how this works with a real problem!\n\n\n\n\n\n\n\n\nWatch for these components as we build our first model together."
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#case-solar-panel-transport",
    "href": "lectures/lecture-01-presentation.html#case-solar-panel-transport",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Case: Solar Panel Transport",
    "text": "Case: Solar Panel Transport"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#description",
    "href": "lectures/lecture-01-presentation.html#description",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nA company is producing solar panels in Dresden and Laupheim and has to transport them to new solar farms near Hamburg, Munich, and Berlin. The quantities offered and demanded (truckloads) and the transport costs per truckload in Euro are summarized in the following table."
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#transport-costs",
    "href": "lectures/lecture-01-presentation.html#transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Costs",
    "text": "Transport Costs\n\n\n\nOrigin/Destination\nHamburg\nMunich\nBerlin\nAvailable\n\n\n\n\nDresden\n5010\n4640\n1980\n34\n\n\nLaupheim\n7120\n1710\n6430\n41\n\n\nDemand\n21\n17\n29\n\n\n\n\nExample: A truckload from Dresden \\(i=1\\) to Munich \\(j=2\\) costs \\(c_{12}=4640\\) Euro. Moreover, it is necessary to fulfil all customer demands, as the contract has been signed."
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#graphical-illustration",
    "href": "lectures/lecture-01-presentation.html#graphical-illustration",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Graphical Illustration",
    "text": "Graphical Illustration"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#what-are-we-trying",
    "href": "lectures/lecture-01-presentation.html#what-are-we-trying",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What are we trying?",
    "text": "What are we trying?\nFirst, we always need to understand the objectives.\n\nQuestion: What are our possible objectives?\nMinimizing the transport costs over all truckloads while meeting the demand based on the available solar panels adhering to the available panels."
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#section-1",
    "href": "lectures/lecture-01-presentation.html#section-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Let’s break it down\nstep by step!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#sets",
    "href": "lectures/lecture-01-presentation.html#sets",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Sets",
    "text": "Sets\nRemember, sets are collections of elements\n\nQuestion: What sets are needed?\n\n\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{Set of production sites, indexed by } i \\text{ with } i \\in \\{1, \\ldots, |\\mathcal{I}|\\}, \\\\\n\\mathcal{J} &: \\text{Set of customers, indexed by } j \\text{ with } j \\in \\{1, \\ldots, |\\mathcal{J}|\\}.\n\\end{aligned}\n\\]\n\n\n\n\n\n\n\n\nWe often use plural names for sets and a caligraphic letter, e.g., \\(\\mathcal{I}\\) and \\(\\mathcal{J}\\)."
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#parameters",
    "href": "lectures/lecture-01-presentation.html#parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Parameters",
    "text": "Parameters\nParameters are fixed values that are given.\n\nQuestion: What parameters are needed?\n\n\n\\[\n\\begin{aligned}\nc_{i,j} &: \\text{Costs per truck load for transport from } i \\text{ to } j, \\\\\na_i &: \\text{Available truck loads at } i, \\\\\nb_j &: \\text{Customer demands at } j.\n\\end{aligned}\n\\]\n\n\n\n\n\n\n\n\nWe usually use the corresponding lower-case letter, e.g., \\(c\\), \\(a\\), and \\(b\\)."
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#decision-variable",
    "href": "lectures/lecture-01-presentation.html#decision-variable",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Decision Variable",
    "text": "Decision Variable\n\nDecision variables are the values we are trying to find\nHere, our objective is to minimize the transport costs\n\n\nQuestion: What decision variables are needed?\n\n\n\\[\nX_{i,j} \\text{Trucks that deliver panels from site } i \\text{ to customer } j.\n\\]\n\n\n\n\n\n\n\n\nWe use upper-case letters to distinguish variables from parameters, e.g., \\(X\\)."
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#section-2",
    "href": "lectures/lecture-01-presentation.html#section-2",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "These are our\nbuilding blocks!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#objective-function",
    "href": "lectures/lecture-01-presentation.html#objective-function",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Objective Function",
    "text": "Objective Function\n\nThe objective function is the value we are trying to minimize (or maximize)\nFormalized as a sum of decision variables and parameters\n\n\nQuestion: Do you remember the objective?"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#minimizing-the-transport-costs",
    "href": "lectures/lecture-01-presentation.html#minimizing-the-transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Minimizing the Transport Costs",
    "text": "Minimizing the Transport Costs\nMinimize the transport costs over all truckloads while meeting customer demand within the available supply from production sites.\n\nQuestion: How can we write this down?\n\n\n\\[\n\\text{Minimize} \\quad \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{i,j}\n\\]"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#constraints",
    "href": "lectures/lecture-01-presentation.html#constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Constraints",
    "text": "Constraints\n\nConstraints are conditions that must be met\nThey limit the solution space!\n\nQuestion: Objective value without any constraints?\n\n\nThe value is zero\nWe can transport any number of panels\n\n\n\nQuestion: What constraints are needed?"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#supply-constraints",
    "href": "lectures/lecture-01-presentation.html#supply-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Supply Constraints",
    "text": "Supply Constraints\nEnsure that the number of panels transported from a location does not exceed the available panels.\n\nQuestion: How can we formalize this?\n\n\n\\[\n\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad \\forall i \\in \\mathcal{I}\n\\]"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#demand-constraints",
    "href": "lectures/lecture-01-presentation.html#demand-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Demand Constraints",
    "text": "Demand Constraints\nEnsure that the demand of each customer is covered.\n\nQuestion: Any ideas?\n\n\n\\[\n\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad \\forall j \\in \\mathcal{J}\n\\]"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#non-negativity-constraints",
    "href": "lectures/lecture-01-presentation.html#non-negativity-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Non-negativity Constraints",
    "text": "Non-negativity Constraints\nEnsure no negative number of truckloads are transported.\n\nQuestion: Has anyone an idea how to write this down?\n\n\n\\[\nX_{i,j} \\geq 0 \\quad \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\]"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#transport-problem",
    "href": "lectures/lecture-01-presentation.html#transport-problem",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Problem",
    "text": "Transport Problem\nThe complete model can then be written as:\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{ij} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#inequality-constraints",
    "href": "lectures/lecture-01-presentation.html#inequality-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Inequality Constraints",
    "text": "Inequality Constraints\nQuestion: Could we replace \\(=\\) by \\(\\geq\\) in the demand constraint?\n\n\nYes, we could!\nWe could deliver more than the demand\nBut this would not happen here\n\n\n\nQuestion: Why won’t we transport more than the demand?\n\n\n\nDue to the associated costs!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#section-3",
    "href": "lectures/lecture-01-presentation.html#section-3",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Any\nquestions?"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#description-1",
    "href": "lectures/lecture-01-presentation.html#description-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nUnfortunately, the margins on solar panels are low. After the previous contract has been fulfilled, the company produced the same number of panels as before. In addition, all three customers want to order the same number of truckloads with solar panels again. The revenue per truckload of panels is 11,000 Euros. The complete production of a truckload of solar panels, including materials, costs 6,300 Euros."
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#new-objective",
    "href": "lectures/lecture-01-presentation.html#new-objective",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Objective",
    "text": "New Objective\nIn the new contract, the company wants to maximize its profits while the demand does not have to be fulfilled.\n\nQuestion: What changes are necessary?\n\n\n\nWe need to change the objective function\nWe need to change some parameters\nWe need to adjust some constraints\n\n\n\nQuestion: Does our decision variable change?\n\n\n\nNo, we still transport truckloads of solar panels"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#new-parameters",
    "href": "lectures/lecture-01-presentation.html#new-parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Parameters",
    "text": "New Parameters\n\\[\n\\begin{aligned}\nr &: \\text{Revenue per truckload of solar panels,} \\\\\nc &: \\text{Production costs per truckload of solar panels.}\n\\end{aligned}\n\\]\n\nQuestion: What is the profit per truckload of solar panels?\n\n\n\\[\np = r - c\n\\]"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#former-model",
    "href": "lectures/lecture-01-presentation.html#former-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Former Model",
    "text": "Former Model\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\geq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]\n\nQuestion: What do we need to change here?"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#new-model",
    "href": "lectures/lecture-01-presentation.html#new-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Model",
    "text": "New Model\n\\[\n\\begin{aligned}\n\\text{Maximize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} (p-c_{i,j}) \\times X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\leq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#model-reflection",
    "href": "lectures/lecture-01-presentation.html#model-reflection",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Model Reflection",
    "text": "Model Reflection\nTake a moment to think about what we just built:\n\nComplexityScalabilityAssumptionsVariations\n\n\nHow many decision variables does this problem have?\n\n\\(|\\mathcal{I}| \\times |\\mathcal{J}| = 2 \\times 3 = 6\\) variables\nEach represents a shipping route from a production site to a customer.\n\n\n\nWhat happens if we add more production sites?\n\nThe number of variables grows as \\(|\\mathcal{I}| \\times |\\mathcal{J}|\\)\n\n5 sites × 10 customers = 50 variables\n10 sites × 20 customers = 200 variables\nThe model structure stays the same, but computational complexity increases!\n\n\n\n\nWhat real-world factors are we ignoring?\n\n\nVehicle capacity limits per route\nTime windows for delivery\nDriver working hours and breaks\nTraffic conditions and travel time\nFuel costs vs. distance relationship\nPossibility of multi-stop routes\n\n\n\n\nHow would the model change for different scenarios?\n\n\nAir transport: Higher costs, faster delivery, weight limits\nMultiple vehicle types: Different capacities and costs\nTime-sensitive deliveries: Add scheduling constraints\nPartial shipments: Allow fractional truckloads"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#what-did-we-learn",
    "href": "lectures/lecture-01-presentation.html#what-did-we-learn",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What Did We Learn?",
    "text": "What Did We Learn?\n\n\nModeling Process:\n\nDefine the problem clearly\nIdentify decision variables\nFormulate obj. function\nAdd necessary constraints\nVerify completeness\n\n\nKey Insights:\n\nSets organize our indices\nParameters hold data\nVariables = decisions\nConstraints limit feasibility\nObj. drives optimization\n\n\n\n\n\n\n\n\n\nThis systematic approach works for any optimization problem!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#section-4",
    "href": "lectures/lecture-01-presentation.html#section-4",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nany questions?"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#download-and-install-julia",
    "href": "lectures/lecture-01-presentation.html#download-and-install-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Download and Install Julia",
    "text": "Download and Install Julia\n\nTo prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia."
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#installating-julia",
    "href": "lectures/lecture-01-presentation.html#installating-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installating Julia",
    "text": "Installating Julia\n\n\nHead to julialang.org and follow the instructions.\nThe easiest way to install Julia is via the shell/terminal\nLater, you can then manage Julia with juliaup\n\n\n\n\n\n\n\n\nIf you are ever asked to add something to your “PATH”, do so!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#vs-code",
    "href": "lectures/lecture-01-presentation.html#vs-code",
    "title": "Lecture I - Welcome and Introduction",
    "section": "VS Code",
    "text": "VS Code\n\n\nNext, we are going to install VS Code\nHead to the website code.visualstudio.com\nDownload and install the latest release"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#verify-the-installation",
    "href": "lectures/lecture-01-presentation.html#verify-the-installation",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Verify the Installation",
    "text": "Verify the Installation\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”\n\n\n\n\n\n\n\n\nAny problems? Ask me for help!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#create-a-new-file",
    "href": "lectures/lecture-01-presentation.html#create-a-new-file",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Create a new file",
    "text": "Create a new file\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\n\n\nHello World!\n\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#everything-working",
    "href": "lectures/lecture-01-presentation.html#everything-working",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Everything working?",
    "text": "Everything working?\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, the IDE likely cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\n\nDon’t worry if it is not running right away. We will fix this together!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#installation-checklist",
    "href": "lectures/lecture-01-presentation.html#installation-checklist",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installation Checklist",
    "text": "Installation Checklist\nBefore the next lecture, try to ensure you can:\n\nOpen VS Code\nSee Julia extension in the extensions panel\nCreate a new .jl file\nSee syntax highlighting in your Julia file\nRun code and see output in the terminal\n\n\n\n\n\n\n\n\nHaving trouble? We will fix your issues together in the next lecture!"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#how-to-get-started",
    "href": "lectures/lecture-01-presentation.html#how-to-get-started",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to get started?",
    "text": "How to get started?\n\nLearning a new programming language is a daunting task\nIt is best to start with some small, interactive problems\nThen, slowly increase the scope of the tasks\nWe will do this together in class!\n\n\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered a first introduction and are ready to start solving some problems in the upcoming lectures."
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#section-5",
    "href": "lectures/lecture-01-presentation.html#section-5",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#literature-i",
    "href": "lectures/lecture-01-presentation.html#literature-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Literature I",
    "text": "Literature I\nFor interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lecture-01-presentation.html#literature-ii",
    "href": "lectures/lecture-01-presentation.html#literature-ii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Literature II",
    "text": "Literature II\n\n\n\n\nHaase, Knut, Habib Zain Al Abideen, Salim Al-Bosta, Mathias Kasper, Matthes Koch, Sven Müller, and Dirk Helbing. 2016. “Improving Pilgrim Safety During the Hajj: An Analytical and Operational Research Approach.” Interfaces 46 (1): 74–90.\n\n\nMickein, Markus, Matthes Koch, and Knut Haase. 2022. “A Decision Support System for Brewery Production Planning at Feldschlösschen.” INFORMS Journal on Applied Analytics 52 (2): 158–72.\n\n\nVlćek, Tobias, Knut Haase, Malte Fliedner, and Tobias Cors. 2024. “Police Service District Planning.” OR Spectrum, February. https://doi.org/10.1007/s00291-024-00745-3.\n\n\nVlćek, Tobias, Knut Haase, Matthes Koch, Lena Dolz, Anneke Weygandt, and Jan Pape. 2024. “Controlling Passenger Flows into Metro Systems to Mitigate Overcrowding During Large-Scale Events.” Submitted to Transportation Research: Part B.\n\n\nVlćek, Tobias, and Guido Voigt. 2024. “Optimizing SKU-Warehouse Allocations to Minimize Split Parcels in E-Commerce Environments.” To Be Submitted Soon."
  },
  {
    "objectID": "lectures/lecture-01-introduction.html",
    "href": "lectures/lecture-01-introduction.html",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Field: Optimizing and simulating complex systems\nLanguages of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: tobias.vlcek@uni-hamburg.de\n\n. . .\n\n\n\n\n\n\nI really appreciate active participation and interaction!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#about-me",
    "href": "lectures/lecture-01-introduction.html#about-me",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Field: Optimizing and simulating complex systems\nLanguages of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: tobias.vlcek@uni-hamburg.de\n\n. . .\n\n\n\n\n\n\nI really appreciate active participation and interaction!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#lectures",
    "href": "lectures/lecture-01-introduction.html#lectures",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Lectures",
    "text": "Lectures\n\nEvery Tuesday between 10.15 AM and 11.45 AM\nFirst four lectures repeat modelling and programming\nLater lectures discuss practical problems and implementation\nLectures are interactive → We discuss approaches!\nCommunication takes place via OpenOlat and E-Mail",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#tutorials",
    "href": "lectures/lecture-01-introduction.html#tutorials",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Tutorials",
    "text": "Tutorials\n\nTutorials every Friday between 8.15 AM and 9.45 AM\nIn these tutorials we are working on assignments\nPlease bring a laptop with Windows, macOS, or Linux!\nThis Friday there is no tutorial!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#assignments",
    "href": "lectures/lecture-01-introduction.html#assignments",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Assignments",
    "text": "Assignments\n\nBased on applied problems of the lecture\nUp to 3 students can solve assignments together\nSubmitted solutions earn bonus points for the exam\nMax. 0.5 point per tutorial\n\n. . .\n\n\n\n\n\n\nBonus points only count if the mark is at least 4.0!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#applied-optimization",
    "href": "lectures/lecture-01-introduction.html#applied-optimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Applied Optimization",
    "text": "Applied Optimization\n\nReal-world problems can be addressed with models\nOur objective is to foster your interest in the topic\nEnable you to recognize and solve problem structures\nIncludes problem understanding and implementation",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#research-in-operations-research",
    "href": "lectures/lecture-01-introduction.html#research-in-operations-research",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Research in Operations Research",
    "text": "Research in Operations Research\n\nPart of the University of Hamburg Business School\nAiming to solve real-world problems\nOr improving our theoretical understanding\nPublication in journals and conferences\n\n. . .\n\n\n\n\n\n\nWe are also happy to supervise Bachelor and Master theses!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#national-and-international-journals",
    "href": "lectures/lecture-01-introduction.html#national-and-international-journals",
    "title": "Lecture I - Welcome and Introduction",
    "section": "National and international journals",
    "text": "National and international journals\n\nEuropean Journal of OR\nJournal of the Operational Research Society\nJournal on Applied Analytics\nManagement Science\nOperations Research\nOR Spectrum",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#brewery-production-planning",
    "href": "lectures/lecture-01-introduction.html#brewery-production-planning",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Brewery Production Planning",
    "text": "Brewery Production Planning\n\nMickein, Koch, and Haase (2022)",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#police-service-district-planning",
    "href": "lectures/lecture-01-introduction.html#police-service-district-planning",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Police Service District Planning",
    "text": "Police Service District Planning\n\nVlćek, Haase, Fliedner, et al. (2024)",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#venue-seating-under-covid-19",
    "href": "lectures/lecture-01-introduction.html#venue-seating-under-covid-19",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Venue Seating under COVID-19",
    "text": "Venue Seating under COVID-19\n\nUsama Dkaidik and Matthes Koch; Current research with a likely paper submission in 2024",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#metro-inflow-management",
    "href": "lectures/lecture-01-introduction.html#metro-inflow-management",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Metro Inflow Management",
    "text": "Metro Inflow Management\n\nVlćek, Haase, Koch, et al. (2024)",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#split-order-minimization",
    "href": "lectures/lecture-01-introduction.html#split-order-minimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Split-Order Minimization",
    "text": "Split-Order Minimization\n\nVlćek and Voigt (2024)",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#crowd-management",
    "href": "lectures/lecture-01-introduction.html#crowd-management",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Crowd Management",
    "text": "Crowd Management\n\nHaase et al. (2016)",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#part-i",
    "href": "lectures/lecture-01-introduction.html#part-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part I",
    "text": "Part I\n\nWelcome and Introduction\nFirst Steps in Julia\nPackages and Data Management\nModelling with JuMP",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#part-ii",
    "href": "lectures/lecture-01-introduction.html#part-ii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part II",
    "text": "Part II\n\nBeer Production Planning\nMinimizing Split Orders in E-Commerce\nPeriodic Library Routing\nPolice Districting",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#part-iii",
    "href": "lectures/lecture-01-introduction.html#part-iii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part III",
    "text": "Part III\n\nSafety Planning for the Islamic Pilgrimage in Mecca\nIntermission\nArena Seat Planning under Distancing Rules\nPassenger Flow Control in Urban Rail\nRecap and Discussion\n????",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#choice-of-programming-language",
    "href": "lectures/lecture-01-introduction.html#choice-of-programming-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Choice of Programming Language",
    "text": "Choice of Programming Language\n\n. . .\nQuestion: Have you ever heard of Julia?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#why-julia",
    "href": "lectures/lecture-01-introduction.html#why-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Why Julia?",
    "text": "Why Julia?\n\nDesigned to be:\n\nas general as Python\nas statistics-friendly as R\nas fast as C++!\n\n\n. . .\n\n\n\n\n\n\nAllows for fast data workflows, particularly in scientific computing!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#syntax",
    "href": "lectures/lecture-01-introduction.html#syntax",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Syntax",
    "text": "Syntax\n\nDynamically-typed syntax just like Python\nSimilar to R, Matlab and Python - not like C++\nIn comparison, accessible and easy to learn!\nNo need to worry about memory management!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#jump",
    "href": "lectures/lecture-01-introduction.html#jump",
    "title": "Lecture I - Welcome and Introduction",
    "section": "JuMP",
    "text": "JuMP\n\nPackage for algebraic modeling in Julia\nSimplifies solving complex optimization problems\nProvides a high-level, user-friendly interface\nUseful for operations research and data science\n\n. . .\n\n\n\n\n\n\nJuMP is an alternative to Pyomo, GAMS, and AMPL!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#must-it-be-a-new-language",
    "href": "lectures/lecture-01-introduction.html#must-it-be-a-new-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Must it be a new language?",
    "text": "Must it be a new language?\n\nYes, but no need to worry!\nJulia is quite similar to Python and R\nWe will learn the syntax together in the first part\nIt is helpful to switch languages from time to time",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#section",
    "href": "lectures/lecture-01-introduction.html#section",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nexperience with\nalgebraic modeling?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#what-is-algebraic-modeling",
    "href": "lectures/lecture-01-introduction.html#what-is-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is algebraic modeling?",
    "text": "What is algebraic modeling?\n\nA “mathematical language” for optimization problems\nAllows for describing complex systems and constraints\nBased on linear algebra (Equations and Inequalities)\n\n. . .",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#how-to-learn-algebraic-modeling",
    "href": "lectures/lecture-01-introduction.html#how-to-learn-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to learn algebraic modeling?",
    "text": "How to learn algebraic modeling?\n\nPractice, practice, and practice!\nUnderstand standard models and their approach\nDevelop an understanding of constraints\nUnderstand the structure of a models solution space\nUse an available algorithms to determine solutions",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#central-questions",
    "href": "lectures/lecture-01-introduction.html#central-questions",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Central Questions",
    "text": "Central Questions\n\nWhat is to be decided?\nWhat is relevant to the decision?\nWhat information is given and relevant?\nWhat parameters (data) are needed?\nWhich variables and of which type are needed?\n\n. . .\n\n\n\n\n\n\nModeling is a creative process!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#model-components",
    "href": "lectures/lecture-01-introduction.html#model-components",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Model Components",
    "text": "Model Components\n\nObjective function\nConstraints\nVariables\n\n. . .\n\n\n\n\n\n\nWe will go through these components step by step in each lecture!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#linear-optimization-model",
    "href": "lectures/lecture-01-introduction.html#linear-optimization-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Linear Optimization Model",
    "text": "Linear Optimization Model\n\n\n\nBasic Model Formulation\n\\[\n\\begin{aligned}\n&\\text{maximize} \\quad F = \\sum_{j\\in \\mathcal{J}} c_j \\times X_j\n\\end{aligned}\n\\]\nsubject to\n\\[\n\\begin{aligned}\n&\\sum_{j\\in \\mathcal{J}} a_{i,j} \\times X_j  \\le b_i && \\forall i \\in \\mathcal{I} \\\\\n&X_j \\ge 0 &&  \\forall  j \\in \\mathcal{J}\n\\end{aligned}\n\\]\n\n\n\nModel Components\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{set of $i \\in \\mathcal{I}$,}\\\\\n\\mathcal{J} &: \\text{set of $j \\in \\mathcal{J}$,}\\\\\nF   &: \\text{Objective function variable,}\\\\\nX_{j}   &: \\text{decision variables,}\\\\\nc_{j}   &: \\text{objective function coefficients,}\\\\\na_{i,j} &: \\text{parameters,}\\\\\nb_{i}   &: \\text{parameters}\n\\end{aligned}\n\\]\n\n\n\n. . .\nQuestion: Have you ever seen something like this before?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#what-is-this-good-for",
    "href": "lectures/lecture-01-introduction.html#what-is-this-good-for",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is this good for?",
    "text": "What is this good for?\n\nGood Question! A lot of things:\n\nModeling real-world problems\nSolving complex systems\nOptimizing resource allocation\nDecision-making under constraints\nSimulation and prediction",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#from-abstract-to-concrete",
    "href": "lectures/lecture-01-introduction.html#from-abstract-to-concrete",
    "title": "Lecture I - Welcome and Introduction",
    "section": "From Abstract to Concrete",
    "text": "From Abstract to Concrete\nWe’ve just seen the general structure:\n\nSets (\\(\\mathcal{I}\\), \\(\\mathcal{J}\\))\nParameters (\\(c_j\\), \\(a_{i,j}\\), \\(b_i\\))\nDecision variables (\\(X_j\\))\nObjective function and constraints\n\n. . .\nNow let’s see how this works with a real problem!\n. . .\n\n\n\n\n\n\nWatch for these components as we build our first model together.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#case-solar-panel-transport",
    "href": "lectures/lecture-01-introduction.html#case-solar-panel-transport",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Case: Solar Panel Transport",
    "text": "Case: Solar Panel Transport",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#description",
    "href": "lectures/lecture-01-introduction.html#description",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nA company is producing solar panels in Dresden and Laupheim and has to transport them to new solar farms near Hamburg, Munich, and Berlin. The quantities offered and demanded (truckloads) and the transport costs per truckload in Euro are summarized in the following table.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#transport-costs",
    "href": "lectures/lecture-01-introduction.html#transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Costs",
    "text": "Transport Costs\n\n\n\nOrigin/Destination\nHamburg\nMunich\nBerlin\nAvailable\n\n\n\n\nDresden\n5010\n4640\n1980\n34\n\n\nLaupheim\n7120\n1710\n6430\n41\n\n\nDemand\n21\n17\n29\n\n\n\n\nExample: A truckload from Dresden \\(i=1\\) to Munich \\(j=2\\) costs \\(c_{12}=4640\\) Euro. Moreover, it is necessary to fulfil all customer demands, as the contract has been signed.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#graphical-illustration",
    "href": "lectures/lecture-01-introduction.html#graphical-illustration",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Graphical Illustration",
    "text": "Graphical Illustration",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#what-are-we-trying",
    "href": "lectures/lecture-01-introduction.html#what-are-we-trying",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What are we trying?",
    "text": "What are we trying?\nFirst, we always need to understand the objectives.\n. . .\nQuestion: What are our possible objectives?\nMinimizing the transport costs over all truckloads while meeting the demand based on the available solar panels adhering to the available panels.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#section-1",
    "href": "lectures/lecture-01-introduction.html#section-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Let’s break it down\nstep by step!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#sets",
    "href": "lectures/lecture-01-introduction.html#sets",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Sets",
    "text": "Sets\nRemember, sets are collections of elements\n. . .\nQuestion: What sets are needed?\n. . .\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{Set of production sites, indexed by } i \\text{ with } i \\in \\{1, \\ldots, |\\mathcal{I}|\\}, \\\\\n\\mathcal{J} &: \\text{Set of customers, indexed by } j \\text{ with } j \\in \\{1, \\ldots, |\\mathcal{J}|\\}.\n\\end{aligned}\n\\]\n. . .\n\n\n\n\n\n\nWe often use plural names for sets and a caligraphic letter, e.g., \\(\\mathcal{I}\\) and \\(\\mathcal{J}\\).",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#parameters",
    "href": "lectures/lecture-01-introduction.html#parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Parameters",
    "text": "Parameters\nParameters are fixed values that are given.\n. . .\nQuestion: What parameters are needed?\n. . .\n\\[\n\\begin{aligned}\nc_{i,j} &: \\text{Costs per truck load for transport from } i \\text{ to } j, \\\\\na_i &: \\text{Available truck loads at } i, \\\\\nb_j &: \\text{Customer demands at } j.\n\\end{aligned}\n\\]\n. . .\n\n\n\n\n\n\nWe usually use the corresponding lower-case letter, e.g., \\(c\\), \\(a\\), and \\(b\\).",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#decision-variable",
    "href": "lectures/lecture-01-introduction.html#decision-variable",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Decision Variable",
    "text": "Decision Variable\n\nDecision variables are the values we are trying to find\nHere, our objective is to minimize the transport costs\n\n. . .\nQuestion: What decision variables are needed?\n. . .\n\\[\nX_{i,j} \\text{Trucks that deliver panels from site } i \\text{ to customer } j.\n\\]\n. . .\n\n\n\n\n\n\nWe use upper-case letters to distinguish variables from parameters, e.g., \\(X\\).",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#section-2",
    "href": "lectures/lecture-01-introduction.html#section-2",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "These are our\nbuilding blocks!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#objective-function",
    "href": "lectures/lecture-01-introduction.html#objective-function",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Objective Function",
    "text": "Objective Function\n\nThe objective function is the value we are trying to minimize (or maximize)\nFormalized as a sum of decision variables and parameters\n\n. . .\nQuestion: Do you remember the objective?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#minimizing-the-transport-costs",
    "href": "lectures/lecture-01-introduction.html#minimizing-the-transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Minimizing the Transport Costs",
    "text": "Minimizing the Transport Costs\nMinimize the transport costs over all truckloads while meeting customer demand within the available supply from production sites.\n. . .\nQuestion: How can we write this down?\n. . .\n\\[\n\\text{Minimize} \\quad \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{i,j}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#constraints",
    "href": "lectures/lecture-01-introduction.html#constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Constraints",
    "text": "Constraints\n\nConstraints are conditions that must be met\nThey limit the solution space!\n\nQuestion: Objective value without any constraints?\n. . .\n\nThe value is zero\nWe can transport any number of panels\n\n. . .\nQuestion: What constraints are needed?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#supply-constraints",
    "href": "lectures/lecture-01-introduction.html#supply-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Supply Constraints",
    "text": "Supply Constraints\nEnsure that the number of panels transported from a location does not exceed the available panels.\n. . .\nQuestion: How can we formalize this?\n. . .\n\\[\n\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad \\forall i \\in \\mathcal{I}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#demand-constraints",
    "href": "lectures/lecture-01-introduction.html#demand-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Demand Constraints",
    "text": "Demand Constraints\nEnsure that the demand of each customer is covered.\n. . .\nQuestion: Any ideas?\n. . .\n\\[\n\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad \\forall j \\in \\mathcal{J}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#non-negativity-constraints",
    "href": "lectures/lecture-01-introduction.html#non-negativity-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Non-negativity Constraints",
    "text": "Non-negativity Constraints\nEnsure no negative number of truckloads are transported.\n. . .\nQuestion: Has anyone an idea how to write this down?\n. . .\n\\[\nX_{i,j} \\geq 0 \\quad \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#transport-problem",
    "href": "lectures/lecture-01-introduction.html#transport-problem",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Problem",
    "text": "Transport Problem\nThe complete model can then be written as:\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{ij} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#inequality-constraints",
    "href": "lectures/lecture-01-introduction.html#inequality-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Inequality Constraints",
    "text": "Inequality Constraints\nQuestion: Could we replace \\(=\\) by \\(\\geq\\) in the demand constraint?\n. . .\n\nYes, we could!\nWe could deliver more than the demand\nBut this would not happen here\n\n. . .\nQuestion: Why won’t we transport more than the demand?\n. . .\n\nDue to the associated costs!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#section-3",
    "href": "lectures/lecture-01-introduction.html#section-3",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Any\nquestions?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#description-1",
    "href": "lectures/lecture-01-introduction.html#description-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nUnfortunately, the margins on solar panels are low. After the previous contract has been fulfilled, the company produced the same number of panels as before. In addition, all three customers want to order the same number of truckloads with solar panels again. The revenue per truckload of panels is 11,000 Euros. The complete production of a truckload of solar panels, including materials, costs 6,300 Euros.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#new-objective",
    "href": "lectures/lecture-01-introduction.html#new-objective",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Objective",
    "text": "New Objective\nIn the new contract, the company wants to maximize its profits while the demand does not have to be fulfilled.\n. . .\nQuestion: What changes are necessary?\n. . .\n\nWe need to change the objective function\nWe need to change some parameters\nWe need to adjust some constraints\n\n. . .\nQuestion: Does our decision variable change?\n. . .\n\nNo, we still transport truckloads of solar panels",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#new-parameters",
    "href": "lectures/lecture-01-introduction.html#new-parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Parameters",
    "text": "New Parameters\n\\[\n\\begin{aligned}\nr &: \\text{Revenue per truckload of solar panels,} \\\\\nc &: \\text{Production costs per truckload of solar panels.}\n\\end{aligned}\n\\]\n. . .\nQuestion: What is the profit per truckload of solar panels?\n. . .\n\\[\np = r - c\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#former-model",
    "href": "lectures/lecture-01-introduction.html#former-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Former Model",
    "text": "Former Model\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} \\times X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\geq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]\n. . .\nQuestion: What do we need to change here?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#new-model",
    "href": "lectures/lecture-01-introduction.html#new-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Model",
    "text": "New Model\n\\[\n\\begin{aligned}\n\\text{Maximize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} (p-c_{i,j}) \\times X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\leq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#model-reflection",
    "href": "lectures/lecture-01-introduction.html#model-reflection",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Model Reflection",
    "text": "Model Reflection\nTake a moment to think about what we just built:\n\nComplexityScalabilityAssumptionsVariations\n\n\nHow many decision variables does this problem have?\n\n\\(|\\mathcal{I}| \\times |\\mathcal{J}| = 2 \\times 3 = 6\\) variables\nEach represents a shipping route from a production site to a customer.\n\n\n\nWhat happens if we add more production sites?\n\nThe number of variables grows as \\(|\\mathcal{I}| \\times |\\mathcal{J}|\\)\n\n5 sites × 10 customers = 50 variables\n10 sites × 20 customers = 200 variables\nThe model structure stays the same, but computational complexity increases!\n\n\n\n\nWhat real-world factors are we ignoring?\n\n\nVehicle capacity limits per route\nTime windows for delivery\nDriver working hours and breaks\nTraffic conditions and travel time\nFuel costs vs. distance relationship\nPossibility of multi-stop routes\n\n\n\n\nHow would the model change for different scenarios?\n\n\nAir transport: Higher costs, faster delivery, weight limits\nMultiple vehicle types: Different capacities and costs\nTime-sensitive deliveries: Add scheduling constraints\nPartial shipments: Allow fractional truckloads",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#what-did-we-learn",
    "href": "lectures/lecture-01-introduction.html#what-did-we-learn",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What Did We Learn?",
    "text": "What Did We Learn?\n\n\nModeling Process:\n\nDefine the problem clearly\nIdentify decision variables\nFormulate obj. function\nAdd necessary constraints\nVerify completeness\n\n\nKey Insights:\n\nSets organize our indices\nParameters hold data\nVariables = decisions\nConstraints limit feasibility\nObj. drives optimization\n\n\n\n. . .\n\n\n\n\n\n\nThis systematic approach works for any optimization problem!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#section-4",
    "href": "lectures/lecture-01-introduction.html#section-4",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nany questions?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#download-and-install-julia",
    "href": "lectures/lecture-01-introduction.html#download-and-install-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Download and Install Julia",
    "text": "Download and Install Julia\n\nTo prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#installating-julia",
    "href": "lectures/lecture-01-introduction.html#installating-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installating Julia",
    "text": "Installating Julia\n\n\nHead to julialang.org and follow the instructions.\nThe easiest way to install Julia is via the shell/terminal\nLater, you can then manage Julia with juliaup\n\n. . .\n\n\n\n\n\n\nIf you are ever asked to add something to your “PATH”, do so!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#vs-code",
    "href": "lectures/lecture-01-introduction.html#vs-code",
    "title": "Lecture I - Welcome and Introduction",
    "section": "VS Code",
    "text": "VS Code\n\n\nNext, we are going to install VS Code\nHead to the website code.visualstudio.com\nDownload and install the latest release",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#verify-the-installation",
    "href": "lectures/lecture-01-introduction.html#verify-the-installation",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Verify the Installation",
    "text": "Verify the Installation\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”\n\n. . .\n\n\n\n\n\n\nAny problems? Ask me for help!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#create-a-new-file",
    "href": "lectures/lecture-01-introduction.html#create-a-new-file",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Create a new file",
    "text": "Create a new file\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\nHello World!\n\n\n. . .\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#everything-working",
    "href": "lectures/lecture-01-introduction.html#everything-working",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Everything working?",
    "text": "Everything working?\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, the IDE likely cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n. . .\n\n\n\n\n\n\nDon’t worry if it is not running right away. We will fix this together!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#installation-checklist",
    "href": "lectures/lecture-01-introduction.html#installation-checklist",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installation Checklist",
    "text": "Installation Checklist\nBefore the next lecture, try to ensure you can:\n\nOpen VS Code\nSee Julia extension in the extensions panel\nCreate a new .jl file\nSee syntax highlighting in your Julia file\nRun code and see output in the terminal\n\n. . .\n\n\n\n\n\n\nHaving trouble? We will fix your issues together in the next lecture!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#how-to-get-started",
    "href": "lectures/lecture-01-introduction.html#how-to-get-started",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to get started?",
    "text": "How to get started?\n\nLearning a new programming language is a daunting task\nIt is best to start with some small, interactive problems\nThen, slowly increase the scope of the tasks\nWe will do this together in class!\n\n. . .\n\n\n\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered a first introduction and are ready to start solving some problems in the upcoming lectures.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#section-5",
    "href": "lectures/lecture-01-introduction.html#section-5",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lecture-01-introduction.html#literature-i",
    "href": "lectures/lecture-01-introduction.html#literature-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Literature I",
    "text": "Literature I\nFor interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "general/privacy.html",
    "href": "general/privacy.html",
    "title": "Privacy Policy",
    "section": "",
    "text": "Welcome! This Privacy Policy explains how we collect, use, shares, and protects information in relation to our AI Chatbot service (the “Chatbot”) provided on this website. All other services do not use data that is covered by this policy!\nWe are committed to protecting your privacy. This policy outlines our practices concerning the data processed when you interact with our Chatbot. By using the Chatbot, you agree to the collection and use of information in accordance with this policy."
  },
  {
    "objectID": "general/privacy.html#introduction",
    "href": "general/privacy.html#introduction",
    "title": "Privacy Policy",
    "section": "",
    "text": "Welcome! This Privacy Policy explains how we collect, use, shares, and protects information in relation to our AI Chatbot service (the “Chatbot”) provided on this website. All other services do not use data that is covered by this policy!\nWe are committed to protecting your privacy. This policy outlines our practices concerning the data processed when you interact with our Chatbot. By using the Chatbot, you agree to the collection and use of information in accordance with this policy."
  },
  {
    "objectID": "general/privacy.html#data-controller",
    "href": "general/privacy.html#data-controller",
    "title": "Privacy Policy",
    "section": "2. Data Controller",
    "text": "2. Data Controller\nThe data controller responsible for your personal data is:\nBeyond Simulations GmbH\nAm Eich 9d\n22113 Oststeinbek\nGermany\nEmail: info@beyond-simulations.com"
  },
  {
    "objectID": "general/privacy.html#information-we-collect",
    "href": "general/privacy.html#information-we-collect",
    "title": "Privacy Policy",
    "section": "3. Information We Collect",
    "text": "3. Information We Collect\nWhen you interact with our Chatbot, we collect and process the following types of information:\n\nChat Interactions: This includes the questions, prompts, and text you submit to the Chatbot (“Prompts”) and the responses generated by the Chatbot (“Responses”). We do not store any personal data and all prompts are anonymized.\nTechnical Data: We may automatically collect technical information associated with your interaction, such as timestamps, session identifiers for service functionality. This data is processed on our self-hosted server at Hetzner in Germany.\nUsage Data: We may collect aggregated and anonymized data about how the Chatbot is used to monitor performance and improve the service."
  },
  {
    "objectID": "general/privacy.html#how-we-use-your-information",
    "href": "general/privacy.html#how-we-use-your-information",
    "title": "Privacy Policy",
    "section": "4. How We Use Your Information",
    "text": "4. How We Use Your Information\nWe use the collected information for the following purposes:\n\nTo Provide and Operate the Chatbot: To receive your Prompts, process them using AI models, and deliver Responses back to you.\nTo Route Requests: To manage communication between our Chatbot interface and the underlying AI models via intermediary services.\nFor Safety and Content Moderation: To analyze Prompts and/or potential Responses for harmful, inappropriate, or policy-violating content using designated services by Mistral AI acting as guardrails, aiming to ensure safer interactions.\nFor Service Improvement: To analyze usage patterns to understand user needs, troubleshoot issues, and enhance the Chatbot’s performance and capabilities.\nFor Security and Monitoring: To maintain the security of our service, prevent fraud, and monitor for potential misuse.\nTo Comply with Legal Obligations: To meet any applicable legal or regulatory requirements."
  },
  {
    "objectID": "general/privacy.html#legal-basis-for-processing",
    "href": "general/privacy.html#legal-basis-for-processing",
    "title": "Privacy Policy",
    "section": "5. Legal Basis for Processing",
    "text": "5. Legal Basis for Processing\nWe process your personal data based on the following legal grounds:\n\nLegitimate Interests: Processing is necessary for our legitimate interests in operating and improving the Chatbot service and maintaining its security, provided these interests are not overridden by your data protection rights.\nConsent: In some cases, we might ask for your explicit consent for specific processing activities (e.g., using conversation data for fine-tuning models beyond basic service provision).\nLegal Obligation: Processing is necessary to comply with a legal obligation to which we are subject."
  },
  {
    "objectID": "general/privacy.html#data-sharing-and-third-parties",
    "href": "general/privacy.html#data-sharing-and-third-parties",
    "title": "Privacy Policy",
    "section": "6. Data Sharing and Third Parties",
    "text": "6. Data Sharing and Third Parties\nTo provide the Chatbot service, your Prompts are processed by and shared with the following third-party services and infrastructure providers:\n\nChatbot Interface: The user interface for the Chatbot runs directly in your web browser.\nRAG-Backend: The RAG backend runs on a self-hosted server on Hetzner in Germany.\nLLM Observation (Langfuse): We use Langfuse to observe the usage of the LLM models we use. Your Prompts (and generated responses) pass through Langfuse to reach the selected LLM provider or guardrail service. The data is stored on our self-hosted server at Hetzner in Germany.\nHosting Provider (Hetzner): Our instance of Langfuse is self-hosted on servers provided by Hetzner Online GmbH. Hetzner acts as a data processor providing the infrastructure. We store application data and interaction logs on these servers, located within Germany.\nMistral AI: We use Mistral AI for two primary purposes: (1) as one of the LLM options to generate Responses to your Prompts, and (2) as a guardrail service to check Prompts and/or potential Responses (which may have been generated by Mistral AI itself) for safety, appropriateness, and compliance with content policies before a final response is delivered to you. When Mistral is used for either generation or guardrail checking, your data (relevant Prompts and/or potential Responses) is processed according to Mistral’s terms and privacy policy. The data ist not used or saved for training purposes by the model providers.\n\nImportant Note on Third-Party Processing: These LLM and guardrail providers process your data to generate Responses or perform safety checks. They may use data according to their own policies, potentially including service improvement, subject to their terms. We encourage you to review their respective privacy policies. We do not explicitly share personal identifiers like your name or email through the Chatbot interaction unless you voluntarily include such information in your Prompts."
  },
  {
    "objectID": "general/privacy.html#data-storage-security-and-retention",
    "href": "general/privacy.html#data-storage-security-and-retention",
    "title": "Privacy Policy",
    "section": "7. Data Storage, Security, and Retention",
    "text": "7. Data Storage, Security, and Retention\n\nStorage: Chat interaction data (Prompts, Responses) and technical logs may be stored temporarily or persistently (depending on configuration) on our Langfuse instance hosted on Hetzner servers in Germany.\nSecurity: We implement reasonable technical and organizational measures to protect your data from unauthorized access, disclosure, alteration, or destruction. This includes using HTTPS encryption for data transmitted between your browser, our server, and the LLM providers. Access to the backend systems is restricted.\nRetention: We retain chat interaction data and technical logs only for as long as necessary to fulfill the purposes outlined in this policy, for troubleshooting, security logging, service improvement, or as required by law. Retention periods vary depending on the type of data and our operational needs."
  },
  {
    "objectID": "general/privacy.html#your-data-protection-rights",
    "href": "general/privacy.html#your-data-protection-rights",
    "title": "Privacy Policy",
    "section": "8. Your Data Protection Rights",
    "text": "8. Your Data Protection Rights\nDepending on your location and applicable data protection laws, you may have the following rights regarding your personal data:\n\nRight to Access: You can request copies of your personal data that we hold.\nRight to Rectification: You can request correction of inaccurate or incomplete data.\nRight to Erasure (‘Right to be Forgotten’): You can request the deletion of your personal data under certain conditions.\nRight to Restrict Processing: You can request the limitation of how we process your data under certain conditions.\nRight to Data Portability: You can request that we transfer the data we have collected to another organization, or directly to you, under certain conditions.\nRight to Object: You can object to our processing of your personal data based on legitimate interests.\nRight to Withdraw Consent: If processing is based on consent, you can withdraw it at any time.\n\nTo exercise any of these rights, please contact us using the details provided in Section 2 (Data Controller). We may need to verify your identity before processing your request."
  },
  {
    "objectID": "general/privacy.html#changes-to-this-privacy-policy",
    "href": "general/privacy.html#changes-to-this-privacy-policy",
    "title": "Privacy Policy",
    "section": "9. Changes to This Privacy Policy",
    "text": "9. Changes to This Privacy Policy\nWe may update this Privacy Policy from time to time. We will notify you of any significant changes by posting the new policy on this page and updating the “Last Updated” date at the top. We encourage you to review this policy periodically for any changes."
  },
  {
    "objectID": "general/faq.html",
    "href": "general/faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to tobias.vlcek@uni-hamburg.de.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#unanswered-questions",
    "href": "general/faq.html#unanswered-questions",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to tobias.vlcek@uni-hamburg.de.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#contribution-and-mistakes",
    "href": "general/faq.html#contribution-and-mistakes",
    "title": "Frequently Asked Questions",
    "section": "Contribution and Mistakes",
    "text": "Contribution and Mistakes\nIf you have found a mistake in the course material or if you have any suggestion on how to improve the course, please let me know by sending me an e-mail to tobias.vlcek@uni-hamburg.de.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#faqs",
    "href": "general/faq.html#faqs",
    "title": "Frequently Asked Questions",
    "section": "FAQs",
    "text": "FAQs\n\nIs the course difficult?\nIn terms of difficulty, this is of course somehow complicated for me to assess. However, I have tried to make all the content as comprehensible as possible and really do ask you many questions in the lectures. If I have the impression that something has not been understood at all, then I take longer at that point. This semester is the first time I think the course is truly finished. I have adapted the slides based on feedback from the last two years and made all the examples as simple as possible. In a nutshell: If you are interested in the subject and equations do not scare you, you will likely do great in the course.\n\n\nHow can I download PDF slides from the lecture?\n\nFirst, open the lecture you want to download the slides from.\nThen, click on the RevealJS button in the top right corner.\nNow, click on the three stacked bars in the lower left corner.\nThen, click on Tools in the upper left corner.\nNow you can select PDF Export Mode and then save the slides as a PDF.\n\n\n\n\n\n\n\nUnfortunately, this method does not work perfectly on all browsers. If you have a Chrome based browser, you should be fine.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#how-does-the-calculation-of-the-bonus-points-work",
    "href": "general/faq.html#how-does-the-calculation-of-the-bonus-points-work",
    "title": "Frequently Asked Questions",
    "section": "How does the calculation of the bonus points work?",
    "text": "How does the calculation of the bonus points work?\nTo reach the full 6 points, all exercises must be submitted. A maximum of 0.5 points can be earned per exercise. In the overview, ‘1’ stands for successfully submitted, and ‘0.5’ for submitted (but without attempting to solve everything). In the end, I calculate this as half or quarter points towards the total score.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#can-i-take-a-sheet-with-me-to-the-exam",
    "href": "general/faq.html#can-i-take-a-sheet-with-me-to-the-exam",
    "title": "Frequently Asked Questions",
    "section": "Can I take a sheet with me to the exam?",
    "text": "Can I take a sheet with me to the exam?\nYes, you can take a DIN A4 sheet with notes on both sides to the exam. Please note, that it should be one sheet of paper.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#how-does-the-chatbot-work",
    "href": "general/faq.html#how-does-the-chatbot-work",
    "title": "Frequently Asked Questions",
    "section": "How does the chatbot work?",
    "text": "How does the chatbot work?\nThe course AI is a chatbot that uses the Mistral and some custom code hosted on Hetzner in Germany. If you have any questions about the course, feel free to ask the AI. Note, that the AI is not perfect and sometimes the answers might be incorrect. For more information about how the data is processed, please refer to the privacy policy.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html",
    "href": "general/cheatsheet-julia.html",
    "title": "Julia Syntax Cheatsheet",
    "section": "",
    "text": "# Basic variable declaration\nx = 1                  # Implicit typing\ny::Int64 = 5          # Explicit type annotation\n\n# Common types\nnum_int = 42          # Integer\nnum_float = 19.99     # Float\nis_student = true     # Boolean\nname = \"Julia\"        # String\n\n# Check type\ntypeof(num_int)       # Returns Int64\ntypeof(num_float)     # Returns Float64\n\n\n\n\n\nname = \"Julia\"\nage = 30\n# Basic interpolation\nmessage = \"I am $age years old\"\n# Complex interpolation\ngreeting = \"Hello, my name is $name and I am $age years old\"\n\n\n\n\n\n# Convert between types\nfloat_num = Float64(42)    # Int to Float\nint_num = Int64(3.14)      # Float to Int\nstr_num = string(42)       # Number to String",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#variable-declaration-and-types",
    "href": "general/cheatsheet-julia.html#variable-declaration-and-types",
    "title": "Julia Syntax Cheatsheet",
    "section": "",
    "text": "# Basic variable declaration\nx = 1                  # Implicit typing\ny::Int64 = 5          # Explicit type annotation\n\n# Common types\nnum_int = 42          # Integer\nnum_float = 19.99     # Float\nis_student = true     # Boolean\nname = \"Julia\"        # String\n\n# Check type\ntypeof(num_int)       # Returns Int64\ntypeof(num_float)     # Returns Float64",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#string-interpolation",
    "href": "general/cheatsheet-julia.html#string-interpolation",
    "title": "Julia Syntax Cheatsheet",
    "section": "",
    "text": "name = \"Julia\"\nage = 30\n# Basic interpolation\nmessage = \"I am $age years old\"\n# Complex interpolation\ngreeting = \"Hello, my name is $name and I am $age years old\"",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#type-conversion",
    "href": "general/cheatsheet-julia.html#type-conversion",
    "title": "Julia Syntax Cheatsheet",
    "section": "",
    "text": "# Convert between types\nfloat_num = Float64(42)    # Int to Float\nint_num = Int64(3.14)      # Float to Int\nstr_num = string(42)       # Number to String",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#vectors",
    "href": "general/cheatsheet-julia.html#vectors",
    "title": "Julia Syntax Cheatsheet",
    "section": "Vectors",
    "text": "Vectors\n\n# Create vectors\ngrades = [95, 87, 91, 78, 88]    # Numeric vector\nnames = [\"Mike\", \"Yola\", \"Elio\"] # String vector\n\n# Vector operations\npush!(grades, 82)       # Add element to end\npop!(grades)           # Remove last element\npopfirst!(grades)      # Remove first element\n\n# Vector indexing\nfirst = grades[1]      # Access first element\nsubset = grades[1:3]   # Access first three elements",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#matrices",
    "href": "general/cheatsheet-julia.html#matrices",
    "title": "Julia Syntax Cheatsheet",
    "section": "Matrices",
    "text": "Matrices\n\n# Create matrices\nmatrix = [1 2 3; 4 5 6]    # 2x3 matrix\n# Matrix operations\nmatrix[2,3] = 17           # Change specific element\n\n# Matrix arithmetic\nmatrix1 = [2 2; 3 3]\nmatrix2 = [1 2; 3 4]\nsum_matrix = matrix1 + matrix2      # Matrix addition\nprod_matrix = matrix1 * matrix2     # Matrix multiplication\nelement_prod = matrix1 .* matrix2   # Element-wise multiplication\n\n# Broadcasting\nmatrix .+ 10                # Add 10 to each element",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#tuples",
    "href": "general/cheatsheet-julia.html#tuples",
    "title": "Julia Syntax Cheatsheet",
    "section": "Tuples",
    "text": "Tuples\n\n# Create tuples (immutable)\nperson = (\"Elio Smith\", 18, \"Hamburg\")\nrgb = (255, 0, 0)\n\n# Tuple operations\nname = person[1]           # Access first element\nage, city = person[2:3]    # Multiple assignment",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-differences",
    "href": "general/cheatsheet-julia.html#key-differences",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Differences",
    "text": "Key Differences\n\nVectors: Mutable, 1-dimensional, good for lists\nMatrices: Mutable, 2-dimensional, good for linear algebra\nTuples: Immutable, fixed-size, good for grouping related constants",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#basic-comparisons",
    "href": "general/cheatsheet-julia.html#basic-comparisons",
    "title": "Julia Syntax Cheatsheet",
    "section": "Basic Comparisons",
    "text": "Basic Comparisons\n\n# Comparison operators\nx == y    # Equal to\nx != y    # Not equal to\nx &lt; y     # Less than\nx &gt; y     # Greater than\nx &lt;= y    # Less than or equal to\nx &gt;= y    # Greater than or equal to\n\n# Examples\npassword_correct = (input == \"secret123\")\nis_adult = (age &gt;= 18)\ncan_afford = (price &lt;= budget)",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#logical-operators",
    "href": "general/cheatsheet-julia.html#logical-operators",
    "title": "Julia Syntax Cheatsheet",
    "section": "Logical Operators",
    "text": "Logical Operators\n\n# AND operator (&&)\ncan_buy = (age &gt;= 18) && (money &gt;= price)    # Both conditions must be true\n\n# OR operator (||)\nneed_coat = (temp &lt; 10) || is_raining        # At least one must be true\n\n# NOT operator (!)\nis_closed = !is_open                         # Inverts boolean value",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#chained-comparisons",
    "href": "general/cheatsheet-julia.html#chained-comparisons",
    "title": "Julia Syntax Cheatsheet",
    "section": "Chained Comparisons",
    "text": "Chained Comparisons\n\n# Instead of\nx &gt;= 0 && x &lt;= 10    # Check if x is between 0 and 10\n\n# You can write\n0 &lt;= x &lt;= 10         # More natural syntax\n\n# Real-world examples\nnormal_temp = 36.5 &lt;= body_temp &lt;= 37.5\nwork_hours = 9 &lt;= current_hour &lt; 17",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-1",
    "href": "general/cheatsheet-julia.html#key-points-1",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nComparisons return boolean values (true or false)\n&& requires all conditions to be true\n|| requires at least one condition to be true\n! inverts a boolean value\nChained comparisons make range checks more readable",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#for-loops",
    "href": "general/cheatsheet-julia.html#for-loops",
    "title": "Julia Syntax Cheatsheet",
    "section": "For Loops",
    "text": "For Loops\n\n# Basic for loop with range\nfor i in 1:3\n    println(i)        # Prints 1, 2, 3\nend\n\n# Iterating over array\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits\n    println(fruit)    # Prints each fruit\nend\n\n# For loop with break\nfor x in 1:10\n    if x == 4\n        break        # Exits loop when x is 4\n    end\nend\n\n# For loop with conditions\nfor x in 1:10\n    if x &lt;= 2\n        println(x)\n    elseif x == 3\n        println(\"Three!\")\n    else\n        break\n    end\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#while-loops",
    "href": "general/cheatsheet-julia.html#while-loops",
    "title": "Julia Syntax Cheatsheet",
    "section": "While Loops",
    "text": "While Loops\n\n# Basic while loop\nnumber = 10\nwhile number &gt;= 5\n    number -= 1      # Decrements until &lt; 5\nend\n\n# Infinite loop with break\ncurrent = 0\nwhile true\n    current += 1\n    if current == 5\n        break        # Exits when condition met\n    end\nend\n\n# While loop with condition\nlives = 3\nwhile lives &gt; 0\n    lives -= 1       # Continues until lives = 0\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#nested-loops",
    "href": "general/cheatsheet-julia.html#nested-loops",
    "title": "Julia Syntax Cheatsheet",
    "section": "Nested Loops",
    "text": "Nested Loops\n\n# Nested loop example\nsizes = [\"S\", \"M\", \"L\"]\ncolors = [\"Red\", \"Blue\"]\nfor size in sizes\n    for color in colors\n        println(\"$color $size\")\n    end\nend\n\n# Matrix iteration\nfor i in 1:3\n    for j in 1:2\n        println(\"Position: $i,$j\")\n    end\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#list-comprehensions",
    "href": "general/cheatsheet-julia.html#list-comprehensions",
    "title": "Julia Syntax Cheatsheet",
    "section": "List Comprehensions",
    "text": "List Comprehensions\n\n# Basic list comprehension\nsquares = [n^2 for n in 1:5]    # [1,4,9,16,25]\n\n# With condition\nevens = [n for n in 1:10 if n % 2 == 0]    # [2,4,6,8,10]\n\n# Nested comprehension\nmatrix = [i*j for i in 1:3, j in 1:3]    # 3x3 multiplication table",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-2",
    "href": "general/cheatsheet-julia.html#key-points-2",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nfor loops are best when you know the number of iterations\nwhile loops are useful for unknown iteration counts\nUse break to exit loops early\nList comprehensions offer concise array creation\nNested loops are useful for multi-dimensional iteration",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#basic-dictionary-operations",
    "href": "general/cheatsheet-julia.html#basic-dictionary-operations",
    "title": "Julia Syntax Cheatsheet",
    "section": "Basic Dictionary Operations",
    "text": "Basic Dictionary Operations\n\n# Create a dictionary\nstudent_ids = Dict(\n    \"Elio\" =&gt; 1001,\n    \"Bob\" =&gt; 1002,\n    \"Yola\" =&gt; 1003\n)\n\n# Access values\nid = student_ids[\"Elio\"]        # Get value by key\nstudent_ids[\"David\"] = 1004     # Add new key-value pair\ndelete!(student_ids, \"Bob\")     # Remove entry\n\n# Check key existence\nif haskey(student_ids, \"Eve\")\n    println(student_ids[\"Eve\"])\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#advanced-operations",
    "href": "general/cheatsheet-julia.html#advanced-operations",
    "title": "Julia Syntax Cheatsheet",
    "section": "Advanced Operations",
    "text": "Advanced Operations\n\n# Dictionary with array values\ngrades = Dict(\n    \"Elio\" =&gt; [85, 92, 78],\n    \"Bob\" =&gt; [76, 88, 94]\n)\n\n# Get all keys and values\nnames = keys(grades)          # Get all keys\nscores = values(grades)       # Get all values\n\n# Iterate over dictionary\nfor (student, grade_list) in grades\n    avg = sum(grade_list) / length(grade_list)\n    println(\"$student: $avg\")\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#common-methods",
    "href": "general/cheatsheet-julia.html#common-methods",
    "title": "Julia Syntax Cheatsheet",
    "section": "Common Methods",
    "text": "Common Methods\n\n# Dictionary methods\nlength(dict)           # Number of entries\nempty!(dict)           # Remove all entries\nget(dict, key, default)# Get value or default if key missing\nmerge(dict1, dict2)    # Combine two dictionaries\ncopy(dict)             # Create shallow copy",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-3",
    "href": "general/cheatsheet-julia.html#key-points-3",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nKeys must be unique\nValues can be of any type (including arrays)\nUse haskey() to safely check for key existence\nDictionaries are mutable (can be changed)\nKeys are accessed with square brackets dict[\"key\"]",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#basic-function-definition",
    "href": "general/cheatsheet-julia.html#basic-function-definition",
    "title": "Julia Syntax Cheatsheet",
    "section": "Basic Function Definition",
    "text": "Basic Function Definition\n\n# Basic function with explicit return\nfunction say_hello(name)\n    return \"Hello, $(name)!\"\nend\n\n# Function with implicit return\nfunction multiply(a, b)\n    a * b    # Last expression is automatically returned\nend\n\n# Conditional return\nfunction do_something(a, b)\n    if a &gt; b\n        return a * b\n    else\n        return a + b\n    end\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#function-scope",
    "href": "general/cheatsheet-julia.html#function-scope",
    "title": "Julia Syntax Cheatsheet",
    "section": "Function Scope",
    "text": "Function Scope\n\n# Local scope example\nfunction bake_cake()\n    secret_ingredient = \"vanilla\"    # Only exists inside function\n    return secret_ingredient        # Must return to access outside\nend\n\n# Variables outside function not accessible inside\nglobal_var = 10\nfunction scope_example()\n    # Can read global_var but can't modify it\n    return global_var + 5\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#multiple-dispatch",
    "href": "general/cheatsheet-julia.html#multiple-dispatch",
    "title": "Julia Syntax Cheatsheet",
    "section": "Multiple Dispatch",
    "text": "Multiple Dispatch\n\n# Generic operation for all types\nfunction operation(a, b)\n    \"Generic operation for $(typeof(a)) and $(typeof(b))\"\nend\n\n# Type-specific implementations\noperation(a::Number, b::Number) = a + b        # For numbers\noperation(a::String, b::String) = string(a, b) # For strings\n\n# Usage examples\noperation(10, 20)          # Returns 30\noperation(\"Hello\", \"!\")    # Returns \"Hello!\"\noperation(\"Hi\", 42)        # Uses generic operation",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-4",
    "href": "general/cheatsheet-julia.html#key-points-4",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nFunctions can have explicit or implicit returns\nLast expression is automatically returned if no return statement\nVariables inside functions are local by default\nMultiple dispatch allows different behavior based on argument types\nUse return for early exits or conditional",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#basic-package-operations",
    "href": "general/cheatsheet-julia.html#basic-package-operations",
    "title": "Julia Syntax Cheatsheet",
    "section": "Basic Package Operations",
    "text": "Basic Package Operations\n\n# Import package manager\nimport Pkg              # Access as Pkg.function()\nusing Pkg              # Import all exported names\n\n# Add packages\nPkg.add(\"DataFrames\")  # Add single package\nPkg.add([\"Package1\", \"Package2\"])  # Add multiple packages\n\n# Update packages\nPkg.update()           # Update all packages\nPkg.update(\"DataFrames\")  # Update specific package\n\n# Remove packages\nPkg.rm(\"DataFrames\")   # Remove package",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#package-usage",
    "href": "general/cheatsheet-julia.html#package-usage",
    "title": "Julia Syntax Cheatsheet",
    "section": "Package Usage",
    "text": "Package Usage\n\n# Import packages\nimport DataFrames     # Access as DataFrames.function()\nusing DataFrames     # Import all exported names\n\n# Check installed packages\nPkg.status()         # List all installed packages",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#environment-management",
    "href": "general/cheatsheet-julia.html#environment-management",
    "title": "Julia Syntax Cheatsheet",
    "section": "Environment Management",
    "text": "Environment Management\n\n# Environment operations\nPkg.activate(\"new_environment\")    # Create/activate environment\nPkg.activate()                     # Activate default environment\n\n# Project files\n# Project.toml    - Lists direct dependencies\n# Manifest.toml   - Complete dependency graph",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-5",
    "href": "general/cheatsheet-julia.html#key-points-5",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nUse import for namespace control, using for direct access\nAlways update packages regularly with Pkg.update()\nCreate separate environments for different projects\nProject.toml and Manifest.toml track dependencies\nPackage manager commands typically run in REPL",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#creating-dataframes",
    "href": "general/cheatsheet-julia.html#creating-dataframes",
    "title": "Julia Syntax Cheatsheet",
    "section": "Creating DataFrames",
    "text": "Creating DataFrames\n\nusing DataFrames\n\n# Basic DataFrame creation\ndf = DataFrame(\n    Name = [\"John\", \"Mike\", \"Frank\"],\n    Age = [28, 23, 37],\n    Salary = [50000, 62000, 90000]\n)\n\n# Empty DataFrame with specified columns\ndf_empty = DataFrame(\n    Name = String[],\n    Age = Int[]\n)",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#accessing-and-modifying-data",
    "href": "general/cheatsheet-julia.html#accessing-and-modifying-data",
    "title": "Julia Syntax Cheatsheet",
    "section": "Accessing and Modifying Data",
    "text": "Accessing and Modifying Data\n\n# Access columns\nages = df.Age                # Get Age column\nfirst_name = df.Name[1]      # First name in Name column\n\n# Modify values\ndf.Salary[1] = 59000        # Update John's salary\ndf.NewColumn = zeros(3)     # Add new column\n\n# Access multiple columns\nsubset = df[:, [:Name, :Age]]  # Select specific columns\nrow = df[1, :]                 # Select first row",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#filtering-data",
    "href": "general/cheatsheet-julia.html#filtering-data",
    "title": "Julia Syntax Cheatsheet",
    "section": "Filtering Data",
    "text": "Filtering Data\n\n# Filter with boolean indexing\nhigh_earners = df[df.Salary .&gt; 60000, :]\n\n# Using filter function\nhigh_earners = filter(row -&gt; row.Salary &gt; 60000, df)\n\n# Multiple conditions\nsenior_high_earners = df[(df.Age .&gt; 30) .& (df.Salary .&gt; 60000), :]",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#data-manipulation",
    "href": "general/cheatsheet-julia.html#data-manipulation",
    "title": "Julia Syntax Cheatsheet",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\n# Sort DataFrame\nsorted_df = sort(df, :Age)               # Sort by Age\nsorted_df = sort(df, [:Age, :Salary])    # Sort by multiple columns\n\n# Add calculated column\ndf.Bonus = [row.Age &gt; 30 ? row.Salary * 0.1 : row.Salary * 0.05 for row in eachrow(df)]\n\n# Iterate over rows\nfor row in eachrow(df)\n    println(\"$(row.Name): $(row.Age) years old\")\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-functions",
    "href": "general/cheatsheet-julia.html#key-functions",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Functions",
    "text": "Key Functions\n\nnrow(df)              # Number of rows\nncol(df)              # Number of columns\nnames(df)             # Column names\ndescribe(df)          # Summary statistics\npush!(df, row)        # Add new row\nselect(df, :Name)     # Select columns",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-6",
    "href": "general/cheatsheet-julia.html#key-points-6",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nColumn access with dot notation (df.column)\nUse eachrow() for row iteration\nBoolean indexing for filtering\npush! to add new rows\nBroadcasting with dot operators (.&gt;, .+, etc.)",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#delimitedfiles-operations",
    "href": "general/cheatsheet-julia.html#delimitedfiles-operations",
    "title": "Julia Syntax Cheatsheet",
    "section": "DelimitedFiles Operations",
    "text": "DelimitedFiles Operations\n\nusing DelimitedFiles\n\n# Write matrix to CSV\ndata = [1 2 3; 4 5 6]\nwritedlm(\"data.csv\", data, ',')      # Write with comma delimiter\nwritedlm(\"data.txt\", data, '\\t')     # Write with tab delimiter\n\n# Read delimited files\nmatrix = readdlm(\"data.csv\", ',')    # Read CSV file\nmatrix = readdlm(\"data.txt\", '\\t')   # Read tab-delimited file",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#csv-and-dataframe-operations",
    "href": "general/cheatsheet-julia.html#csv-and-dataframe-operations",
    "title": "Julia Syntax Cheatsheet",
    "section": "CSV and DataFrame Operations",
    "text": "CSV and DataFrame Operations\n\nusing CSV, DataFrames\n\n# Write DataFrame to CSV\ndf = DataFrame(\n    Name = [\"John\", \"Alice\"],\n    Age = [25, 30]\n)\nCSV.write(\"data.csv\", df)            # Basic write\nCSV.write(\"data.csv\", df,            # Write with options\n    delim = ';',                     # Custom delimiter\n    header = false                   # No header\n)\n\n# Read CSV to DataFrame\ndf = CSV.read(\"data.csv\", DataFrame)           # Basic read\ndf = CSV.read(\"data.csv\", DataFrame,           # Read with options\n    delim = ';',                               # Custom delimiter\n    header = [\"Col1\", \"Col2\"]                  # Custom headers\n)",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#file-path-management",
    "href": "general/cheatsheet-julia.html#file-path-management",
    "title": "Julia Syntax Cheatsheet",
    "section": "File Path Management",
    "text": "File Path Management\n\n# Get current directory\n@__DIR__                             # Directory of current file\npwd()                                # Current working directory\n\n# Path operations\npath = joinpath(@__DIR__, \"data\")    # Join path components\nmkdir(path)                          # Create directory\nisfile(path)                         # Check if file exists",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-7",
    "href": "general/cheatsheet-julia.html#key-points-7",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nUse DelimitedFiles for simple matrix I/O\nCSV package for advanced DataFrame I/O\nAlways use @__DIR__ for relative paths\nCheck file existence before operations\nConsider using try-catch for file operations",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#basic-plots",
    "href": "general/cheatsheet-julia.html#basic-plots",
    "title": "Julia Syntax Cheatsheet",
    "section": "Basic Plots",
    "text": "Basic Plots\n\nusing Plots, StatsPlots\n\n# Line plot\nplot(x, y,\n    title=\"Line Plot\",\n    xlabel=\"X Label\",\n    ylabel=\"Y Label\",\n    legend=false\n)\n\n# Scatter plot\nscatter(x, y,\n    title=\"Scatter Plot\",\n    marker=(:circle, 8)\n)\n\n# Bar plot\nbar(categories, values,\n    title=\"Bar Plot\"\n)\n\n# Histogram\nhistogram(data,\n    bins=30,\n    title=\"Histogram\"\n)\n\n# Box plot\nboxplot(group, values,\n    title=\"Box Plot\"\n)",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#plot-customization",
    "href": "general/cheatsheet-julia.html#plot-customization",
    "title": "Julia Syntax Cheatsheet",
    "section": "Plot Customization",
    "text": "Plot Customization\n\n# Customize plot appearance\nplot(x, y,\n    title=\"Custom Plot\",\n    line=(:dash, 2),      # Line style and width\n    color=:red,           # Line color\n    marker=(:circle, 8),  # Marker style and size\n    label=\"Data Series\"   # Legend label\n)\n\n# Multiple series\nplot(x, y1, label=\"Series 1\")\nplot!(x, y2, label=\"Series 2\")  # Add to existing plot",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#saving-plots",
    "href": "general/cheatsheet-julia.html#saving-plots",
    "title": "Julia Syntax Cheatsheet",
    "section": "Saving Plots",
    "text": "Saving Plots\n\n# Save plot to file\nsavefig(plot_name, \"path/plot.png\")  # Save as PNG\nsavefig(plot_name, \"path/plot.pdf\")  # Save as PDF\nsavefig(plot_name, \"path/plot.svg\")  # Save as SVG",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#common-options",
    "href": "general/cheatsheet-julia.html#common-options",
    "title": "Julia Syntax Cheatsheet",
    "section": "Common Options",
    "text": "Common Options\n\n# Plot options\nplot(\n    legend=true/false,    # Show/hide legend\n    grid=true/false,      # Show/hide grid\n    size=(width,height),  # Plot dimensions\n    dpi=300              # Resolution\n)\n\n# Line styles\n:solid, :dash, :dot\n\n# Colors\n:red, :blue, :green\n\n# Markers\n:circle, :square, :diamond",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-8",
    "href": "general/cheatsheet-julia.html#key-points-8",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nUse plot() for new plots, plot!() to add to existing\nCustomize with named arguments\nSave plots in various formats\nStatsPlots extends plotting capabilities\nMultiple series can share one plot",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Applied Optimization with Julia!",
    "section": "",
    "text": "Course Description\nIn this module, we explore the application of optimization techniques to solve real-world problems. Over the course of the semester, you’ll learn about various optimization challenges that have been tackled by the Institute of Logistics, Transport, and Production in collaboration with industry partners.\nThese practical problems include optimizing the sustainability of parcel delivery companies, ensuring corona-compliant crowd management at stadiums and theaters, and designing efficient district layouts for police authorities – to name just a few examples.\nThe module is structured around one lecture and one exercise per week. During exercises, you’ll work in groups with fellow students to program and solve small-scale problems. Bonus points are available for these exercises, which can contribute to your final exam grade at the end of the semester.\n\n\nLearning Outcomes\nYou can find our specific outcomes in the module handbook. Our broader goal is to introduce you to how diversified the solution of practical problems can be. We want to enable you to independently apply methods and concepts from optimization, and to get a feeling for abstracting and modeling problems.\nIs our module hard? That’s a subjective question. We would say it is exciting and doable. If you have a basic interest in logical relationships and mathematics, you are in the right place. If you also have basic knowledge of programming or want to get into the subject with help, our module is perfect for you.\nUpon completion of the course, you …\n\ncan implement solutions to complex optimization problems in Julia\nknow advanced concepts of optimization such as linear and nonlinear optimization\nknow basic concepts of programming and algorithms such as loops, functions\nwill be able to read and write code in Julia\nwill have experience working with Julia libraries such as JuMP and HiGHS\nwill know how to collaborate in a small team to find solutions for problems at hand\n\nPlease note that this course is specifically designed for business students. That is, it is not required to have any advanced knowledge or experience in programming to attend this course. The teaching format will make it possible to account for different levels of programming skills such that every student can take the most out of the course.\n\n\nCourse Blocks\nThe core content of the course is organized in three blocks:\n\nPart I: Introduction to Julia and Modelling\nPart II: Applied Optimization with Basic Models\nPart III: Applied Optimization with Advanced Models\n\nYou can find more information on the course blocks and the corresponding lectures in the syllabus.\n\n\nTutorials\nThe tutorials accompany the lectures. In the tutorials, you will apply the concepts from the lectures to realistic data sets. You will work in small groups of 3 participants, in which you can work out solutions together. We will help you during the weekly practice sessions by answering your questions or briefly explaining individual issues in case of difficulties. Afterwards, you have the opportunity to submit your jointly developed solution until the next exercise date in order to earn bonus points for the exam. You can earn up to half a bonus point per exercise, up to 6.0 bonus points in total. Important: the bonus points will only be credited to you if you pass the exam with at least a 4.0. Furthermore, we will not award bonus points for exercises in which you have simply copied the results of another group.\n\n\nHow to see the slides\n\nThis course is based on Quarto\nIt uses revealjs to render the slides\nYou find the slides for each lecture in the corresponding lecture\nTo see the slides, click on RevealJS in the top right side in the lecture\n\n\n\nQuestions\nIf you have any questions regarding the course, please contact me under tobias.vlcek@uni-hamburg.de.\n\n\nContributors\nThanks to Matthes Koch and Justus Bonz, who helped to prepare the lecture materials.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html",
    "href": "general/cheatsheet-jump.html",
    "title": "JuMP Syntax Cheatsheet",
    "section": "",
    "text": "using JuMP, HiGHS\n\n# Create a model\nmodel = Model(HiGHS.Optimizer)\n\n# Set optimizer attribute (optional)\nset_optimizer_attribute(model, \"time_limit\", 60.0)",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#declaration",
    "href": "general/cheatsheet-jump.html#declaration",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Declaration",
    "text": "Declaration\n\n# Continuous Variables\n@variable(model, x)                    # Unbounded continuous\n@variable(model, x &gt;= 0)              # Non-negative continuous\n@variable(model, 0 &lt;= x &lt;= 10)        # Bounded continuous\n\n# Integer Variables\n@variable(model, x, Int)              # Unbounded integer\n@variable(model, x &gt;= 0, Int)         # Non-negative integer\n@variable(model, 0 &lt;= x &lt;= 10, Int)   # Bounded integer\n\n# Binary Variables\n@variable(model, x, Bin)              # Binary (0 or 1)",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#containers",
    "href": "general/cheatsheet-jump.html#containers",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Containers",
    "text": "Containers\n\n# Arrays\n@variable(model, x[1:5])              # Array of 5 variables\n@variable(model, x[1:5] &gt;= 0)         # Non-negative array\n@variable(model, x[1:5], Bin)         # Binary array\n\n# Matrices\n@variable(model, x[1:3, 1:4])         # 3x4 matrix of variables\n@variable(model, x[1:3, 1:4], Int)    # Integer matrix\n\n# Custom Indexing\nindices = [\"A\", \"B\", \"C\"]\n@variable(model, x[i in indices])      # Custom indexed array",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#declaration-1",
    "href": "general/cheatsheet-jump.html#declaration-1",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Declaration",
    "text": "Declaration\n\n# Basic constraints\n@constraint(model, con1, 2x + y &lt;= 10)\n@constraint(model, con2, x + 2y &gt;= 5)",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#containers-1",
    "href": "general/cheatsheet-jump.html#containers-1",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Containers",
    "text": "Containers\n\n# Array of variables\n@variable(model, x[1:5] &gt;= 0)\n\n# Constraint for each variable\n@constraint(model, capacity[i=1:5],\n    x[i] &lt;= 100\n)\n\n# Sum constraint\n@constraint(model, total_sum,\n    sum(x[i] for i in 1:5) &lt;= 500\n)\n\n# Matrix constraints\n@variable(model, y[1:3, 1:4])\n@constraint(model, matrix_con[i=1:3, j=1:4],\n    y[i,j] &lt;= i + j\n)",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#conditional",
    "href": "general/cheatsheet-jump.html#conditional",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Conditional",
    "text": "Conditional\n\n# Basic conditional constraint\n@constraint(model, cond[i=1:5; i &gt; 2],\n    x[i] &lt;= 10\n)   # Only applies when i &gt; 2\n\n# Multiple conditions\n@constraint(model, cond2[i=1:10, j=1:10; i != j && i + j &lt;= 15],\n    x[i,j] + x[j,i] &lt;= 1\n)",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#conditions-while-summing",
    "href": "general/cheatsheet-jump.html#conditions-while-summing",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Conditions while Summing",
    "text": "Conditions while Summing\n\n@constraint(model, total_sum,\n    sum(x[i] for i in 1:5 if i &gt; 2) &lt;= 500\n)\n# Only sums over i &gt; 2\n\n@constraint(model, total_sum2,\n    sum(x[i,j] for i in 1:5, j in 1:5 if i != j && i + j &lt;= 7) &lt;= 1\n)\n# Only sums over i != j and i + j &lt;= 7",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#key-points-for-constraints",
    "href": "general/cheatsheet-jump.html#key-points-for-constraints",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Key Points for Constraints",
    "text": "Key Points for Constraints\n\nUse semicolon (;) to separate indices from conditions\nConditions can use any valid Julia boolean expression\nMultiple conditions can be combined with && (and) or || (or)",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#declaration-2",
    "href": "general/cheatsheet-jump.html#declaration-2",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Declaration",
    "text": "Declaration\n\n# Maximize objective\n@objective(model, Max, 5x + 3y)\n\n# Minimize objective\n@objective(model, Min, 2x + 4y)",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#containers-2",
    "href": "general/cheatsheet-jump.html#containers-2",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Containers",
    "text": "Containers\n\n# Container objective\n@variable(model, z[1:10])\n@objective(model, Min, sum(z[i] for i in 1:10))\n\n# Weighted objective\nweights = [1, 2, 3, 4, 5]\n@objective(model, Max,\n    sum(weights[i] * z[i] for i in 1:5)\n)",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#key-points",
    "href": "general/cheatsheet-jump.html#key-points",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nObjective functions can be linear or nonlinear\nContainers are useful for weighted objectives\nCan reference external data (parameters)",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#checking-bounds",
    "href": "general/cheatsheet-jump.html#checking-bounds",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Checking Bounds",
    "text": "Checking Bounds\n\n# Checking bounds\nhas_lower_bound(x)                    # Check if lower bound exists\nhas_upper_bound(x)                    # Check if upper bound exists\nlower_bound(x)                        # Get lower bound value\nupper_bound(x)                        # Get upper bound value",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#checking-properties",
    "href": "general/cheatsheet-jump.html#checking-properties",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Checking Properties",
    "text": "Checking Properties\n\n# Check variable type\nis_binary(x)                          # Is variable binary?\nis_integer(x)                         # Is variable integer?\nis_continuous(x)                      # Is variable continuous?\n\n# Get variable info\nname(x)                              # Get variable name\nnum_variables(model)                 # Count variables in model\nall_variables(model)                 # Get all variables",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#solution-status-checks",
    "href": "general/cheatsheet-jump.html#solution-status-checks",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Solution Status Checks",
    "text": "Solution Status Checks\n\n# Check solution status\nstatus = termination_status(model)    # Get solution status\nis_optimal = status == MOI.OPTIMAL    # Check if optimal\n\n# Get detailed status\nprimal_status(model)                  # Primal solution status\ndual_status(model)                    # Dual solution status\nsolve_time(model)                     # Solution time\n\n# Common status checks\nif termination_status(model) == OPTIMAL\n    println(\"Solution is optimal\")\nelseif termination_status(model) == TIME_LIMIT && has_values(model)\n    println(\"Time limit reached with feasible solution\")\nelse\n    println(\"Problem could not be solved\")\nend",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#key-points-1",
    "href": "general/cheatsheet-jump.html#key-points-1",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nAlways check solution status before using results\nSet appropriate time limits for large problems\nUse gap tolerances to balance precision and speed\nMonitor solve time for performance optimization\nConsider presolve for complex problems",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/literature.html",
    "href": "general/literature.html",
    "title": "Literature and Resources",
    "section": "",
    "text": "This section provides a curated list of books and resources to enhance your understanding of mathematical Modelling, Julia programming and related topics. Each recommendation includes a brief description to help you choose the most suitable resources for you.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books",
    "href": "general/literature.html#books",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\n\nThis book is great for beginners and covers Julia programming in a comprehensive manner.\n\nKwon, C. (2019). Julia programming for operations research (Second edition). Changhyun Kwon. Link to the free book website.\n\nThis book is a fantastic ressource for students interested in Julia and Operations Research and covers a variety of topics.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources",
    "href": "general/literature.html#resources",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nJulia Documentation\n\nThe official Julia documentation is an good starting point to understand the language’s features and syntax.\n\nJuMP Documentation\n\nThe official documentation of JuMP is a great resource for understanding optimization modeling in Julia, covering everything from simple linear models to advanced nonlinear and mixed-integer problems.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-1",
    "href": "general/literature.html#books-1",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nWilke, C. (2019). Fundamentals of data visualization: A primer on making informative and compelling figures (First edition). O’Reilly Media.\n\nA book that is highly recommended to understand the principles of data visualization and how to create effective visualizations.\nLink to the free book website\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\nA fantasticbook to understand the principles of software development and how to create effective software.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources-1",
    "href": "general/literature.html#resources-1",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nQuarto\n\nA static website generator that is very powerful and flexible. Used to create the slides and the website for the course.\n\nCursor\n\nA code editor based on VS Code that is very powerful and flexible. It uses AI to help you write code.\n\nJupyter\n\nA web application that allows you to create and share documents that contain code, equations, visualizations and text. It is very popular in the field of data science and academia and also part of Quarto.\n\nAdvent of Code\n\nA wonderful website with daily challenges during the christmas time. Highly recommended to playfully improve your skills.\n\nGithub\n\nThe largest provider for git repositories owned by Microsoft. A lot of open source projects are hosted here and you can read the code.\n\nCodewars\n\nA platform to improve your coding skills by solving challenges. You can compete with others, see how other people solved the challenges and read and learn from the code.\n\nDaily Dose of Data Science\n\nA website and a newsletter with lots of easy-to-digest resources to improve your skills in Data Science.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/syllabus.html",
    "href": "general/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Julia and to mathematical modelling is provided. Students will learn the Julia syntax, data types, as well as how to implement loops and functions in Julia. We will introduce core Julia libraries, too, including JuMP and DataFrames. Once these concepts are understood, we will learn how they can be used to solve problems.\n\n\n\nWelcome and Introduction (I)\nIntroduction to the course and mathematical modelling\nFirst Steps in Julia (II)\nVectors, matrices, basic operations loops and functions\nPackages and Data Management (III)\nPackage Management, DataFrames, reading and writing data\nModelling with JuMP (IV)\nModeling with JuMP with variables, parameters and constraints",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#introduction-to-julia-and-modelling",
    "href": "general/syllabus.html#introduction-to-julia-and-modelling",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Julia and to mathematical modelling is provided. Students will learn the Julia syntax, data types, as well as how to implement loops and functions in Julia. We will introduce core Julia libraries, too, including JuMP and DataFrames. Once these concepts are understood, we will learn how they can be used to solve problems.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures",
    "href": "general/syllabus.html#lectures",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome and Introduction (I)\nIntroduction to the course and mathematical modelling\nFirst Steps in Julia (II)\nVectors, matrices, basic operations loops and functions\nPackages and Data Management (III)\nPackage Management, DataFrames, reading and writing data\nModelling with JuMP (IV)\nModeling with JuMP with variables, parameters and constraints",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#applied-optimization-with-basic-models",
    "href": "general/syllabus.html#applied-optimization-with-basic-models",
    "title": "Syllabus",
    "section": "Applied Optimization with Basic Models",
    "text": "Applied Optimization with Basic Models\nIn the second part, we will cover applied optimization based on basic modelling concepts. We will start with the classic capacitated lot-sizing problem and learn how to model and solve it using JuMP.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures-1",
    "href": "general/syllabus.html#lectures-1",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nProduction Planning in Breweries (V)\nA case study on beer brewing based on the classic capacitated lot-sizing problem\nMinimizing Split Orders in E-Commerce (VI)\nA case study in E-Commerce based on a quadratic knapsack problem\nPeriodic Library Routing (VII)\nA case study on routing books to branches based on a capacitated vehicle routing problem\nPolice Districting (VIII)\nA case study on police districting based on a facility location problem",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#applied-optimization-with-advanced-models",
    "href": "general/syllabus.html#applied-optimization-with-advanced-models",
    "title": "Syllabus",
    "section": "Applied Optimization with Advanced Models",
    "text": "Applied Optimization with Advanced Models\nIn the third part, we will cover more advanced optimisation models and concepts. We will start by looking into three different applied optimisation problems in crowd safety.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures-2",
    "href": "general/syllabus.html#lectures-2",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nSafety Planning for the Islamic Pilgrimage in Mecca (IX)\nA case study on safety planning for the hajj pilgrimage based on time-dependent network flows\nIntermission: Exam Preparation (X)\nWe will prepare for the exam by solving a set of exercises together in the lecture.\nArena Seat Planning under Distancing Rules (XI)\nA case study on arena seat planning under distancing rules based on the 2-dimensional knapsack problem\nPassenger Flow Control in Urban Rail (XII)\nA case study on passenger flow control in urban rail based on time-dependent network flows\nRecap and Discussion (XIII)\nWe repeat the concepts from the course and discuss all your remaining questions",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html",
    "href": "lectures/lecture-02-firststeps.html",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "To prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia.\n\n\n\n\n\nHead to julialang.org and follow the instructions.\n\n. . .\n\n\n\n\n\n\nIf you are ever asked to add something to your “PATH”, do so!\n\n\n\n\n\n\n\n\nNext, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS\n\n\n\n\n\nHead to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release\n\n\n\n\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”\n\n\n\n\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”\n\n\n\n\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nDon’t worry if it is not running right away. We will fix this together!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#download-and-install-julia",
    "href": "lectures/lecture-02-firststeps.html#download-and-install-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "To prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia.",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#installing-julia",
    "href": "lectures/lecture-02-firststeps.html#installing-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Head to julialang.org and follow the instructions.\n\n. . .\n\n\n\n\n\n\nIf you are ever asked to add something to your “PATH”, do so!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#vs-code",
    "href": "lectures/lecture-02-firststeps.html#vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Next, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#installing-vs-code",
    "href": "lectures/lecture-02-firststeps.html#installing-vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Head to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#verify-the-installation",
    "href": "lectures/lecture-02-firststeps.html#verify-the-installation",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Start the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#create-a-new-file",
    "href": "lectures/lecture-02-firststeps.html#create-a-new-file",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Create a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#everything-working",
    "href": "lectures/lecture-02-firststeps.html#everything-working",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "If the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nDon’t worry if it is not running right away. We will fix this together!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#julia-as-a-programming-language",
    "href": "lectures/lecture-02-firststeps.html#julia-as-a-programming-language",
    "title": "Lecture II - First Steps in Julia",
    "section": "Julia as a Programming Language",
    "text": "Julia as a Programming Language\n\nFollowing three lectures are dedicated to learning the basics\nStart with the very basics and gradually move on\nFocus in the first two lectures on the programming language\nThird lecture dedicated to Mathematical Optimization",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#notebooks-in-vs-code",
    "href": "lectures/lecture-02-firststeps.html#notebooks-in-vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "Notebooks in VS Code",
    "text": "Notebooks in VS Code\n\nThe easiest way is by using VS Code\nInstall the Jupyter Extension\nNow, you can open .ipynb files\nHere you can run the code in the cells",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#downloading-the-notebooks",
    "href": "lectures/lecture-02-firststeps.html#downloading-the-notebooks",
    "title": "Lecture II - First Steps in Julia",
    "section": "Downloading the Notebooks",
    "text": "Downloading the Notebooks\n\nYou will find the tutorial notebooks next to the tutorial pages\nOn each page, you will find a button Jupyter on the right\nClick it to download the notebook and save it\nI’d recommend storing the notebooks in a separate directory for this course",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#learning-by-doing",
    "href": "lectures/lecture-02-firststeps.html#learning-by-doing",
    "title": "Lecture II - First Steps in Julia",
    "section": "Learning by doing",
    "text": "Learning by doing\n\nThe best way to learn a programming language is by doing\nWe will therefore solve problems the coming weeks\nThe goal is to get you familiar with the language\nYou can discuss the problems with your fellow students\nYou can hand in your solutions to receive bonus points!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#ijulia",
    "href": "lectures/lecture-02-firststeps.html#ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "IJulia",
    "text": "IJulia\n\nIJulia is an interface between Julia and Jupyter Notebooks\nPopular tool for data analysis and visualization\nYou can use IJulia to run Julia code in the notebooks\n\n. . .\n\n\n\n\n\n\nYou can also copy and paste code from the notebooks into your IDE!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#installing-ijulia",
    "href": "lectures/lecture-02-firststeps.html#installing-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installing IJulia",
    "text": "Installing IJulia\n\nOpen the VS Code IDE and start a terminal\nStart Julia by typing julia in the terminal\nInstall IJulia by typing ] to open the package manager\nInstall IJulia by typing add IJulia\nPress Enter",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#running-ijulia",
    "href": "lectures/lecture-02-firststeps.html#running-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Running IJulia",
    "text": "Running IJulia\nusing IJulia; notebook()\n\nStart IJulia by typing the above code in the Julia prompt\nThis will open a new browser window\nYou can now run code in the notebooks\n\n. . .\n\n\n\n\n\n\nYou can also run the notebooks in VS Code, if you prefer!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#submission-of-assignments-1",
    "href": "lectures/lecture-02-firststeps.html#submission-of-assignments-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Submission of Assignments",
    "text": "Submission of Assignments\n\nYou can work in groups of up to three people\nSubmit the assignment via OpenOlat\nYou will submit your assignment by uploading a notebook\nThe assignment is due the day before the next tutorial\n\n. . .\n\n\n\n\n\n\nDon’t forget to save your notebook before uploading it to OpenOlat!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#grading-of-assignments",
    "href": "lectures/lecture-02-firststeps.html#grading-of-assignments",
    "title": "Lecture II - First Steps in Julia",
    "section": "Grading of Assignments",
    "text": "Grading of Assignments\n\nEach assignment is worth 0.5 points\nYou can get a maximum of 6.0 points from the assignments\nThe points will be added to your exam points\nYou need to pass the exam first, to receive any bonus points!\n\n. . .\n\n\n\n\n\n\nThe assignments are not mandatory, but highly recommended!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#topics-of-the-tutorials",
    "href": "lectures/lecture-02-firststeps.html#topics-of-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nVariables: Learn how to assign values to variables\nVectors: Learn how to create and manipulate vectors\nComparisons: Learn how to compare values\nLoops: Learn how to use loops to repeat code\nScope: Learn about the scope of variables",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#get-started-with-the-tutorials",
    "href": "lectures/lecture-02-firststeps.html#get-started-with-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload the first notebook and open it\nStart with the first problem and solve it step by step\nYou can find the tutorials here on the website\nYou can ask questions anytime!\n\n. . .\n\n\n\n\n\n\nNoteAnd that’s it for this lecture!\n\n\n\nThe remaining time we will already start working on the first problems.",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-firststeps.html#literature-1",
    "href": "lectures/lecture-02-firststeps.html#literature-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#download-and-install-julia",
    "href": "lectures/lecture-02-presentation.html#download-and-install-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Download and Install Julia",
    "text": "Download and Install Julia\n\nTo prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia."
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#installing-julia",
    "href": "lectures/lecture-02-presentation.html#installing-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installing Julia",
    "text": "Installing Julia\n\n\nHead to julialang.org and follow the instructions.\n\n\n\n\n\n\n\n\nIf you are ever asked to add something to your “PATH”, do so!"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#vs-code",
    "href": "lectures/lecture-02-presentation.html#vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "VS Code",
    "text": "VS Code\n\n\nNext, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#installing-vs-code",
    "href": "lectures/lecture-02-presentation.html#installing-vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installing VS Code",
    "text": "Installing VS Code\n\nHead to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#verify-the-installation",
    "href": "lectures/lecture-02-presentation.html#verify-the-installation",
    "title": "Lecture II - First Steps in Julia",
    "section": "Verify the Installation",
    "text": "Verify the Installation\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#create-a-new-file",
    "href": "lectures/lecture-02-presentation.html#create-a-new-file",
    "title": "Lecture II - First Steps in Julia",
    "section": "Create a new file",
    "text": "Create a new file\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\n\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#everything-working",
    "href": "lectures/lecture-02-presentation.html#everything-working",
    "title": "Lecture II - First Steps in Julia",
    "section": "Everything working?",
    "text": "Everything working?\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nDon’t worry if it is not running right away. We will fix this together!"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#julia-as-a-programming-language",
    "href": "lectures/lecture-02-presentation.html#julia-as-a-programming-language",
    "title": "Lecture II - First Steps in Julia",
    "section": "Julia as a Programming Language",
    "text": "Julia as a Programming Language\n\nFollowing three lectures are dedicated to learning the basics\nStart with the very basics and gradually move on\nFocus in the first two lectures on the programming language\nThird lecture dedicated to Mathematical Optimization"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#notebooks-in-vs-code",
    "href": "lectures/lecture-02-presentation.html#notebooks-in-vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "Notebooks in VS Code",
    "text": "Notebooks in VS Code\n\nThe easiest way is by using VS Code\nInstall the Jupyter Extension\nNow, you can open .ipynb files\nHere you can run the code in the cells"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#downloading-the-notebooks",
    "href": "lectures/lecture-02-presentation.html#downloading-the-notebooks",
    "title": "Lecture II - First Steps in Julia",
    "section": "Downloading the Notebooks",
    "text": "Downloading the Notebooks\n\nYou will find the tutorial notebooks next to the tutorial pages\nOn each page, you will find a button Jupyter on the right\nClick it to download the notebook and save it\nI’d recommend storing the notebooks in a separate directory for this course"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#learning-by-doing",
    "href": "lectures/lecture-02-presentation.html#learning-by-doing",
    "title": "Lecture II - First Steps in Julia",
    "section": "Learning by doing",
    "text": "Learning by doing\n\nThe best way to learn a programming language is by doing\nWe will therefore solve problems the coming weeks\nThe goal is to get you familiar with the language\nYou can discuss the problems with your fellow students\nYou can hand in your solutions to receive bonus points!"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#ijulia",
    "href": "lectures/lecture-02-presentation.html#ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "IJulia",
    "text": "IJulia\n\nIJulia is an interface between Julia and Jupyter Notebooks\nPopular tool for data analysis and visualization\nYou can use IJulia to run Julia code in the notebooks\n\n\n\n\n\n\n\n\nYou can also copy and paste code from the notebooks into your IDE!"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#installing-ijulia",
    "href": "lectures/lecture-02-presentation.html#installing-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installing IJulia",
    "text": "Installing IJulia\n\nOpen the VS Code IDE and start a terminal\nStart Julia by typing julia in the terminal\nInstall IJulia by typing ] to open the package manager\nInstall IJulia by typing add IJulia\nPress Enter"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#running-ijulia",
    "href": "lectures/lecture-02-presentation.html#running-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Running IJulia",
    "text": "Running IJulia\nusing IJulia; notebook()\n\nStart IJulia by typing the above code in the Julia prompt\nThis will open a new browser window\nYou can now run code in the notebooks\n\n\n\n\n\n\n\n\nYou can also run the notebooks in VS Code, if you prefer!"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#submission-of-assignments-1",
    "href": "lectures/lecture-02-presentation.html#submission-of-assignments-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Submission of Assignments",
    "text": "Submission of Assignments\n\nYou can work in groups of up to three people\nSubmit the assignment via OpenOlat\nYou will submit your assignment by uploading a notebook\nThe assignment is due the day before the next tutorial\n\n\n\n\n\n\n\n\nDon’t forget to save your notebook before uploading it to OpenOlat!"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#grading-of-assignments",
    "href": "lectures/lecture-02-presentation.html#grading-of-assignments",
    "title": "Lecture II - First Steps in Julia",
    "section": "Grading of Assignments",
    "text": "Grading of Assignments\n\nEach assignment is worth 0.5 points\nYou can get a maximum of 6.0 points from the assignments\nThe points will be added to your exam points\nYou need to pass the exam first, to receive any bonus points!\n\n\n\n\n\n\n\n\nThe assignments are not mandatory, but highly recommended!"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#topics-of-the-tutorials",
    "href": "lectures/lecture-02-presentation.html#topics-of-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nVariables: Learn how to assign values to variables\nVectors: Learn how to create and manipulate vectors\nComparisons: Learn how to compare values\nLoops: Learn how to use loops to repeat code\nScope: Learn about the scope of variables"
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#get-started-with-the-tutorials",
    "href": "lectures/lecture-02-presentation.html#get-started-with-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload the first notebook and open it\nStart with the first problem and solve it step by step\nYou can find the tutorials here on the website\nYou can ask questions anytime!\n\n\n\n\n\n\n\n\nAnd that’s it for this lecture!\n\n\nThe remaining time we will already start working on the first problems."
  },
  {
    "objectID": "lectures/lecture-02-presentation.html#literature-1",
    "href": "lectures/lecture-02-presentation.html#literature-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lecture-04-jump.html",
    "href": "lectures/lecture-04-jump.html",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "Functions are reusable blocks of code\nDefine functions using the function keyword\nFunctions can take arguments and return values\nUse return to specify the output of a function\n\n. . .\n\n\n\n\n\n\nYou can create anonymous functions using the -&gt; syntax for quick, one-off operations.\n\n\n\n\n\n\n\nPackages extend Julia’s functionality\nUse using Pkg to access package management\nInstall packages with Pkg.add(\"PackageName\")\nImport packages with using PackageName or import PackageName\n\n\n\n\n\nDataFrames are used for working with tabular data\nCreate DataFrames using the DataFrame constructor\nAccess columns using dot notation or square brackets\nPerform operations on columns and rows\n\n. . .\n\n\n\n\n\n\nUse describe(df) to get a quick summary of your DataFrame.\n\n\n\n\n\n\n\nIO operations allow reading from and writing to files\nReading and writing CSV files can be done with the CSV package\nUse CSV.read() to read a CSV file into a DataFrame\nUse CSV.write() to write a DataFrame to a CSV file\n\n\n\n\n\nPlotting in Julia is done through packages like Plots.jl\nCreate basic plots with functions like plot(), scatter(), bar()\nCustomize plots with attributes like title, xlabel, ylabel\n\n. . .\n\n\n\n\n\n\nExplore different plot types and in the long term even backends for various output formats and interactivity.\n\n\n\n\n\n\n\nThe tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-04-jump.html#functions",
    "href": "lectures/lecture-04-jump.html#functions",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "Functions are reusable blocks of code\nDefine functions using the function keyword\nFunctions can take arguments and return values\nUse return to specify the output of a function\n\n. . .\n\n\n\n\n\n\nYou can create anonymous functions using the -&gt; syntax for quick, one-off operations.",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-04-jump.html#packages",
    "href": "lectures/lecture-04-jump.html#packages",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "Packages extend Julia’s functionality\nUse using Pkg to access package management\nInstall packages with Pkg.add(\"PackageName\")\nImport packages with using PackageName or import PackageName",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-04-jump.html#dataframes",
    "href": "lectures/lecture-04-jump.html#dataframes",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "DataFrames are used for working with tabular data\nCreate DataFrames using the DataFrame constructor\nAccess columns using dot notation or square brackets\nPerform operations on columns and rows\n\n. . .\n\n\n\n\n\n\nUse describe(df) to get a quick summary of your DataFrame.",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-04-jump.html#inputoutput-io",
    "href": "lectures/lecture-04-jump.html#inputoutput-io",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "IO operations allow reading from and writing to files\nReading and writing CSV files can be done with the CSV package\nUse CSV.read() to read a CSV file into a DataFrame\nUse CSV.write() to write a DataFrame to a CSV file",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-04-jump.html#plots",
    "href": "lectures/lecture-04-jump.html#plots",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "Plotting in Julia is done through packages like Plots.jl\nCreate basic plots with functions like plot(), scatter(), bar()\nCustomize plots with attributes like title, xlabel, ylabel\n\n. . .\n\n\n\n\n\n\nExplore different plot types and in the long term even backends for various output formats and interactivity.",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-04-jump.html#solutions-from-last-week",
    "href": "lectures/lecture-04-jump.html#solutions-from-last-week",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "The tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-04-jump.html#topics-of-the-tutorials",
    "href": "lectures/lecture-04-jump.html#topics-of-the-tutorials",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nJuMP: Learn how to use JuMP to define optimization problems\nVariable Bounds: Learn how to set variable bounds\nConstrains: Learn how to add constraints to your model\nAdvanced Modeling: Learn how to model more complex problems\nTransport Problem: Learn how to solve a transportation problem",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-04-jump.html#get-started-with-the-tutorials",
    "href": "lectures/lecture-04-jump.html#get-started-with-the-tutorials",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload this weeks tutorials and start with the first one\nRemember, you can ask questions anytime!\n\n. . .\n\n\n\n\n\n\nNoteAnd that’s it for this lecture!\n\n\n\nThe remaining time we will already start working on the problems of the fourth lecture. From next week, we will start with different optimizations problems and topics, that we address together in the course.",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-04-jump.html#literature-1",
    "href": "lectures/lecture-04-jump.html#literature-1",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-04-presentation.html#functions",
    "href": "lectures/lecture-04-presentation.html#functions",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Functions",
    "text": "Functions\n\nFunctions are reusable blocks of code\nDefine functions using the function keyword\nFunctions can take arguments and return values\nUse return to specify the output of a function\n\n\n\n\n\n\n\n\nYou can create anonymous functions using the -&gt; syntax for quick, one-off operations."
  },
  {
    "objectID": "lectures/lecture-04-presentation.html#packages",
    "href": "lectures/lecture-04-presentation.html#packages",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Packages",
    "text": "Packages\n\nPackages extend Julia’s functionality\nUse using Pkg to access package management\nInstall packages with Pkg.add(\"PackageName\")\nImport packages with using PackageName or import PackageName"
  },
  {
    "objectID": "lectures/lecture-04-presentation.html#dataframes",
    "href": "lectures/lecture-04-presentation.html#dataframes",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "DataFrames",
    "text": "DataFrames\n\nDataFrames are used for working with tabular data\nCreate DataFrames using the DataFrame constructor\nAccess columns using dot notation or square brackets\nPerform operations on columns and rows\n\n\n\n\n\n\n\n\nUse describe(df) to get a quick summary of your DataFrame."
  },
  {
    "objectID": "lectures/lecture-04-presentation.html#inputoutput-io",
    "href": "lectures/lecture-04-presentation.html#inputoutput-io",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Input/Output (IO)",
    "text": "Input/Output (IO)\n\nIO operations allow reading from and writing to files\nReading and writing CSV files can be done with the CSV package\nUse CSV.read() to read a CSV file into a DataFrame\nUse CSV.write() to write a DataFrame to a CSV file"
  },
  {
    "objectID": "lectures/lecture-04-presentation.html#plots",
    "href": "lectures/lecture-04-presentation.html#plots",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Plots",
    "text": "Plots\n\nPlotting in Julia is done through packages like Plots.jl\nCreate basic plots with functions like plot(), scatter(), bar()\nCustomize plots with attributes like title, xlabel, ylabel\n\n\n\n\n\n\n\n\nExplore different plot types and in the long term even backends for various output formats and interactivity."
  },
  {
    "objectID": "lectures/lecture-04-presentation.html#solutions-from-last-week",
    "href": "lectures/lecture-04-presentation.html#solutions-from-last-week",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Solutions from last Week",
    "text": "Solutions from last Week\n\nThe tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n\n\n\n\n\n\n\nYou can ask questions anytime in class or via email!"
  },
  {
    "objectID": "lectures/lecture-04-presentation.html#topics-of-the-tutorials",
    "href": "lectures/lecture-04-presentation.html#topics-of-the-tutorials",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nJuMP: Learn how to use JuMP to define optimization problems\nVariable Bounds: Learn how to set variable bounds\nConstrains: Learn how to add constraints to your model\nAdvanced Modeling: Learn how to model more complex problems\nTransport Problem: Learn how to solve a transportation problem"
  },
  {
    "objectID": "lectures/lecture-04-presentation.html#get-started-with-the-tutorials",
    "href": "lectures/lecture-04-presentation.html#get-started-with-the-tutorials",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload this weeks tutorials and start with the first one\nRemember, you can ask questions anytime!\n\n\n\n\n\n\n\n\nAnd that’s it for this lecture!\n\n\nThe remaining time we will already start working on the problems of the fourth lecture. From next week, we will start with different optimizations problems and topics, that we address together in the course."
  },
  {
    "objectID": "lectures/lecture-04-presentation.html#literature-1",
    "href": "lectures/lecture-04-presentation.html#literature-1",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html",
    "href": "lectures/lecture-06-ordersplit.html",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Question: What are current trends in e-commerce?\n\n\n\n\n\n\n\nE-Commerce sales are growing fast:\n\nProducts are no longer bound between borders\nProduct variety is rising\nConsumer shopping patterns are shifting \nBrick-and-mortar stores loose customers to the internet\nCovid-19 accelerated this trend even more\n\n\n\n\n\n\nThe number of parcels is rising:\n\n2014: 44 billion parcels (Pitney Bowes Inc. 2017)\n2019: 103 billion parcels (Pitney Bowes Inc. 2019)\n2026: 220 – 262 billion parcels 1 (Pitney Bowes Inc. 2020)\n\n\n\n\n\n\n\n\n\n\nConsumers nowadays expect free and fast deliveries and returns\nExisting warehouses have to store an increasing range of products\nBetter customer service requires faster deliveries\nIncurred fulfillment costs depend on the number of parcels\n\n\n\n\n\n\n\n\n\n\n\nEach parcel packaging consumes resources during production\nEvery dispatched parcel to the customer causes CO₂ emissions\nIn case of returns, more parcels cause more emissions",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#e-commerce-trends",
    "href": "lectures/lecture-06-ordersplit.html#e-commerce-trends",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Question: What are current trends in e-commerce?",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#e-commerce-sales",
    "href": "lectures/lecture-06-ordersplit.html#e-commerce-sales",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "E-Commerce sales are growing fast:\n\nProducts are no longer bound between borders\nProduct variety is rising\nConsumer shopping patterns are shifting \nBrick-and-mortar stores loose customers to the internet\nCovid-19 accelerated this trend even more",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#parcels-worldwide",
    "href": "lectures/lecture-06-ordersplit.html#parcels-worldwide",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "The number of parcels is rising:\n\n2014: 44 billion parcels (Pitney Bowes Inc. 2017)\n2019: 103 billion parcels (Pitney Bowes Inc. 2019)\n2026: 220 – 262 billion parcels 1 (Pitney Bowes Inc. 2020)",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#pressure-on-infrastructure",
    "href": "lectures/lecture-06-ordersplit.html#pressure-on-infrastructure",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Consumers nowadays expect free and fast deliveries and returns\nExisting warehouses have to store an increasing range of products\nBetter customer service requires faster deliveries\nIncurred fulfillment costs depend on the number of parcels",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#pressure-on-the-environment",
    "href": "lectures/lecture-06-ordersplit.html#pressure-on-the-environment",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Each parcel packaging consumes resources during production\nEvery dispatched parcel to the customer causes CO₂ emissions\nIn case of returns, more parcels cause more emissions",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#split-order",
    "href": "lectures/lecture-06-ordersplit.html#split-order",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Split Order",
    "text": "Split Order\nQuestion: What is a split order?\n. . .",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#no-split-order",
    "href": "lectures/lecture-06-ordersplit.html#no-split-order",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "No Split Order",
    "text": "No Split Order",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#reason-for-split-orders",
    "href": "lectures/lecture-06-ordersplit.html#reason-for-split-orders",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Reason for Split Orders",
    "text": "Reason for Split Orders\nQuestion: Why might they occur?\n. . .\n\nStock availability: Some products are out of stock at a warehouse and need to be fulfilled from another warehouse\nCapacity constraints: Some products are stored at different warehouses and need to be shipped from elsewhere",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#impact-of-split-orders",
    "href": "lectures/lecture-06-ordersplit.html#impact-of-split-orders",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Impact of Split Orders",
    "text": "Impact of Split Orders\nQuestion: What are the consequences?\n. . .\n\nHigher shipping costs\nIncreased packaging material\nMore CO₂ emissions\nHigher operational complexity\nLower customer satisfaction",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#mitigations",
    "href": "lectures/lecture-06-ordersplit.html#mitigations",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Mitigations?",
    "text": "Mitigations?\nQuestion: What are possible mitigations?\n. . .\n\nConsolidation: Ship to a central warehouse before dispatch\nCross-docking: Ship directly from supplier to customer\nTransshipment: Ship between warehouses before delivery\nCo-allocation: Predict co-appearance of products and allocate them to the same warehouse",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#case-study",
    "href": "lectures/lecture-06-ordersplit.html#case-study",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Case Study",
    "text": "Case Study\n\nKey information about the case:\n\na large European e-commerce retailer\nthe retailer has two warehouses\nproduct range cannot be stored in either warehouse\nproduct deliveries can be made to both warehouses\nproducts do not have to be stored exclusively",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#optimizing-co-allocation",
    "href": "lectures/lecture-06-ordersplit.html#optimizing-co-allocation",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Optimizing Co-allocation",
    "text": "Optimizing Co-allocation\n\n\n\n\nQuestion: What could be our objective?\n\nWe aim to improve the SKU2-warehouse allocation to minimize the number of split parcels resulting from SKUs being stored in different warehouses.",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#available-sets",
    "href": "lectures/lecture-06-ordersplit.html#available-sets",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Available Sets",
    "text": "Available Sets\nQuestion: What could be the sets here?\n. . .\n\n\n\\(\\mathcal{I}\\) - Set of products indexed by \\(i \\in \\{1,2,...,|\\mathcal{I}|\\}\\)\n\\(\\mathcal{K}\\) - Set of warehouses indexed by \\(k \\in \\{1,\\dots,|\\mathcal{K}|\\}\\)\n\\(\\mathcal{M}\\) - Set of customer orders \\(m \\in \\{1,2,...,|\\mathcal{M}|\\}\\)",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#available-parameters",
    "href": "lectures/lecture-06-ordersplit.html#available-parameters",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Available Parameters",
    "text": "Available Parameters\nQuestion: What are possible parameters?\n. . .\n\n\n\\(c_k\\) - Storage space of warehouse \\(k \\in \\{1,\\dots,|\\mathcal{K}|\\}\\)\n\\(\\boldsymbol{T}= (t_{m,i})\\) - Past customer orders for SKUs\n\n\n. . .\nQuestion: What could the transactional data look like?",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#transactional-data",
    "href": "lectures/lecture-06-ordersplit.html#transactional-data",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Transactional Data",
    "text": "Transactional Data\n\nExample of \\(\\boldsymbol{T}\\)\n\n\n\\(t_{m,i}\\)\nA\nB\nC\nD\n\n\n\n\n1\n1\n1\n1\n0\n\n\n2\n1\n1\n1\n0\n\n\n3\n1\n1\n0\n0\n\n\n4\n1\n0\n0\n1\n\n\n5\n1\n0\n0\n1\n\n\n6\n1\n0\n0\n1\n\n\n7\n1\n0\n0\n1\n\n\n8\n0\n0\n1\n1",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#past-vs.-future",
    "href": "lectures/lecture-06-ordersplit.html#past-vs.-future",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Past vs. Future",
    "text": "Past vs. Future\n\nThe transactional data \\(\\boldsymbol{T}\\) is based on past orders\nIt is a binary matrix of customer orders and SKUs\nWe use this data to assume future co-occurrence\n\nPast co-occurrence predicts future co-occurrence\n\n\n. . .\nQuestion: What is your opinion on the assumption?",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#split-order-minimization",
    "href": "lectures/lecture-06-ordersplit.html#split-order-minimization",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Split-Order Minimization",
    "text": "Split-Order Minimization\nQuestion: What could be our decision variable/s?\n. . .\n\n\n\n\n\n\nNoteWe have the following sets:\n\n\n\n\n\\(\\mathcal{I}\\) - Set of products indexed by \\(i \\in \\{1,2,...,|\\mathcal{I}|\\}\\)\n\\(\\mathcal{K}\\) - Set of warehouses indexed by \\(k \\in \\{1,\\dots,|\\mathcal{K}|\\}\\)\n\\(\\mathcal{M}\\) - Set of customer orders \\(m \\in \\{1,2,...,|\\mathcal{M}|\\}\\)\n\n\n\n. . .\n\n\\(X_{i,k}\\) - 1, if \\(i\\in\\mathcal{I}\\) is stored in \\(k\\in\\mathcal{K}\\), 0 otherwise\n\\(Y_{m,i,k}\\) - 1, if SKU \\(i\\in\\mathcal{I}\\) is shipped from warehouse \\(k\\in\\mathcal{K}\\) for customer order \\(m\\in\\mathcal{M}\\), 0 otherwise",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#integer-programming-model",
    "href": "lectures/lecture-06-ordersplit.html#integer-programming-model",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Integer Programming Model",
    "text": "Integer Programming Model\n\nCatalán and Fisher (2012) created an integer model\nNumber of SKUs of E-Commerce retailers can easily be between 10,000 - 100,000\nNumber of customer orders necessary for “stable” results have to be higher in the order of 100,000 - 10,000,000\n\n. . .\nQuestion: Anybody an idea what this could mean?",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#implementation-challenges",
    "href": "lectures/lecture-06-ordersplit.html#implementation-challenges",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Implementation Challenges",
    "text": "Implementation Challenges\n\nSmall instance with 10 SKUs and 1000 customer orders\nCPLEX 20.1.0 needs 3100 seconds to solve the problem\nComputation times scales exponentially\n\\(\\rightarrow\\) Not applicable in real world applications!",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#section",
    "href": "lectures/lecture-06-ordersplit.html#section",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Any idea what\ncould be done?",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#heuristic-approach",
    "href": "lectures/lecture-06-ordersplit.html#heuristic-approach",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Heuristic Approach",
    "text": "Heuristic Approach\n\nHeuristic: Fast, but not necessarily optimal\nApproximation: Not guaranteed to be optimal, but close\nComputational Effort: Reasonable even for large instances\n\n. . .\n\n\n\n\n\n\nTipDifferent view on the problem\n\n\n\nFocus on the warehouses and the co-appearance of SKUs! Discard the exact information about the customer orders.",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#objective",
    "href": "lectures/lecture-06-ordersplit.html#objective",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Objective",
    "text": "Objective\n\n\n\n\nQuestion: What could be the objective?\nMaximize the coappearance of products that are often part of the same customer orders.",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#transaction-matrix",
    "href": "lectures/lecture-06-ordersplit.html#transaction-matrix",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Transaction Matrix",
    "text": "Transaction Matrix\n\nT = [\n    1 1 1 0;\n    1 1 1 0;\n    1 1 0 0;\n    1 0 0 1;\n    1 0 0 1;\n    1 0 0 1;\n    1 0 0 1;\n    0 0 1 1\n]\n\n# Create the coappearance matrix\nQ = T' * T\nprintln(\"Coappearance matrix Q:\")\ndisplay(Q)\n\nCoappearance matrix Q:\n\n\n4×4 Matrix{Int64}:\n 7  3  2  4\n 3  3  2  0\n 2  2  3  1\n 4  0  1  5",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#coappearance-matrix",
    "href": "lectures/lecture-06-ordersplit.html#coappearance-matrix",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Coappearance Matrix",
    "text": "Coappearance Matrix\n\n\\(\\boldsymbol{Q}\\) is a symmetric matrix\nProposed by Catalán and Fisher (2012)\n\\(\\boldsymbol{Q} = (\\boldsymbol{T}^T \\cdot \\boldsymbol{T})\\) where \\(\\boldsymbol{Q} = (q_{ij})_{i \\in \\{1,\\dots,\\mathcal{I}\\},j \\in \\{1,\\dots,\\mathcal{I}\\}}\\)\n\\(q_{ij}\\) shows how often \\(i\\) and \\(j\\) appear in the same order\n\n. . .\nQuestion: What do the principal diagonal values tell us?\n. . .\n\nHow often each SKU appeared over all orders (binary!)",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#how-to-approach-the-problem",
    "href": "lectures/lecture-06-ordersplit.html#how-to-approach-the-problem",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "How to approach the problem?",
    "text": "How to approach the problem?\n\n\nGreedy Heuristic3: Allocation based on matrix\nMathematical Model4: Maximizes coappearance\nGRASP5: Good on small instances\nNew: Max. coappearance with non-linear solver\nNew: Heuristic based on Chi-Square Tests",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#basic-setting",
    "href": "lectures/lecture-06-ordersplit.html#basic-setting",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Basic Setting",
    "text": "Basic Setting",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#available-data-version-2",
    "href": "lectures/lecture-06-ordersplit.html#available-data-version-2",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Available Data (Version 2)",
    "text": "Available Data (Version 2)\nQuestion: What could be the sets?\n. . .\n\n\\(\\mathcal{I}\\) - Set of products indexed by \\(i \\in \\{1,2,...,|\\mathcal{I}|\\}\\)\n\\(\\mathcal{K}\\) - Set of warehouses indexed by \\(k \\in \\{1,\\dots,|\\mathcal{K}|\\}\\)\n\n. . .\n\n\n\n\n\n\nImportantNo customer order information is needed!\n\n\n\nWe can focus on the SKUs and the warehouses, making the problem much smaller!",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#available-parameters-1",
    "href": "lectures/lecture-06-ordersplit.html#available-parameters-1",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Available Parameters",
    "text": "Available Parameters\nQuestion: What are possible parameters?\n\n\n\\(c_k\\) - Storage space of warehouse \\(k \\in \\{1,\\dots,|\\mathcal{K}|\\}\\)\n\\(\\boldsymbol{Q}= (q_{ij})_{i \\in \\{1,\\dots,\\mathcal{I}\\},j \\in \\{1,\\dots,\\mathcal{I}\\}}\\) - Coappearance matrix\n\n\n. . .\n\n\n\n\n\n\nImportantTransactional Data replaced\n\n\n\nInstead of the transactional data, we just use the coappearance matrix in our model!",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#decision-variables",
    "href": "lectures/lecture-06-ordersplit.html#decision-variables",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Decision Variables?",
    "text": "Decision Variables?\n\n\n\n\n\n\nNoteWe have the following sets:\n\n\n\n\n\\(\\mathcal{I}\\) - Set of products indexed by \\(i \\in \\{1,2,...,|\\mathcal{I}|\\}\\)\n\\(\\mathcal{K}\\) - Set of warehouses indexed by \\(k \\in \\{1,\\dots,|\\mathcal{K}|\\}\\)\n\n\n\n. . .\n\n\n\n\n\n\nImportantOur objective is to:\n\n\n\nMaximize the coappearance of products that are often part of the same customer orders. In more mathematical terms: Maximize the sum of all unique pair-wise values \\(q_{i,j}\\) of all SKUs stored in the same warehouse.\n\n\n. . .\nQuestion: What could be our decision variable/s?",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#decision-variables-1",
    "href": "lectures/lecture-06-ordersplit.html#decision-variables-1",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Decision Variables",
    "text": "Decision Variables\n\n\\(X_{i,k}\\) - 1, if SKU \\(i\\in\\mathcal{I}\\) is stored in \\(k\\in\\mathcal{K}\\), 0 otherwise\n\n. . .\n\n\n\n\n\n\nImportantOnly one variable per SKU and warehouse!\n\n\n\nAs we don’t need the customer order information, we only need to make a decision for each SKU and warehouse pair!",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#decision-variable-in-julia",
    "href": "lectures/lecture-06-ordersplit.html#decision-variable-in-julia",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Decision Variable in Julia",
    "text": "Decision Variable in Julia\nQuestion: How could we formulate the variable in Julia?\n\nimport Pkg; Pkg.add(\"SCIP\")\nusing JuMP, SCIP # SCIP is a non-commercial MIQCP solver\n\nwarehouses = [\"Hamburg\", \"Berlin\"] # Add warehouses as a vector\nskus = [\"Smartphone\", \"Socks\", \"Charger\"] # Add SKUs as a vector\n\nwarehouse_model = Model(SCIP.Optimizer)\n\n. . .\n\n@variable(warehouse_model, X[i in skus, k in warehouses], Bin)\n\n2-dimensional DenseAxisArray{VariableRef,2,...} with index sets:\n    Dimension 1, [\"Smartphone\", \"Socks\", \"Charger\"]\n    Dimension 2, [\"Hamburg\", \"Berlin\"]\nAnd data, a 3×2 Matrix{VariableRef}:\n X[Smartphone,Hamburg]  X[Smartphone,Berlin]\n X[Socks,Hamburg]       X[Socks,Berlin]\n X[Charger,Hamburg]     X[Charger,Berlin]",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#objective-function",
    "href": "lectures/lecture-06-ordersplit.html#objective-function",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Objective Function",
    "text": "Objective Function\n\n\n\n\n\n\nNoteWe need the following:\n\n\n\n\n\\(X_{i,k}\\) - 1, if SKU \\(i\\in\\mathcal{I}\\) is stored in \\(k\\in\\mathcal{K}\\), 0 otherwise\n\\(q_{ij}\\) - Coappearance of SKU \\(i\\in\\mathcal{I}\\) and \\(j\\in\\mathcal{I}\\)\n\n\n\n\n\n\n\n\n\nImportantOur objective is to:\n\n\n\nMaximize the sum of all unique pair-wise values \\(q_{i,j}\\) of all SKUs stored in the same warehouse. Note, that this is a quadratic objective function!\n\n\n. . .\nQuestion: What could the objective function look like?\n. . .",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#quadratic-objective-function",
    "href": "lectures/lecture-06-ordersplit.html#quadratic-objective-function",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Quadratic Objective Function",
    "text": "Quadratic Objective Function\n\\[\\text{maximize} \\quad \\sum_{i=2}^{\\mathcal{I}} \\sum_{j=1}^{i-1} \\sum_{k \\in \\mathcal{K}} X_{ik}\\times X_{jk} \\times q_{ij}\\]\n. . .\n\n\n\n\n\n\nNoteThis is a quadratic objective function!\n\n\n\nThe quadratic terms are \\(X_{ik}\\times X_{jk}\\). This objective function is based on the Quadratic Multiple Knapsack Problem (QMKP), formulated by Hiley and Julstrom (2006).",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#objective-function-in-julia",
    "href": "lectures/lecture-06-ordersplit.html#objective-function-in-julia",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Objective Function in Julia",
    "text": "Objective Function in Julia\nQuestion: How could we formulate this in Julia?\n. . .\n\nQ = [2 1 2; 1 2 1; 2 1 2]\n\n@objective(warehouse_model,\n    Max,\n    sum(\n        X[skus[i], warehouses[k]] * X[skus[j], warehouses[k]] * Q[i,j]\n        for i in 2:length(skus)\n        for j in 1:i-1\n        for k in 1:length(warehouses)\n    )\n)\n\n$ X_{Socks,Hamburg}X_{Smartphone,Hamburg} + X_{Socks,Berlin}X_{Smartphone,Berlin} + 2 X_{Charger,Hamburg}X_{Smartphone,Hamburg} + 2 X_{Charger,Berlin}X_{Smartphone,Berlin} + X_{Charger,Hamburg}X_{Socks,Hamburg} + X_{Charger,Berlin}X_{Socks,Berlin} $",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#what-constraints",
    "href": "lectures/lecture-06-ordersplit.html#what-constraints",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "What constraints?",
    "text": "What constraints?\n\n\n\n\nQuestion: What constraints?\n\n\nAllocate each SKU at least once\nWarehouses have a finite capacity\nCapacity is not exceeded",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#single-allocation-constraint",
    "href": "lectures/lecture-06-ordersplit.html#single-allocation-constraint",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Single Allocation Constraint?",
    "text": "Single Allocation Constraint?\n\n\n\n\n\n\nImportantThe goal of this constraint is to:\n\n\n\nEnsure that each SKU is allocated at least once.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following variable:\n\n\n\n\n\\(X_{i,k}\\) - 1, if SKU \\(i\\in\\mathcal{I}\\) is stored in \\(k\\in\\mathcal{K}\\), 0 otherwise\n\n\n\n. . .\nQuestion: What could the constraint look like?",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#single-allocation-constraint-1",
    "href": "lectures/lecture-06-ordersplit.html#single-allocation-constraint-1",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Single Allocation Constraint",
    "text": "Single Allocation Constraint\n\\[\\sum_{k \\in \\mathcal{K}} X_{ik} \\geq 1 \\quad \\forall i \\in \\mathcal{I}\\]\n. . .\n\n\n\n\n\n\nNoteRemember, this is the variable:\n\n\n\n\n\\(X_{i,k}\\) - 1, if SKU \\(i\\in\\mathcal{I}\\) is stored in \\(k\\in\\mathcal{K}\\), 0 otherwise\n\n\n\n. . .\nQuestion: How could we change the constraint to ensure that each SKU is allocated only once?\n. . .\nQuestion: How could we add the constraint in Julia?",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#single-allocation-in-julia",
    "href": "lectures/lecture-06-ordersplit.html#single-allocation-in-julia",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Single Allocation in Julia",
    "text": "Single Allocation in Julia\n\n@constraint(warehouse_model, single_allocation[i in skus],\n    sum(X[i, k] for k in warehouses) &gt;= 1\n)\n\n1-dimensional DenseAxisArray{ConstraintRef{Model, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.GreaterThan{Float64}}, ScalarShape},1,...} with index sets:\n    Dimension 1, [\"Smartphone\", \"Socks\", \"Charger\"]\nAnd data, a 3-element Vector{ConstraintRef{Model, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.GreaterThan{Float64}}, ScalarShape}}:\n single_allocation[Smartphone] : X[Smartphone,Hamburg] + X[Smartphone,Berlin] ≥ 1\n single_allocation[Socks] : X[Socks,Hamburg] + X[Socks,Berlin] ≥ 1\n single_allocation[Charger] : X[Charger,Hamburg] + X[Charger,Berlin] ≥ 1",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#capacity-constraints",
    "href": "lectures/lecture-06-ordersplit.html#capacity-constraints",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Capacity Constraints?",
    "text": "Capacity Constraints?\n\n\n\n\n\n\nImportantThe goal of these constraints is to:\n\n\n\nEnsure that the capacity of each warehouse is not exceeded.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following variables and parameters:\n\n\n\n\n\\(X_{i,k}\\) - 1, if SKU \\(i\\in\\mathcal{I}\\) is stored in \\(k\\in\\mathcal{K}\\), 0 otherwise\n\\(c_k\\) - Storage space of warehouse \\(k\\in\\mathcal{K}\\)\n\n\n\n. . .\nQuestion: What could the second constraint be?",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#capacity-constraints-1",
    "href": "lectures/lecture-06-ordersplit.html#capacity-constraints-1",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Capacity Constraints",
    "text": "Capacity Constraints\n\\[\\sum_{i \\in \\mathcal{I}} X_{ik} \\leq c_k \\quad \\forall k \\in \\mathcal{K}\\]\n. . .\nAnd that’s basically it!\n. . .\nQuestion: How could we add the second constraint in Julia?",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#capacity-constraints-in-julia",
    "href": "lectures/lecture-06-ordersplit.html#capacity-constraints-in-julia",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Capacity Constraints in Julia",
    "text": "Capacity Constraints in Julia\n\ncapacities = Dict(\"Hamburg\" =&gt; 2, \"Berlin\" =&gt; 1) # Add capacities\n\n@constraint(warehouse_model, capacity[k in warehouses],\n    sum(X[i, k] for i in skus) &lt;= capacities[k]\n)\n\n1-dimensional DenseAxisArray{ConstraintRef{Model, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, ScalarShape},1,...} with index sets:\n    Dimension 1, [\"Hamburg\", \"Berlin\"]\nAnd data, a 2-element Vector{ConstraintRef{Model, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, ScalarShape}}:\n capacity[Hamburg] : X[Smartphone,Hamburg] + X[Socks,Hamburg] + X[Charger,Hamburg] ≤ 2\n capacity[Berlin] : X[Smartphone,Berlin] + X[Socks,Berlin] + X[Charger,Berlin] ≤ 1",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#qmk-model",
    "href": "lectures/lecture-06-ordersplit.html#qmk-model",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "QMK Model",
    "text": "QMK Model\n\\[\\text{maximize} \\quad \\sum_{i=2}^{\\mathcal{I}} \\sum_{j=1}^{i-1} \\sum_{k \\in \\mathcal{K}} X_{ik}\\times X_{jk} \\times q_{ij}\\]\nsubject to:\n\\[\n\\begin{align*}\n                & \\sum_{k \\in \\mathcal{K}} X_{ik} \\geq 1 && \\forall i \\in \\mathcal{I}\\\\\n                & \\sum_{i \\in \\mathcal{I}} X_{ik} \\leq c_{k} && \\forall k \\in \\mathcal{K}\\\\\n                & X_{ik} \\in \\{0,1\\}  && \\forall i \\in \\mathcal{I}, \\forall k \\in \\mathcal{K}\n\\end{align*}\n\\]",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#qmk-model-in-julia",
    "href": "lectures/lecture-06-ordersplit.html#qmk-model-in-julia",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "QMK Model in Julia",
    "text": "QMK Model in Julia\n\nset_attribute(warehouse_model, \"display/verblevel\", 0) # Hide solver output\noptimize!(warehouse_model)\n\nprintln(\"The optimal objective value is: \", objective_value(warehouse_model))\nprintln(\"The optimal solution is: \", value.(X))\n\nThe optimal objective value is: 2.0\nThe optimal solution is: 2-dimensional DenseAxisArray{Float64,2,...} with index sets:\n    Dimension 1, [\"Smartphone\", \"Socks\", \"Charger\"]\n    Dimension 2, [\"Hamburg\", \"Berlin\"]\nAnd data, a 3×2 Matrix{Float64}:\n  1.0  0.0\n -0.0  1.0\n  1.0  0.0",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#characteristics",
    "href": "lectures/lecture-06-ordersplit.html#characteristics",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Characteristics",
    "text": "Characteristics\n\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domain do we have?\nDo we know the split-orders based on the objective value?\nWhy couldn’t we use HiGHS as solver?",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#choosing-a-solver",
    "href": "lectures/lecture-06-ordersplit.html#choosing-a-solver",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Choosing a solver",
    "text": "Choosing a solver\n\nIdentify problem structure, e.g. LP, MIP, NLP, QCP, MIQCP, …\nWhat is the size of the problem?\nIs a commercial solver needed?\n\n. . .\n\n\n\n\n\n\nNoteCommercial Solvers\n\n\n\nCommercial solvers are faster and more robust as open source solvers but also more expensive. During your studies, you can use most of them for free though! Nonetheless, we will only use open source solvers in this course.",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#global-vs-local-optimality",
    "href": "lectures/lecture-06-ordersplit.html#global-vs-local-optimality",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Global vs Local Optimality",
    "text": "Global vs Local Optimality\n\n\n\nLocal vs Global Optimum by Christoph Roser",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#model-assumptions",
    "href": "lectures/lecture-06-ordersplit.html#model-assumptions",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\n\nWhat assumptions have we made?\nProblem with allocating SKUs to multiple warehouses?\nWhat else might pose a problem in the real world?",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#section-1",
    "href": "lectures/lecture-06-ordersplit.html#section-1",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Can this be\napplied?",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#problem-size-is-crucial",
    "href": "lectures/lecture-06-ordersplit.html#problem-size-is-crucial",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Problem Size is Crucial",
    "text": "Problem Size is Crucial\n\nUp to 10,000 SKUs → commercial solvers\nMore than 10,000 SKUs → heuristics\nFor example, the CHI heuristic\n\n. . .\n\n\n\n\n\n\nNoteCHI-Heuristic\n\n\n\nDetect dependencies between products and allocate them accordingly, as products within orders can have dependencies and products are bought with different frequencies!",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#case-study-1",
    "href": "lectures/lecture-06-ordersplit.html#case-study-1",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Case Study",
    "text": "Case Study\n\nMore than 100,000 SKUs and several millions of orders\nComparison of different heuristics6\n\nCHI: based on Chi-Square tests Vlćek and Voigt (2024)\nGP, GO, GS, BS: based on greedy algorithms (Catalán and Fisher 2012)\nRA: Random allocation of SKUs to warehouses",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#real-data-set",
    "href": "lectures/lecture-06-ordersplit.html#real-data-set",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Real Data Set",
    "text": "Real Data Set",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#conclusion",
    "href": "lectures/lecture-06-ordersplit.html#conclusion",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Conclusion",
    "text": "Conclusion\n\nSplits are of no benefit, except faster customer deliveries\nIncrease workload, packaging and shipping costs\nMathematical Optimisation of “full” problem not solvable\nCHI Heuristic close to mathematical optimisation\n\n\n\n\n\n\n\nNoteAnd that’s it for todays lecture!\n\n\n\nWe now have covered the Quadratic Multiple Knapsack Problem and are ready to start solving some tasks in the upcoming tutorial.",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#section-2",
    "href": "lectures/lecture-06-ordersplit.html#section-2",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#literature-i",
    "href": "lectures/lecture-06-ordersplit.html#literature-i",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-ordersplit.html#footnotes",
    "href": "lectures/lecture-06-ordersplit.html#footnotes",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nForecast, not actual number↩︎\nSKU: Stock Keeping Unit↩︎\nSimple and very fast, Catalán and Fisher (2012)↩︎\nComputationally intensive with CPLEX, Zhu et al. (2021)↩︎\nGreedy Randomized Adaptive Search Procedure, Zhu et al. (2021)↩︎\nQMKP is not applicable for instance in case study↩︎",
    "crumbs": [
      "06 Warehouse",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#e-commerce-trends",
    "href": "lectures/lecture-06-presentation.html#e-commerce-trends",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "E-Commerce Trends",
    "text": "E-Commerce Trends\nQuestion: What are current trends in e-commerce?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#e-commerce-sales",
    "href": "lectures/lecture-06-presentation.html#e-commerce-sales",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "E-Commerce Sales",
    "text": "E-Commerce Sales\n\nE-Commerce sales are growing fast:\n\nProducts are no longer bound between borders\nProduct variety is rising\nConsumer shopping patterns are shifting \nBrick-and-mortar stores loose customers to the internet\nCovid-19 accelerated this trend even more"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#parcels-worldwide",
    "href": "lectures/lecture-06-presentation.html#parcels-worldwide",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Parcels Worldwide",
    "text": "Parcels Worldwide\n\nThe number of parcels is rising:\n\n2014: 44 billion parcels (Pitney Bowes Inc. 2017)\n2019: 103 billion parcels (Pitney Bowes Inc. 2019)\n2026: 220 – 262 billion parcels 1 (Pitney Bowes Inc. 2020)\n\n\nForecast, not actual number"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#pressure-on-infrastructure",
    "href": "lectures/lecture-06-presentation.html#pressure-on-infrastructure",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Pressure on infrastructure",
    "text": "Pressure on infrastructure\n\n\n\n\n\nConsumers nowadays expect free and fast deliveries and returns\nExisting warehouses have to store an increasing range of products\nBetter customer service requires faster deliveries\nIncurred fulfillment costs depend on the number of parcels"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#pressure-on-the-environment",
    "href": "lectures/lecture-06-presentation.html#pressure-on-the-environment",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Pressure on the environment",
    "text": "Pressure on the environment\n\n\n\n\n\nEach parcel packaging consumes resources during production\nEvery dispatched parcel to the customer causes CO₂ emissions\nIn case of returns, more parcels cause more emissions"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#split-order",
    "href": "lectures/lecture-06-presentation.html#split-order",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Split Order",
    "text": "Split Order\nQuestion: What is a split order?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#no-split-order",
    "href": "lectures/lecture-06-presentation.html#no-split-order",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "No Split Order",
    "text": "No Split Order"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#reason-for-split-orders",
    "href": "lectures/lecture-06-presentation.html#reason-for-split-orders",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Reason for Split Orders",
    "text": "Reason for Split Orders\nQuestion: Why might they occur?\n\n\nStock availability: Some products are out of stock at a warehouse and need to be fulfilled from another warehouse\nCapacity constraints: Some products are stored at different warehouses and need to be shipped from elsewhere"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#impact-of-split-orders",
    "href": "lectures/lecture-06-presentation.html#impact-of-split-orders",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Impact of Split Orders",
    "text": "Impact of Split Orders\nQuestion: What are the consequences?\n\n\nHigher shipping costs\nIncreased packaging material\nMore CO₂ emissions\nHigher operational complexity\nLower customer satisfaction"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#mitigations",
    "href": "lectures/lecture-06-presentation.html#mitigations",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Mitigations?",
    "text": "Mitigations?\nQuestion: What are possible mitigations?\n\n\nConsolidation: Ship to a central warehouse before dispatch\nCross-docking: Ship directly from supplier to customer\nTransshipment: Ship between warehouses before delivery\nCo-allocation: Predict co-appearance of products and allocate them to the same warehouse"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#case-study",
    "href": "lectures/lecture-06-presentation.html#case-study",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Case Study",
    "text": "Case Study\n\nKey information about the case:\n\na large European e-commerce retailer\nthe retailer has two warehouses\nproduct range cannot be stored in either warehouse\nproduct deliveries can be made to both warehouses\nproducts do not have to be stored exclusively"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#optimizing-co-allocation",
    "href": "lectures/lecture-06-presentation.html#optimizing-co-allocation",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Optimizing Co-allocation",
    "text": "Optimizing Co-allocation\n\n\n\n\nQuestion: What could be our objective?\n\nWe aim to improve the SKU1-warehouse allocation to minimize the number of split parcels resulting from SKUs being stored in different warehouses.\n\n\nSKU: Stock Keeping Unit"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#available-sets",
    "href": "lectures/lecture-06-presentation.html#available-sets",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Available Sets",
    "text": "Available Sets\nQuestion: What could be the sets here?\n\n\n\\(\\mathcal{I}\\) - Set of products indexed by \\(i \\in \\{1,2,...,|\\mathcal{I}|\\}\\)\n\\(\\mathcal{K}\\) - Set of warehouses indexed by \\(k \\in \\{1,\\dots,|\\mathcal{K}|\\}\\)\n\\(\\mathcal{M}\\) - Set of customer orders \\(m \\in \\{1,2,...,|\\mathcal{M}|\\}\\)"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#available-parameters",
    "href": "lectures/lecture-06-presentation.html#available-parameters",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Available Parameters",
    "text": "Available Parameters\nQuestion: What are possible parameters?\n\n\n\\(c_k\\) - Storage space of warehouse \\(k \\in \\{1,\\dots,|\\mathcal{K}|\\}\\)\n\\(\\boldsymbol{T}= (t_{m,i})\\) - Past customer orders for SKUs\n\n\n\nQuestion: What could the transactional data look like?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#transactional-data",
    "href": "lectures/lecture-06-presentation.html#transactional-data",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Transactional Data",
    "text": "Transactional Data\n\nExample of \\(\\boldsymbol{T}\\)\n\n\n\\(t_{m,i}\\)\nA\nB\nC\nD\n\n\n\n\n1\n1\n1\n1\n0\n\n\n2\n1\n1\n1\n0\n\n\n3\n1\n1\n0\n0\n\n\n4\n1\n0\n0\n1\n\n\n5\n1\n0\n0\n1\n\n\n6\n1\n0\n0\n1\n\n\n7\n1\n0\n0\n1\n\n\n8\n0\n0\n1\n1"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#past-vs.-future",
    "href": "lectures/lecture-06-presentation.html#past-vs.-future",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Past vs. Future",
    "text": "Past vs. Future\n\nThe transactional data \\(\\boldsymbol{T}\\) is based on past orders\nIt is a binary matrix of customer orders and SKUs\nWe use this data to assume future co-occurrence\n\nPast co-occurrence predicts future co-occurrence\n\n\n\nQuestion: What is your opinion on the assumption?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#split-order-minimization",
    "href": "lectures/lecture-06-presentation.html#split-order-minimization",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Split-Order Minimization",
    "text": "Split-Order Minimization\nQuestion: What could be our decision variable/s?\n\n\n\n\n\n\n\nWe have the following sets:\n\n\n\n\\(\\mathcal{I}\\) - Set of products indexed by \\(i \\in \\{1,2,...,|\\mathcal{I}|\\}\\)\n\\(\\mathcal{K}\\) - Set of warehouses indexed by \\(k \\in \\{1,\\dots,|\\mathcal{K}|\\}\\)\n\\(\\mathcal{M}\\) - Set of customer orders \\(m \\in \\{1,2,...,|\\mathcal{M}|\\}\\)\n\n\n\n\n\n\n\n\\(X_{i,k}\\) - 1, if \\(i\\in\\mathcal{I}\\) is stored in \\(k\\in\\mathcal{K}\\), 0 otherwise\n\\(Y_{m,i,k}\\) - 1, if SKU \\(i\\in\\mathcal{I}\\) is shipped from warehouse \\(k\\in\\mathcal{K}\\) for customer order \\(m\\in\\mathcal{M}\\), 0 otherwise"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#integer-programming-model",
    "href": "lectures/lecture-06-presentation.html#integer-programming-model",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Integer Programming Model",
    "text": "Integer Programming Model\n\nCatalán and Fisher (2012) created an integer model\nNumber of SKUs of E-Commerce retailers can easily be between 10,000 - 100,000\nNumber of customer orders necessary for “stable” results have to be higher in the order of 100,000 - 10,000,000\n\n\nQuestion: Anybody an idea what this could mean?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#implementation-challenges",
    "href": "lectures/lecture-06-presentation.html#implementation-challenges",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Implementation Challenges",
    "text": "Implementation Challenges\n\nSmall instance with 10 SKUs and 1000 customer orders\nCPLEX 20.1.0 needs 3100 seconds to solve the problem\nComputation times scales exponentially\n\\(\\rightarrow\\) Not applicable in real world applications!"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#section",
    "href": "lectures/lecture-06-presentation.html#section",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Any idea what\ncould be done?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#heuristic-approach",
    "href": "lectures/lecture-06-presentation.html#heuristic-approach",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Heuristic Approach",
    "text": "Heuristic Approach\n\nHeuristic: Fast, but not necessarily optimal\nApproximation: Not guaranteed to be optimal, but close\nComputational Effort: Reasonable even for large instances\n\n\n\n\n\n\n\n\nDifferent view on the problem\n\n\nFocus on the warehouses and the co-appearance of SKUs! Discard the exact information about the customer orders."
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#objective",
    "href": "lectures/lecture-06-presentation.html#objective",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Objective",
    "text": "Objective\n\n\n\n\nQuestion: What could be the objective?\nMaximize the coappearance of products that are often part of the same customer orders."
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#transaction-matrix",
    "href": "lectures/lecture-06-presentation.html#transaction-matrix",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Transaction Matrix",
    "text": "Transaction Matrix\n\n\nT = [\n    1 1 1 0;\n    1 1 1 0;\n    1 1 0 0;\n    1 0 0 1;\n    1 0 0 1;\n    1 0 0 1;\n    1 0 0 1;\n    0 0 1 1\n]\n\n# Create the coappearance matrix\nQ = T' * T\nprintln(\"Coappearance matrix Q:\")\ndisplay(Q)\n\n\nCoappearance matrix Q:\n\n\n4×4 Matrix{Int64}:\n 7  3  2  4\n 3  3  2  0\n 2  2  3  1\n 4  0  1  5"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#coappearance-matrix",
    "href": "lectures/lecture-06-presentation.html#coappearance-matrix",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Coappearance Matrix",
    "text": "Coappearance Matrix\n\n\\(\\boldsymbol{Q}\\) is a symmetric matrix\nProposed by Catalán and Fisher (2012)\n\\(\\boldsymbol{Q} = (\\boldsymbol{T}^T \\cdot \\boldsymbol{T})\\) where \\(\\boldsymbol{Q} = (q_{ij})_{i \\in \\{1,\\dots,\\mathcal{I}\\},j \\in \\{1,\\dots,\\mathcal{I}\\}}\\)\n\\(q_{ij}\\) shows how often \\(i\\) and \\(j\\) appear in the same order\n\n\nQuestion: What do the principal diagonal values tell us?\n\n\n\nHow often each SKU appeared over all orders (binary!)"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#how-to-approach-the-problem",
    "href": "lectures/lecture-06-presentation.html#how-to-approach-the-problem",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "How to approach the problem?",
    "text": "How to approach the problem?\n\nGreedy Heuristic1: Allocation based on matrix\nMathematical Model2: Maximizes coappearance\nGRASP3: Good on small instances\nNew: Max. coappearance with non-linear solver\nNew: Heuristic based on Chi-Square Tests\n\nSimple and very fast, Catalán and Fisher (2012)Computationally intensive with CPLEX, Zhu et al. (2021)Greedy Randomized Adaptive Search Procedure, Zhu et al. (2021)"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#basic-setting",
    "href": "lectures/lecture-06-presentation.html#basic-setting",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Basic Setting",
    "text": "Basic Setting"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#available-data-version-2",
    "href": "lectures/lecture-06-presentation.html#available-data-version-2",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Available Data (Version 2)",
    "text": "Available Data (Version 2)\nQuestion: What could be the sets?\n\n\n\\(\\mathcal{I}\\) - Set of products indexed by \\(i \\in \\{1,2,...,|\\mathcal{I}|\\}\\)\n\\(\\mathcal{K}\\) - Set of warehouses indexed by \\(k \\in \\{1,\\dots,|\\mathcal{K}|\\}\\)\n\n\n\n\n\n\n\n\n\nNo customer order information is needed!\n\n\nWe can focus on the SKUs and the warehouses, making the problem much smaller!"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#available-parameters-1",
    "href": "lectures/lecture-06-presentation.html#available-parameters-1",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Available Parameters",
    "text": "Available Parameters\nQuestion: What are possible parameters?\n\n\\(c_k\\) - Storage space of warehouse \\(k \\in \\{1,\\dots,|\\mathcal{K}|\\}\\)\n\\(\\boldsymbol{Q}= (q_{ij})_{i \\in \\{1,\\dots,\\mathcal{I}\\},j \\in \\{1,\\dots,\\mathcal{I}\\}}\\) - Coappearance matrix\n\n\n\n\n\n\n\n\nTransactional Data replaced\n\n\nInstead of the transactional data, we just use the coappearance matrix in our model!"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#decision-variables",
    "href": "lectures/lecture-06-presentation.html#decision-variables",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Decision Variables?",
    "text": "Decision Variables?\n\n\n\n\n\n\nWe have the following sets:\n\n\n\n\\(\\mathcal{I}\\) - Set of products indexed by \\(i \\in \\{1,2,...,|\\mathcal{I}|\\}\\)\n\\(\\mathcal{K}\\) - Set of warehouses indexed by \\(k \\in \\{1,\\dots,|\\mathcal{K}|\\}\\)\n\n\n\n\n\n\n\n\n\n\n\nOur objective is to:\n\n\nMaximize the coappearance of products that are often part of the same customer orders. In more mathematical terms: Maximize the sum of all unique pair-wise values \\(q_{i,j}\\) of all SKUs stored in the same warehouse.\n\n\n\n\n\nQuestion: What could be our decision variable/s?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#decision-variables-1",
    "href": "lectures/lecture-06-presentation.html#decision-variables-1",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Decision Variables",
    "text": "Decision Variables\n\n\\(X_{i,k}\\) - 1, if SKU \\(i\\in\\mathcal{I}\\) is stored in \\(k\\in\\mathcal{K}\\), 0 otherwise\n\n\n\n\n\n\n\n\nOnly one variable per SKU and warehouse!\n\n\nAs we don’t need the customer order information, we only need to make a decision for each SKU and warehouse pair!"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#decision-variable-in-julia",
    "href": "lectures/lecture-06-presentation.html#decision-variable-in-julia",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Decision Variable in Julia",
    "text": "Decision Variable in Julia\nQuestion: How could we formulate the variable in Julia?\n\nimport Pkg; Pkg.add(\"SCIP\")\nusing JuMP, SCIP # SCIP is a non-commercial MIQCP solver\n\nwarehouses = [\"Hamburg\", \"Berlin\"] # Add warehouses as a vector\nskus = [\"Smartphone\", \"Socks\", \"Charger\"] # Add SKUs as a vector\n\nwarehouse_model = Model(SCIP.Optimizer)\n\n\n\n@variable(warehouse_model, X[i in skus, k in warehouses], Bin)\n\n\n\n2-dimensional DenseAxisArray{VariableRef,2,...} with index sets:\n    Dimension 1, [\"Smartphone\", \"Socks\", \"Charger\"]\n    Dimension 2, [\"Hamburg\", \"Berlin\"]\nAnd data, a 3×2 Matrix{VariableRef}:\n X[Smartphone,Hamburg]  X[Smartphone,Berlin]\n X[Socks,Hamburg]       X[Socks,Berlin]\n X[Charger,Hamburg]     X[Charger,Berlin]"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#objective-function",
    "href": "lectures/lecture-06-presentation.html#objective-function",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Objective Function",
    "text": "Objective Function\n\n\n\n\n\n\nWe need the following:\n\n\n\n\\(X_{i,k}\\) - 1, if SKU \\(i\\in\\mathcal{I}\\) is stored in \\(k\\in\\mathcal{K}\\), 0 otherwise\n\\(q_{ij}\\) - Coappearance of SKU \\(i\\in\\mathcal{I}\\) and \\(j\\in\\mathcal{I}\\)\n\n\n\n\n\n\n\n\n\n\nOur objective is to:\n\n\nMaximize the sum of all unique pair-wise values \\(q_{i,j}\\) of all SKUs stored in the same warehouse. Note, that this is a quadratic objective function!\n\n\n\n\nQuestion: What could the objective function look like?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#quadratic-objective-function",
    "href": "lectures/lecture-06-presentation.html#quadratic-objective-function",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Quadratic Objective Function",
    "text": "Quadratic Objective Function\n\\[\\text{maximize} \\quad \\sum_{i=2}^{\\mathcal{I}} \\sum_{j=1}^{i-1} \\sum_{k \\in \\mathcal{K}} X_{ik}\\times X_{jk} \\times q_{ij}\\]\n\n\n\n\n\n\n\nThis is a quadratic objective function!\n\n\nThe quadratic terms are \\(X_{ik}\\times X_{jk}\\). This objective function is based on the Quadratic Multiple Knapsack Problem (QMKP), formulated by Hiley and Julstrom (2006)."
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#objective-function-in-julia",
    "href": "lectures/lecture-06-presentation.html#objective-function-in-julia",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Objective Function in Julia",
    "text": "Objective Function in Julia\nQuestion: How could we formulate this in Julia?\n\n\nQ = [2 1 2; 1 2 1; 2 1 2]\n\n@objective(warehouse_model,\n    Max,\n    sum(\n        X[skus[i], warehouses[k]] * X[skus[j], warehouses[k]] * Q[i,j]\n        for i in 2:length(skus)\n        for j in 1:i-1\n        for k in 1:length(warehouses)\n    )\n)\n\n\n\n$ X_{Socks,Hamburg}X_{Smartphone,Hamburg} + X_{Socks,Berlin}X_{Smartphone,Berlin} + 2 X_{Charger,Hamburg}X_{Smartphone,Hamburg} + 2 X_{Charger,Berlin}X_{Smartphone,Berlin} + X_{Charger,Hamburg}X_{Socks,Hamburg} + X_{Charger,Berlin}X_{Socks,Berlin} $"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#what-constraints",
    "href": "lectures/lecture-06-presentation.html#what-constraints",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "What constraints?",
    "text": "What constraints?\n\n\n\n\nQuestion: What constraints?\n\n\nAllocate each SKU at least once\nWarehouses have a finite capacity\nCapacity is not exceeded"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#single-allocation-constraint",
    "href": "lectures/lecture-06-presentation.html#single-allocation-constraint",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Single Allocation Constraint?",
    "text": "Single Allocation Constraint?\n\n\n\n\n\n\nThe goal of this constraint is to:\n\n\nEnsure that each SKU is allocated at least once.\n\n\n\n\n\n\n\n\n\n\nWe need the following variable:\n\n\n\n\\(X_{i,k}\\) - 1, if SKU \\(i\\in\\mathcal{I}\\) is stored in \\(k\\in\\mathcal{K}\\), 0 otherwise\n\n\n\n\n\n\nQuestion: What could the constraint look like?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#single-allocation-constraint-1",
    "href": "lectures/lecture-06-presentation.html#single-allocation-constraint-1",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Single Allocation Constraint",
    "text": "Single Allocation Constraint\n\\[\\sum_{k \\in \\mathcal{K}} X_{ik} \\geq 1 \\quad \\forall i \\in \\mathcal{I}\\]\n\n\n\n\n\n\n\nRemember, this is the variable:\n\n\n\n\\(X_{i,k}\\) - 1, if SKU \\(i\\in\\mathcal{I}\\) is stored in \\(k\\in\\mathcal{K}\\), 0 otherwise\n\n\n\n\n\n\nQuestion: How could we change the constraint to ensure that each SKU is allocated only once?\n\n\nQuestion: How could we add the constraint in Julia?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#single-allocation-in-julia",
    "href": "lectures/lecture-06-presentation.html#single-allocation-in-julia",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Single Allocation in Julia",
    "text": "Single Allocation in Julia\n\n@constraint(warehouse_model, single_allocation[i in skus],\n    sum(X[i, k] for k in warehouses) &gt;= 1\n)\n\n\n\n1-dimensional DenseAxisArray{ConstraintRef{Model, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.GreaterThan{Float64}}, ScalarShape},1,...} with index sets:\n    Dimension 1, [\"Smartphone\", \"Socks\", \"Charger\"]\nAnd data, a 3-element Vector{ConstraintRef{Model, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.GreaterThan{Float64}}, ScalarShape}}:\n single_allocation[Smartphone] : X[Smartphone,Hamburg] + X[Smartphone,Berlin] ≥ 1\n single_allocation[Socks] : X[Socks,Hamburg] + X[Socks,Berlin] ≥ 1\n single_allocation[Charger] : X[Charger,Hamburg] + X[Charger,Berlin] ≥ 1"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#capacity-constraints",
    "href": "lectures/lecture-06-presentation.html#capacity-constraints",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Capacity Constraints?",
    "text": "Capacity Constraints?\n\n\n\n\n\n\nThe goal of these constraints is to:\n\n\nEnsure that the capacity of each warehouse is not exceeded.\n\n\n\n\n\n\n\n\n\n\nWe need the following variables and parameters:\n\n\n\n\\(X_{i,k}\\) - 1, if SKU \\(i\\in\\mathcal{I}\\) is stored in \\(k\\in\\mathcal{K}\\), 0 otherwise\n\\(c_k\\) - Storage space of warehouse \\(k\\in\\mathcal{K}\\)\n\n\n\n\n\n\nQuestion: What could the second constraint be?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#capacity-constraints-1",
    "href": "lectures/lecture-06-presentation.html#capacity-constraints-1",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Capacity Constraints",
    "text": "Capacity Constraints\n\\[\\sum_{i \\in \\mathcal{I}} X_{ik} \\leq c_k \\quad \\forall k \\in \\mathcal{K}\\]\n\nAnd that’s basically it!\n\n\nQuestion: How could we add the second constraint in Julia?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#capacity-constraints-in-julia",
    "href": "lectures/lecture-06-presentation.html#capacity-constraints-in-julia",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Capacity Constraints in Julia",
    "text": "Capacity Constraints in Julia\n\ncapacities = Dict(\"Hamburg\" =&gt; 2, \"Berlin\" =&gt; 1) # Add capacities\n\n@constraint(warehouse_model, capacity[k in warehouses],\n    sum(X[i, k] for i in skus) &lt;= capacities[k]\n)\n\n\n\n1-dimensional DenseAxisArray{ConstraintRef{Model, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, ScalarShape},1,...} with index sets:\n    Dimension 1, [\"Hamburg\", \"Berlin\"]\nAnd data, a 2-element Vector{ConstraintRef{Model, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, ScalarShape}}:\n capacity[Hamburg] : X[Smartphone,Hamburg] + X[Socks,Hamburg] + X[Charger,Hamburg] ≤ 2\n capacity[Berlin] : X[Smartphone,Berlin] + X[Socks,Berlin] + X[Charger,Berlin] ≤ 1"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#qmk-model",
    "href": "lectures/lecture-06-presentation.html#qmk-model",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "QMK Model",
    "text": "QMK Model\n\\[\\text{maximize} \\quad \\sum_{i=2}^{\\mathcal{I}} \\sum_{j=1}^{i-1} \\sum_{k \\in \\mathcal{K}} X_{ik}\\times X_{jk} \\times q_{ij}\\]\nsubject to:\n\\[\n\\begin{align*}\n                & \\sum_{k \\in \\mathcal{K}} X_{ik} \\geq 1 && \\forall i \\in \\mathcal{I}\\\\\n                & \\sum_{i \\in \\mathcal{I}} X_{ik} \\leq c_{k} && \\forall k \\in \\mathcal{K}\\\\\n                & X_{ik} \\in \\{0,1\\}  && \\forall i \\in \\mathcal{I}, \\forall k \\in \\mathcal{K}\n\\end{align*}\n\\]"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#qmk-model-in-julia",
    "href": "lectures/lecture-06-presentation.html#qmk-model-in-julia",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "QMK Model in Julia",
    "text": "QMK Model in Julia\n\nset_attribute(warehouse_model, \"display/verblevel\", 0) # Hide solver output\noptimize!(warehouse_model)\n\nprintln(\"The optimal objective value is: \", objective_value(warehouse_model))\nprintln(\"The optimal solution is: \", value.(X))\n\n\n\nThe optimal objective value is: 2.0\nThe optimal solution is: 2-dimensional DenseAxisArray{Float64,2,...} with index sets:\n    Dimension 1, [\"Smartphone\", \"Socks\", \"Charger\"]\n    Dimension 2, [\"Hamburg\", \"Berlin\"]\nAnd data, a 3×2 Matrix{Float64}:\n  1.0  0.0\n -0.0  1.0\n  1.0  0.0"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#characteristics",
    "href": "lectures/lecture-06-presentation.html#characteristics",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Characteristics",
    "text": "Characteristics\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domain do we have?\nDo we know the split-orders based on the objective value?\nWhy couldn’t we use HiGHS as solver?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#choosing-a-solver",
    "href": "lectures/lecture-06-presentation.html#choosing-a-solver",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Choosing a solver",
    "text": "Choosing a solver\n\nIdentify problem structure, e.g. LP, MIP, NLP, QCP, MIQCP, …\nWhat is the size of the problem?\nIs a commercial solver needed?\n\n\n\n\n\n\n\n\nCommercial Solvers\n\n\nCommercial solvers are faster and more robust as open source solvers but also more expensive. During your studies, you can use most of them for free though! Nonetheless, we will only use open source solvers in this course."
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#global-vs-local-optimality",
    "href": "lectures/lecture-06-presentation.html#global-vs-local-optimality",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Global vs Local Optimality",
    "text": "Global vs Local Optimality\n\n\n\nLocal vs Global Optimum by Christoph Roser"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#model-assumptions",
    "href": "lectures/lecture-06-presentation.html#model-assumptions",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\nWhat assumptions have we made?\nProblem with allocating SKUs to multiple warehouses?\nWhat else might pose a problem in the real world?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#section-1",
    "href": "lectures/lecture-06-presentation.html#section-1",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Can this be\napplied?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#problem-size-is-crucial",
    "href": "lectures/lecture-06-presentation.html#problem-size-is-crucial",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Problem Size is Crucial",
    "text": "Problem Size is Crucial\n\nUp to 10,000 SKUs → commercial solvers\nMore than 10,000 SKUs → heuristics\nFor example, the CHI heuristic\n\n\n\n\n\n\n\n\nCHI-Heuristic\n\n\nDetect dependencies between products and allocate them accordingly, as products within orders can have dependencies and products are bought with different frequencies!"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#case-study-1",
    "href": "lectures/lecture-06-presentation.html#case-study-1",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Case Study",
    "text": "Case Study\n\nMore than 100,000 SKUs and several millions of orders\nComparison of different heuristics1\n\nCHI: based on Chi-Square tests Vlćek and Voigt (2024)\nGP, GO, GS, BS: based on greedy algorithms (Catalán and Fisher 2012)\nRA: Random allocation of SKUs to warehouses\n\n\nQMKP is not applicable for instance in case study"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#real-data-set",
    "href": "lectures/lecture-06-presentation.html#real-data-set",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Real Data Set",
    "text": "Real Data Set"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#conclusion",
    "href": "lectures/lecture-06-presentation.html#conclusion",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Conclusion",
    "text": "Conclusion\n\nSplits are of no benefit, except faster customer deliveries\nIncrease workload, packaging and shipping costs\nMathematical Optimisation of “full” problem not solvable\nCHI Heuristic close to mathematical optimisation\n\n\n\n\n\n\n\nAnd that’s it for todays lecture!\n\n\nWe now have covered the Quadratic Multiple Knapsack Problem and are ready to start solving some tasks in the upcoming tutorial."
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#section-2",
    "href": "lectures/lecture-06-presentation.html#section-2",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "lectures/lecture-06-presentation.html#literature-i",
    "href": "lectures/lecture-06-presentation.html#literature-i",
    "title": "Lecture VI - Minimizing Split Orders in E-Commerce",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.\n\n\n\n\nCatalán, Andrés, and Marshall Fisher. 2012. “Assortment Allocation to Distribution Centers to Minimize Split Customer Orders.” SSRN Electronic Journal. https://doi.org/10.2139/ssrn.2166687.\n\n\nHiley, Amanda, and Bryant A. Julstrom. 2006. “The Quadratic Multiple Knapsack Problem and Three Heuristic Approaches to It.” In Proceedings of the 8th Annual Conference on Genetic and Evolutionary Computation, edited by M. Keijzer, 547–52. New York, NY: Association for Computing Machinery. https://doi.org/10.1145/1143997.1144096.\n\n\nPitney Bowes Inc. 2017. “Pitney Bowes Parcel Shipping Index Reveals 48 Percent Growth in Parcel Volume since 2014.” 2017. https://www.businesswire.com/news/home/20170830005628/en/Pitney-Bowes-Parcel-Shipping-Index-Reveals-48.\n\n\n———. 2019. “Pitney Bowes Parcel Shipping Index Reports Continued Growth Bolstered by China and Emerging Markets.” 2019. https://www.businesswire.com/news/home/20191010005148/en/.\n\n\n———. 2020. “Pitney Bowes Parcel Shipping Index Reports Continued Growth as Global Parcel Volume Exceeds 100 billion for First Time Ever.” 2020. https://www.businesswire.com/news/home/20201012005150/en/.\n\n\nVlćek, Tobias, and Guido Voigt. 2024. “Optimizing SKU-Warehouse Allocations to Minimize Split Parcels in E-Commerce Environments.” To Be Submitted Soon.\n\n\nZhu, Shan, Xiangpei Hu, Kai Huang, and Yufei Yuan. 2021. “Optimization of Product Category Allocation in Multiple Warehouses to Minimize Splitting of Online Supermarket Customer Orders.” European Journal of Operational Research 290 (2): 556–71. https://doi.org/10.1016/j.ejor.2020.08.024."
  },
  {
    "objectID": "lectures/lecture-08-districting.html",
    "href": "lectures/lecture-08-districting.html",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "Vlćek et al. (2024)\n\n\n\n\nQuestion: What makes the work of emergency services complex?\n\n\nDynamic urban development\nChanging population patterns\nResource constraints\nNeed for rapid response\nMultiple stakeholder interests\n\n\n\n\n\n\n\n\n\nEmergency services address the needs of three interest groups:\n\nCitizens\nService personnel\nAdministrators\n\nQuestion: What could be the objectives of these groups?\n\n\n\n\n\n\n\n\nCitizens\n\nFast response times\nReliable service coverage\n\nService Personnel\n\nManageable workloads\nSafe working conditions\n\n\n\n\nAdministrators\n\nCost efficiency\nResource optimization\n\n\n\n\n\n\n\n\nAligning the objectives of the three interest groups is challenging.\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion: Why might current district layouts be suboptimal?\n\n\nMany layouts date back several decades\nOften designed along highways and regions (Bruce 2009)\nExtensive data not used for data-driven improvement\n\n\n\n\n\n\n\n\n\nHow can we improve\nthis situation?\n\n\n\n\n\n\n\n\nQuestion: What data can help improve emergency services?\n\n\nHistorical incident patterns\nResponse time analysis\nResource utilization metrics\nPopulation densities and traffic patterns\n\n\n\n. . .\n\n\n\n\n\n\nExtensive data collected, but often lack of tools or knowledge to leverage it.\n\n\n\n\n\n\n\nOperations research (OR) models can help!\nBased on incident records and geographical information\nImprove the response of emergency services\nHelp administrators in making strategic decisions\nLocate new departments or close departments (Liberatore, Camacho-Collados, and Vitoriano 2020)",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#police-service-district-planning",
    "href": "lectures/lecture-08-districting.html#police-service-district-planning",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "Vlćek et al. (2024)",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#challenges",
    "href": "lectures/lecture-08-districting.html#challenges",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "Question: What makes the work of emergency services complex?\n\n\nDynamic urban development\nChanging population patterns\nResource constraints\nNeed for rapid response\nMultiple stakeholder interests",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#emergency-services",
    "href": "lectures/lecture-08-districting.html#emergency-services",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "Emergency services address the needs of three interest groups:\n\nCitizens\nService personnel\nAdministrators\n\nQuestion: What could be the objectives of these groups?",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#stakeholder-objectives",
    "href": "lectures/lecture-08-districting.html#stakeholder-objectives",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "Citizens\n\nFast response times\nReliable service coverage\n\nService Personnel\n\nManageable workloads\nSafe working conditions\n\n\n\n\nAdministrators\n\nCost efficiency\nResource optimization\n\n\n\n\n\n\n\n\nAligning the objectives of the three interest groups is challenging.",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#emergency-service-districting",
    "href": "lectures/lecture-08-districting.html#emergency-service-districting",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "Question: Why might current district layouts be suboptimal?\n\n\nMany layouts date back several decades\nOften designed along highways and regions (Bruce 2009)\nExtensive data not used for data-driven improvement",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#section",
    "href": "lectures/lecture-08-districting.html#section",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "How can we improve\nthis situation?",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#the-role-of-data",
    "href": "lectures/lecture-08-districting.html#the-role-of-data",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "Question: What data can help improve emergency services?\n\n\nHistorical incident patterns\nResponse time analysis\nResource utilization metrics\nPopulation densities and traffic patterns\n\n\n\n. . .\n\n\n\n\n\n\nExtensive data collected, but often lack of tools or knowledge to leverage it.",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#optimization",
    "href": "lectures/lecture-08-districting.html#optimization",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "Operations research (OR) models can help!\nBased on incident records and geographical information\nImprove the response of emergency services\nHelp administrators in making strategic decisions\nLocate new departments or close departments (Liberatore, Camacho-Collados, and Vitoriano 2020)",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#police-districting",
    "href": "lectures/lecture-08-districting.html#police-districting",
    "title": "Lecture VIII - Police Districting",
    "section": "Police Districting",
    "text": "Police Districting\n\nFor an efficient and effective distribution of resources, police jurisdictions are divided into precincts or command districts with separate departments. These are further divided into patrol beats (D’Amico et al. 2002).",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#service-priority-extremes",
    "href": "lectures/lecture-08-districting.html#service-priority-extremes",
    "title": "Lecture VIII - Police Districting",
    "section": "Service Priority Extremes",
    "text": "Service Priority Extremes\n\nHigh Priority\n\nLife-threatening situations\nActive crimes in progress\nMultiple unit response needed\n\nLow Priority\n\nMinor incidents\nAdministrative tasks",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#case-studies-1",
    "href": "lectures/lecture-08-districting.html#case-studies-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Case Studies",
    "text": "Case Studies\n\nDifferent urban contexts\nStudy of jurisdictions in\n\nGermany: Large metropolitan area\nBelgium: Large rural area\n\nFocus on response time optimization\n\n. . .\n\n\n\n\n\n\nPart of the force patrols the streets, another part is stationed at the departments.",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#dispatching",
    "href": "lectures/lecture-08-districting.html#dispatching",
    "title": "Lecture VIII - Police Districting",
    "section": "Dispatching",
    "text": "Dispatching\n\nDispatchers assign all CFS to vehicles from the corresponding districts and patrol areas\nOfficers are familiar with the area and are thus better prepared to respond appropriately (Bodily 1978)\nTo cope with high demands, dispatchers can assign vehicles from nearby districts or beats",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#potential-problem",
    "href": "lectures/lecture-08-districting.html#potential-problem",
    "title": "Lecture VIII - Police Districting",
    "section": "Potential Problem",
    "text": "Potential Problem\nQuestion: What could be the potential problem?\n. . .\n\nThis can lead to a domino effect\nTransferring vehicles from other districts or beats reduces coverage in those locations (Mayer 2009)\nThis makes them vulnerable to missing resources when they need assistance themselves",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#overloaded-systems",
    "href": "lectures/lecture-08-districting.html#overloaded-systems",
    "title": "Lecture VIII - Police Districting",
    "section": "Overloaded Systems",
    "text": "Overloaded Systems\n\nThis can lead to overloaded systems!\nLong dispatching delays due to staff shortages\nPreventive patrol hardly possible (Miller and Knoppers 1972)\nDispatchers constantly draw on patrol resources\nReduces the response time of emergency services\n\n. . .\n\n\n\n\n\n\nThis is a common problem in many emergency services.",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#response-time",
    "href": "lectures/lecture-08-districting.html#response-time",
    "title": "Lecture VIII - Police Districting",
    "section": "Response Time",
    "text": "Response Time\n\n\n\n\n\nCentral criterion to measure the effectiveness of emergency services is the response time\nTime between a call for aid and the arrival at the incident location\nLow response time increases the likelihood of helping and improves confidence (Bodily 1978)",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#response-time-influencers",
    "href": "lectures/lecture-08-districting.html#response-time-influencers",
    "title": "Lecture VIII - Police Districting",
    "section": "Response Time Influencers",
    "text": "Response Time Influencers\nQuestion: What affects response time?\n\n\nInitial contact\nInformation gathering\nUnit assignment\nResource coordination\nRoute to location\nTraffic conditions",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#territory-design-problem-1",
    "href": "lectures/lecture-08-districting.html#territory-design-problem-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Territory Design Problem",
    "text": "Territory Design Problem\n\n\n\n\n\nAggregation of small geographic areas, called basic areas (BAs), into geographic clusters, called districts, so that these are acceptable according to pre-defined planning criteria1.",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#objective",
    "href": "lectures/lecture-08-districting.html#objective",
    "title": "Lecture VIII - Police Districting",
    "section": "Objective",
    "text": "Objective\nQuestion: What could be the objective?\n. . .\n\nMinimize the response time to help citizens faster while increasing the confidence in the service\n\n. . .\nQuestion: What could be further objectives?\n. . .\n\nReallocate only part of the police department’s\nCompact and contiguous territories to improve patrol\nPrevention of isolated departments",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#basic-structure",
    "href": "lectures/lecture-08-districting.html#basic-structure",
    "title": "Lecture VIII - Police Districting",
    "section": "Basic Structure",
    "text": "Basic Structure\n\n\n\n\nQuestion: How can we structure this?\n\n\nModel as a digraph with vertices and edges\nEach BA centroid becomes a vertex\n\\(\\mathcal{J}\\) : set of BAs, indexed by \\(j\\)\n\\(\\mathcal{I}\\) : set of potential district centres \\((\\mathcal{I} \\subseteq \\mathcal{J})\\)",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#why-hexagons",
    "href": "lectures/lecture-08-districting.html#why-hexagons",
    "title": "Lecture VIII - Police Districting",
    "section": "Why Hexagons?",
    "text": "Why Hexagons?\n\n\n\n\nQuestion: Advantages of hexagons?\n\n\nEqual distances to all neighboring centroids\nReduces sampling bias from edge effects (Wang and Kwan 2018)\nSpecial properties that help with the enforcement of compactness\nBetter representation of urban geography",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#response-time-components",
    "href": "lectures/lecture-08-districting.html#response-time-components",
    "title": "Lecture VIII - Police Districting",
    "section": "Response Time Components",
    "text": "Response Time Components\n\n\n\n\nQuestion: How can we model response time?\n\n\nCall length is independent of territory\nDispatch time is difficult to model\nDriving time can be minimized directly\n\n\n\n\n\n\n\n\nWarningConclusion\n\n\n\nWe focus on minimizing expected driving times between departments and incident locations.",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#section-1",
    "href": "lectures/lecture-08-districting.html#section-1",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "Let’s build our model\nstep by step!",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#key-model-components",
    "href": "lectures/lecture-08-districting.html#key-model-components",
    "title": "Lecture VIII - Police Districting",
    "section": "Key Model Components",
    "text": "Key Model Components\nQuestion: What could be our key model components?\n. . .\n\nBasic areas (BAs) and potential department locations\nDriving times between basic areas\nForecasted incident data\nAssignment decisions\n\n. . .\nQuestion: Which are sets, parameters, and variables?",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#sets-and-indices",
    "href": "lectures/lecture-08-districting.html#sets-and-indices",
    "title": "Lecture VIII - Police Districting",
    "section": "Sets and Indices",
    "text": "Sets and Indices\n\n\n\\(\\mathcal{J}\\) - Set of BAs, indexed by \\(j\\)\n\\(\\mathcal{I}\\) - Set of potential district centres (\\(\\mathcal{I} \\subseteq \\mathcal{J}\\)), indexed by \\(i\\)\n\n\n. . .\n\n\n\n\n\n\nThe depot locations are a subset of the basic areas!",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#parameters",
    "href": "lectures/lecture-08-districting.html#parameters",
    "title": "Lecture VIII - Police Districting",
    "section": "Parameters",
    "text": "Parameters\nQuestion: What parameters do we need?\n\n\n\\(p\\) - Number of district centres (departments)\n\\(t_{i,j}\\) - Expected driving times between \\(i\\) and \\(j\\)\n\n\n. . .\n\n\n\n\n\n\nParameters should be carefully calibrated with real-world data!",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#decision-variables",
    "href": "lectures/lecture-08-districting.html#decision-variables",
    "title": "Lecture VIII - Police Districting",
    "section": "Decision Variable(s)?",
    "text": "Decision Variable(s)?\n\n\n\n\n\n\nNoteWe have the following sets:\n\n\n\n\nBAs, indexed by \\(j \\in \\mathcal{J}\\)\nPotential department locations, indexed by \\(i \\in \\mathcal{I}\\)\n\n\n\n. . .\n\n\n\n\n\n\nImportantOur objective is to:\n\n\n\nMinimize the expected response time of the emergency services by optimizing the assignment of BAs to departments.\n\n\n. . .\nQuestion: What decisions do we need to model?",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#decision-variables-1",
    "href": "lectures/lecture-08-districting.html#decision-variables-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Decision variable/s",
    "text": "Decision variable/s\n\n\\(X_{i,j}\\): 1 if BA \\(j\\) assigned to department \\(i\\), 0 otherwise\n\n. . .\nQuestion: What is the domain of our decision variable?\n. . .\n\n\\(X_{i,j} \\in \\{0,1\\} \\quad \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\\)",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#section-2",
    "href": "lectures/lecture-08-districting.html#section-2",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "Let’s build our\nobjective function!",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#objective-function",
    "href": "lectures/lecture-08-districting.html#objective-function",
    "title": "Lecture VIII - Police Districting",
    "section": "Objective Function?",
    "text": "Objective Function?\n\n\n\n\n\n\nImportantOur objective is to:\n\n\n\nMinimize the expected response time of the emergency services by optimizing the assignment of BAs to departments.\n\n\n. . .\nQuestion: How do we minimize response time?\n\n\nWe want to minimize total driving time\nConsider frequency of incidents in each BA\nDon’t include fixed costs (handled by constraints)",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#objective-function-1",
    "href": "lectures/lecture-08-districting.html#objective-function-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Objective Function",
    "text": "Objective Function\nQuestion: What could be our objective function?\n. . .\n\\[\n\\text{minimize} \\quad \\sum_{i \\in \\mathcal{I}}\\sum_{j \\in \\mathcal{J}} t_{i,j} \\times X_{i,j}\n\\]\n. . .\n\n\n\n\n\n\nImportantExpected Driving Time\n\n\n\n\nTotal driving time across all assignments\nWeighted by incident frequency\nConsiders all possible BA-department pairs",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#key-constraints",
    "href": "lectures/lecture-08-districting.html#key-constraints",
    "title": "Lecture VIII - Police Districting",
    "section": "Key Constraints",
    "text": "Key Constraints\n\n\n\n\nQuestion: Constraints needed?\n\n\nBA must have one department\nLimit number of departments\nOnly assign active departments\nEnsure contiguous districts\nMaintain district compactness",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#single-assignment-constraint",
    "href": "lectures/lecture-08-districting.html#single-assignment-constraint",
    "title": "Lecture VIII - Police Districting",
    "section": "Single Assignment Constraint?",
    "text": "Single Assignment Constraint?\nQuestion: Why do we need this constraint?\n. . .\n\nEach BA must be assigned to exactly one department\nPrevents overlapping jurisdictions\nEnsures complete coverage\n\n. . .\n\n\n\n\n\n\nNoteWe need the following variables:\n\n\n\n\n\\(X_{i,j}\\) - 1 if BA \\(j\\) assigned to department \\(i\\), 0 otherwise",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#single-assignment-constraint-1",
    "href": "lectures/lecture-08-districting.html#single-assignment-constraint-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Single Assignment Constraint?",
    "text": "Single Assignment Constraint?\nQuestion: What could the constraint look like?\n. . .\n\\[\n\\sum_{i \\in \\mathcal{I}} X_{i,j} = 1 \\quad \\forall j \\in \\mathcal{J}\n\\]\n. . .\n\n\n\n\n\n\nEach BA must be assigned to exactly one department.",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#department-count-constraint",
    "href": "lectures/lecture-08-districting.html#department-count-constraint",
    "title": "Lecture VIII - Police Districting",
    "section": "Department Count Constraint?",
    "text": "Department Count Constraint?\n\n\n\n\n\n\nImportantThe goal of these constraints is to:\n\n\n\nEnsure that exactly \\(p\\) departments are opened.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following sets and variables:\n\n\n\n\n\\(\\mathcal{I}\\) - Set of potential department locations, indexed by \\(i\\)\n\\(\\mathcal{J}\\) - Set of BAs, indexed by \\(j\\)\n\\(X_{i,j}\\) - 1, if BA \\(j\\) assigned to department \\(i\\), 0 otherwise\n\\(p\\) - Number of departments",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#department-count-constraint-1",
    "href": "lectures/lecture-08-districting.html#department-count-constraint-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Department Count Constraint",
    "text": "Department Count Constraint\nQuestion: What could the constraint look like?\n. . .\n\\[\n\\sum_{i \\in \\mathcal{I}} X_{i,i} = p\n\\]\n. . .\nQuestion: What happens if we have more departments than potential locations?\n. . .\n\nWe can’t open more departments than there are locations\nThe model will be infeasible",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#active-department-constraint",
    "href": "lectures/lecture-08-districting.html#active-department-constraint",
    "title": "Lecture VIII - Police Districting",
    "section": "Active Department Constraint?",
    "text": "Active Department Constraint?\n\n\n\n\n\n\nImportantThe goal of these constraints is to:\n\n\n\nEnsure that each BA is assigned to an active department, e.g. a department that is opened and that could dispatch vehicles.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following sets and variables:\n\n\n\n\n\\(X_{i,j}\\) - 1, if BA \\(j\\) assigned to department \\(i\\), 0 otherwise\n\n\n\nQuestion: How do we ensure assignments only to active departments?",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#active-department-constraint-1",
    "href": "lectures/lecture-08-districting.html#active-department-constraint-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Active Department Constraint",
    "text": "Active Department Constraint\n\\[\nX_{i,j} \\leq X_{i,i} \\quad \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\]\n. . .\n\n\n\n\n\n\nThis constraint creates a logical connection between department locations and BA assignments where BAs can only be assigned to opened departments.",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#p-median-problem",
    "href": "lectures/lecture-08-districting.html#p-median-problem",
    "title": "Lecture VIII - Police Districting",
    "section": "p-Median Problem",
    "text": "p-Median Problem\n\\[\\begin{align}\n\\text{minimize} \\quad & \\sum_{i \\in \\mathcal{I}}\\sum_{j \\in \\mathcal{J}} t_{i,j} \\times X_{i,j} \\\\\n\\text{subject to:} \\quad & \\sum_{i \\in \\mathcal{I}} X_{i,j}= 1 && \\forall j \\in \\mathcal{J} \\\\\n& \\sum_{i \\in \\mathcal{I}} X_{i,i} = p &&  \\\\\n& X_{i,j} \\leq X_{i,i} &&  \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}  \\\\\n& X_{i,j} \\in \\{0,1\\}  && \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{align}\\]",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#contiguity-introduction",
    "href": "lectures/lecture-08-districting.html#contiguity-introduction",
    "title": "Lecture VIII - Police Districting",
    "section": "Contiguity Introduction",
    "text": "Contiguity Introduction\n\n\n\n\nQuestion: Why is contiguity important?\n\n\nPrevents isolated areas\nEnsures contiguous patrol routes\nMaintains operational coherence",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#what-is-compactness",
    "href": "lectures/lecture-08-districting.html#what-is-compactness",
    "title": "Lecture VIII - Police Districting",
    "section": "What is compactness?",
    "text": "What is compactness?\n\n\n\n\n\n\n\n\n\n. . .\n\n\n\n\n\n\nNoteCompactness\n\n\n\nCompactness has no univocal definition; a district is commonly declared compact if it is ‘somehow round-shaped and undistorted’ (Kalcsics, Nickel, and Schröder 2005).",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#contiguity-and-compactness-1",
    "href": "lectures/lecture-08-districting.html#contiguity-and-compactness-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Contiguity and Compactness",
    "text": "Contiguity and Compactness\n\n\n\n\nQuestion: Are our resulting districts based on the model contiguous and compact?\n\n\nThis depends on \\(t_{i,j}\\)\nIf Euclidean distance\n\nDistricts will be contiguous\nLikely of compact shape",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#compactness-p-median",
    "href": "lectures/lecture-08-districting.html#compactness-p-median",
    "title": "Lecture VIII - Police Districting",
    "section": "Compactness p-Median",
    "text": "Compactness p-Median\nQuestion: Is this likely for police service districting?\n\n\nNo, as we minimize the driving time within a city\nHighways, Tunnels, etc.\nMultiplied by the differing number of requested cars\nThis can contribute to distorted district shapes",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#contiguity-sets",
    "href": "lectures/lecture-08-districting.html#contiguity-sets",
    "title": "Lecture VIII - Police Districting",
    "section": "Contiguity Sets",
    "text": "Contiguity Sets\nAdditional Set and Parameter\n\n\\(e_{i,j}\\) - Euclidean distance between centroids\n\\(\\mathcal{A}_j\\) - Sets of BAs adjacent to BA \\(j\\)\n\n. . .\n\\[\n\\mathcal{N}_{i,j}=\\{v \\in \\mathcal{A}_j | e_{i,v} &lt; e_{i,j}\\} \\quad \\forall i\\in \\mathcal{I}, \\forall j\\in \\mathcal{J}\n\\]\n. . .\n\n\n\n\n\n\nNoteThe idea\n\n\n\nBAs closer to department \\(i\\) than BA \\(j\\) on euclidian distance and adjacent to \\(j\\)!",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#example-a",
    "href": "lectures/lecture-08-districting.html#example-a",
    "title": "Lecture VIII - Police Districting",
    "section": "Example A",
    "text": "Example A",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#example-a-1",
    "href": "lectures/lecture-08-districting.html#example-a-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Example A",
    "text": "Example A",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#example-b",
    "href": "lectures/lecture-08-districting.html#example-b",
    "title": "Lecture VIII - Police Districting",
    "section": "Example B",
    "text": "Example B",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#example-b-1",
    "href": "lectures/lecture-08-districting.html#example-b-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Example B",
    "text": "Example B",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#enforcing-contiguity",
    "href": "lectures/lecture-08-districting.html#enforcing-contiguity",
    "title": "Lecture VIII - Police Districting",
    "section": "Enforcing Contiguity",
    "text": "Enforcing Contiguity\nAll districts have to be contiguous\n\\[\nX_{i,j} \\leq \\sum_{v \\in \\mathcal{N}_{i,j}} X_{i,v} \\quad \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J} \\setminus \\mathcal{A}_i: i \\neq j\n\\]\n. . .\n\n\n\n\n\n\nImportantThe idea\n\n\n\nAt least one department has to be assigned to a BA that is adjacent to BA \\(j\\) and closer to department \\(i\\)!",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#contiguity-and-compactness-2",
    "href": "lectures/lecture-08-districting.html#contiguity-and-compactness-2",
    "title": "Lecture VIII - Police Districting",
    "section": "Contiguity and Compactness",
    "text": "Contiguity and Compactness\nAll districts have to be contiguous and compact\n\\[\\begin{align*}\nX_{i,j} &\\leq \\sum_{v \\in \\mathcal{N}_{i,j}}X_{i,v} && \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J} \\setminus \\mathcal{A}_i:|\\mathcal{N}_{i,j}|= 1 \\wedge i \\neq j \\\\\n2X_{i,j} &\\leq \\sum_{v \\in \\mathcal{N}_{i,j}}X_{i,v} && \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J} \\setminus \\mathcal{A}_i:|\\mathcal{N}_{i,j}|&gt; 1 \\wedge i \\neq j\n\\end{align*}\\]\n. . .\n\n\n\n\n\n\nImportantThe idea\n\n\n\nAt least one department has to be assigned to two BAs that are adjacent to BA \\(j\\) and closer to department \\(i\\)!",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#comparison",
    "href": "lectures/lecture-08-districting.html#comparison",
    "title": "Lecture VIII - Police Districting",
    "section": "Comparison",
    "text": "Comparison\n\n\n\n\n\nOne department\n\n\n\n\n\n\nTwo departments\n\n\n\n\n\n\nUp to three departments\n\n\n\n\n. . .\n\n\n\n\n\n\nNoteWhy does this work?\n\n\n\nDue to the constraints, there is always a path back to the department if a BA is assigned to a department!",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#characteristics",
    "href": "lectures/lecture-08-districting.html#characteristics",
    "title": "Lecture VIII - Police Districting",
    "section": "Characteristics",
    "text": "Characteristics\nQuestions: On model characteristics\n\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domains do we have?\nWhat do you think, can the model be solved quickly?\nHave we prevented isolated districts?",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#model-assumptions",
    "href": "lectures/lecture-08-districting.html#model-assumptions",
    "title": "Lecture VIII - Police Districting",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\n\nWhat assumptions have we made?\nUse Euclidean distances to approximate driving time?\nCan we rely on incident data collected by the police?",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#overview-of-studies",
    "href": "lectures/lecture-08-districting.html#overview-of-studies",
    "title": "Lecture VIII - Police Districting",
    "section": "Overview of Studies",
    "text": "Overview of Studies\n\nQuestion: Where did we apply our model?\n\n\nTwo distinct environments:\n\nLarge metropolitan area (Germany)\nRural region (Belgium)\n\nDifferent challenges and requirements\nFocus on response time optimization",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#german-metropolitan-case",
    "href": "lectures/lecture-08-districting.html#german-metropolitan-case",
    "title": "Lecture VIII - Police Districting",
    "section": "German Metropolitan Case",
    "text": "German Metropolitan Case\n. . .\n\n\n1.8 mio incidents (2015-2019)\n~20 department locations\n1,596 basic areas\nDense urban environment\n\n\n. . .\n\nGoal: Redesign districts to improve response time.",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#german-metropolitan-results",
    "href": "lectures/lecture-08-districting.html#german-metropolitan-results",
    "title": "Lecture VIII - Police Districting",
    "section": "German Metropolitan Results",
    "text": "German Metropolitan Results",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#belgian-rural-case",
    "href": "lectures/lecture-08-districting.html#belgian-rural-case",
    "title": "Lecture VIII - Police Districting",
    "section": "Belgian Rural Case",
    "text": "Belgian Rural Case\n. . .\n\n\n50,000 incidents (2019-2020)\n2 existing + 1 planned location\n1,233 basic areas\nDispersed rural setting\n\n\n. . .\n\nGoal: Optimize coverage with limited resources.",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#belgian-rural-results",
    "href": "lectures/lecture-08-districting.html#belgian-rural-results",
    "title": "Lecture VIII - Police Districting",
    "section": "Belgian Rural Results",
    "text": "Belgian Rural Results",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#simulation-framework",
    "href": "lectures/lecture-08-districting.html#simulation-framework",
    "title": "Lecture VIII - Police Districting",
    "section": "Simulation Framework",
    "text": "Simulation Framework\nQuestion: How did we validate the results?\n. . .\n\n\nSpatial and temporal patterns\nShift schedules\nPriority handling\nRush hours\nInter-district support\nVariable driving times",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#results",
    "href": "lectures/lecture-08-districting.html#results",
    "title": "Lecture VIII - Police Districting",
    "section": "Results",
    "text": "Results\n\nResponse time reduction up to 14.52%\nBetter workload distribution\nImproved coverage equity\nMore efficient resource utilization\n\n. . .\n\n\n\n\n\n\nAll improvements are without additional staff!",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#conclusions",
    "href": "lectures/lecture-08-districting.html#conclusions",
    "title": "Lecture VIII - Police Districting",
    "section": "Conclusions",
    "text": "Conclusions\n\nModel adaptability crucial\nLocal context matters\nStakeholder buy-in essential\nData quality critical\n\n. . .\n\n\n\n\n\n\nSuccess requires balancing theoretical optimization with practical constraints!",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#future-applications",
    "href": "lectures/lecture-08-districting.html#future-applications",
    "title": "Lecture VIII - Police Districting",
    "section": "Future Applications",
    "text": "Future Applications\nQuestion: Where else could this approach be useful?\n\n\nOther emergency services\nDifferent urban contexts\nResource allocation problems\nService territory design\n\n\n. . .\n\n\n\n\n\n\nThe methodology is adaptable to various public service optimization scenarios.",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#wrap-up",
    "href": "lectures/lecture-08-districting.html#wrap-up",
    "title": "Lecture VIII - Police Districting",
    "section": "Wrap Up",
    "text": "Wrap Up\n\n\n\n\n\n\nNoteAnd that’s it for todays lecture!\n\n\n\nWe now have covered districting problems and are ready to start solving some tasks in the upcoming tutorial.",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#section-3",
    "href": "lectures/lecture-08-districting.html#section-3",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#literature-i",
    "href": "lectures/lecture-08-districting.html#literature-i",
    "title": "Lecture VIII - Police Districting",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-districting.html#footnotes",
    "href": "lectures/lecture-08-districting.html#footnotes",
    "title": "Lecture VIII - Police Districting",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nZoltners and Sinha (1983)↩︎",
    "crumbs": [
      "08 Districting",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#police-service-district-planning",
    "href": "lectures/lecture-08-presentation.html#police-service-district-planning",
    "title": "Lecture VIII - Police Districting",
    "section": "Police Service District Planning",
    "text": "Police Service District Planning\n\nVlćek et al. (2024)"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#challenges",
    "href": "lectures/lecture-08-presentation.html#challenges",
    "title": "Lecture VIII - Police Districting",
    "section": "Challenges",
    "text": "Challenges\nQuestion: What makes the work of emergency services complex?\n\nDynamic urban development\nChanging population patterns\nResource constraints\nNeed for rapid response\nMultiple stakeholder interests"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#emergency-services",
    "href": "lectures/lecture-08-presentation.html#emergency-services",
    "title": "Lecture VIII - Police Districting",
    "section": "Emergency Services",
    "text": "Emergency Services\n\n\n\n\nEmergency services address the needs of three interest groups:\n\nCitizens\nService personnel\nAdministrators\n\nQuestion: What could be the objectives of these groups?"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#stakeholder-objectives",
    "href": "lectures/lecture-08-presentation.html#stakeholder-objectives",
    "title": "Lecture VIII - Police Districting",
    "section": "Stakeholder Objectives",
    "text": "Stakeholder Objectives\n\n\n\nCitizens\n\nFast response times\nReliable service coverage\n\nService Personnel\n\nManageable workloads\nSafe working conditions\n\n\n\n\nAdministrators\n\nCost efficiency\nResource optimization\n\n\n\n\n\n\n\n\n\nAligning the objectives of the three interest groups is challenging."
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#emergency-service-districting",
    "href": "lectures/lecture-08-presentation.html#emergency-service-districting",
    "title": "Lecture VIII - Police Districting",
    "section": "Emergency Service Districting",
    "text": "Emergency Service Districting\n\n\n\n\nQuestion: Why might current district layouts be suboptimal?\n\nMany layouts date back several decades\nOften designed along highways and regions (Bruce 2009)\nExtensive data not used for data-driven improvement"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#section",
    "href": "lectures/lecture-08-presentation.html#section",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "How can we improve\nthis situation?"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#the-role-of-data",
    "href": "lectures/lecture-08-presentation.html#the-role-of-data",
    "title": "Lecture VIII - Police Districting",
    "section": "The Role of Data",
    "text": "The Role of Data\n\nQuestion: What data can help improve emergency services?\n\nHistorical incident patterns\nResponse time analysis\nResource utilization metrics\nPopulation densities and traffic patterns\n\n\n\n\n\n\n\n\n\nExtensive data collected, but often lack of tools or knowledge to leverage it."
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#optimization",
    "href": "lectures/lecture-08-presentation.html#optimization",
    "title": "Lecture VIII - Police Districting",
    "section": "Optimization",
    "text": "Optimization\n\nOperations research (OR) models can help!\nBased on incident records and geographical information\nImprove the response of emergency services\nHelp administrators in making strategic decisions\nLocate new departments or close departments (Liberatore, Camacho-Collados, and Vitoriano 2020)"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#police-districting",
    "href": "lectures/lecture-08-presentation.html#police-districting",
    "title": "Lecture VIII - Police Districting",
    "section": "Police Districting",
    "text": "Police Districting\n\nFor an efficient and effective distribution of resources, police jurisdictions are divided into precincts or command districts with separate departments. These are further divided into patrol beats (D’Amico et al. 2002)."
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#service-priority-extremes",
    "href": "lectures/lecture-08-presentation.html#service-priority-extremes",
    "title": "Lecture VIII - Police Districting",
    "section": "Service Priority Extremes",
    "text": "Service Priority Extremes\n\nHigh Priority\n\nLife-threatening situations\nActive crimes in progress\nMultiple unit response needed\n\nLow Priority\n\nMinor incidents\nAdministrative tasks"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#case-studies-1",
    "href": "lectures/lecture-08-presentation.html#case-studies-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Case Studies",
    "text": "Case Studies\n\nDifferent urban contexts\nStudy of jurisdictions in\n\nGermany: Large metropolitan area\nBelgium: Large rural area\n\nFocus on response time optimization\n\n\n\n\n\n\n\n\nPart of the force patrols the streets, another part is stationed at the departments."
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#dispatching",
    "href": "lectures/lecture-08-presentation.html#dispatching",
    "title": "Lecture VIII - Police Districting",
    "section": "Dispatching",
    "text": "Dispatching\n\nDispatchers assign all CFS to vehicles from the corresponding districts and patrol areas\nOfficers are familiar with the area and are thus better prepared to respond appropriately (Bodily 1978)\nTo cope with high demands, dispatchers can assign vehicles from nearby districts or beats"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#potential-problem",
    "href": "lectures/lecture-08-presentation.html#potential-problem",
    "title": "Lecture VIII - Police Districting",
    "section": "Potential Problem",
    "text": "Potential Problem\nQuestion: What could be the potential problem?\n\n\nThis can lead to a domino effect\nTransferring vehicles from other districts or beats reduces coverage in those locations (Mayer 2009)\nThis makes them vulnerable to missing resources when they need assistance themselves"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#overloaded-systems",
    "href": "lectures/lecture-08-presentation.html#overloaded-systems",
    "title": "Lecture VIII - Police Districting",
    "section": "Overloaded Systems",
    "text": "Overloaded Systems\n\nThis can lead to overloaded systems!\nLong dispatching delays due to staff shortages\nPreventive patrol hardly possible (Miller and Knoppers 1972)\nDispatchers constantly draw on patrol resources\nReduces the response time of emergency services\n\n\n\n\n\n\n\n\nThis is a common problem in many emergency services."
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#response-time",
    "href": "lectures/lecture-08-presentation.html#response-time",
    "title": "Lecture VIII - Police Districting",
    "section": "Response Time",
    "text": "Response Time\n\n\n\n\n\nCentral criterion to measure the effectiveness of emergency services is the response time\nTime between a call for aid and the arrival at the incident location\nLow response time increases the likelihood of helping and improves confidence (Bodily 1978)"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#response-time-influencers",
    "href": "lectures/lecture-08-presentation.html#response-time-influencers",
    "title": "Lecture VIII - Police Districting",
    "section": "Response Time Influencers",
    "text": "Response Time Influencers\nQuestion: What affects response time?\n\nInitial contact\nInformation gathering\nUnit assignment\nResource coordination\nRoute to location\nTraffic conditions"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#territory-design-problem-1",
    "href": "lectures/lecture-08-presentation.html#territory-design-problem-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Territory Design Problem",
    "text": "Territory Design Problem\n\n\n\n\n\nAggregation of small geographic areas, called basic areas (BAs), into geographic clusters, called districts, so that these are acceptable according to pre-defined planning criteria1.\n\n\nZoltners and Sinha (1983)"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#objective",
    "href": "lectures/lecture-08-presentation.html#objective",
    "title": "Lecture VIII - Police Districting",
    "section": "Objective",
    "text": "Objective\nQuestion: What could be the objective?\n\n\nMinimize the response time to help citizens faster while increasing the confidence in the service\n\n\n\nQuestion: What could be further objectives?\n\n\n\nReallocate only part of the police department’s\nCompact and contiguous territories to improve patrol\nPrevention of isolated departments"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#basic-structure",
    "href": "lectures/lecture-08-presentation.html#basic-structure",
    "title": "Lecture VIII - Police Districting",
    "section": "Basic Structure",
    "text": "Basic Structure\n\n\n\n\nQuestion: How can we structure this?\n\nModel as a digraph with vertices and edges\nEach BA centroid becomes a vertex\n\\(\\mathcal{J}\\) : set of BAs, indexed by \\(j\\)\n\\(\\mathcal{I}\\) : set of potential district centres \\((\\mathcal{I} \\subseteq \\mathcal{J})\\)"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#why-hexagons",
    "href": "lectures/lecture-08-presentation.html#why-hexagons",
    "title": "Lecture VIII - Police Districting",
    "section": "Why Hexagons?",
    "text": "Why Hexagons?\n\n\n\n\nQuestion: Advantages of hexagons?\n\nEqual distances to all neighboring centroids\nReduces sampling bias from edge effects (Wang and Kwan 2018)\nSpecial properties that help with the enforcement of compactness\nBetter representation of urban geography"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#response-time-components",
    "href": "lectures/lecture-08-presentation.html#response-time-components",
    "title": "Lecture VIII - Police Districting",
    "section": "Response Time Components",
    "text": "Response Time Components\n\n\n\n\nQuestion: How can we model response time?\n\nCall length is independent of territory\nDispatch time is difficult to model\nDriving time can be minimized directly\n\n\n\n\n\n\n\n\nConclusion\n\n\nWe focus on minimizing expected driving times between departments and incident locations."
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#section-1",
    "href": "lectures/lecture-08-presentation.html#section-1",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "Let’s build our model\nstep by step!"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#key-model-components",
    "href": "lectures/lecture-08-presentation.html#key-model-components",
    "title": "Lecture VIII - Police Districting",
    "section": "Key Model Components",
    "text": "Key Model Components\nQuestion: What could be our key model components?\n\n\nBasic areas (BAs) and potential department locations\nDriving times between basic areas\nForecasted incident data\nAssignment decisions\n\n\n\nQuestion: Which are sets, parameters, and variables?"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#sets-and-indices",
    "href": "lectures/lecture-08-presentation.html#sets-and-indices",
    "title": "Lecture VIII - Police Districting",
    "section": "Sets and Indices",
    "text": "Sets and Indices\n\n\\(\\mathcal{J}\\) - Set of BAs, indexed by \\(j\\)\n\\(\\mathcal{I}\\) - Set of potential district centres (\\(\\mathcal{I} \\subseteq \\mathcal{J}\\)), indexed by \\(i\\)\n\n\n\n\n\n\n\n\nThe depot locations are a subset of the basic areas!"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#parameters",
    "href": "lectures/lecture-08-presentation.html#parameters",
    "title": "Lecture VIII - Police Districting",
    "section": "Parameters",
    "text": "Parameters\nQuestion: What parameters do we need?\n\n\\(p\\) - Number of district centres (departments)\n\\(t_{i,j}\\) - Expected driving times between \\(i\\) and \\(j\\)\n\n\n\n\n\n\n\n\nParameters should be carefully calibrated with real-world data!"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#decision-variables",
    "href": "lectures/lecture-08-presentation.html#decision-variables",
    "title": "Lecture VIII - Police Districting",
    "section": "Decision Variable(s)?",
    "text": "Decision Variable(s)?\n\n\n\n\n\n\nWe have the following sets:\n\n\n\nBAs, indexed by \\(j \\in \\mathcal{J}\\)\nPotential department locations, indexed by \\(i \\in \\mathcal{I}\\)\n\n\n\n\n\n\n\n\n\n\n\nOur objective is to:\n\n\nMinimize the expected response time of the emergency services by optimizing the assignment of BAs to departments.\n\n\n\n\n\nQuestion: What decisions do we need to model?"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#decision-variables-1",
    "href": "lectures/lecture-08-presentation.html#decision-variables-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Decision variable/s",
    "text": "Decision variable/s\n\n\\(X_{i,j}\\): 1 if BA \\(j\\) assigned to department \\(i\\), 0 otherwise\n\n\nQuestion: What is the domain of our decision variable?\n\n\n\n\\(X_{i,j} \\in \\{0,1\\} \\quad \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\\)"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#section-2",
    "href": "lectures/lecture-08-presentation.html#section-2",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "Let’s build our\nobjective function!"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#objective-function",
    "href": "lectures/lecture-08-presentation.html#objective-function",
    "title": "Lecture VIII - Police Districting",
    "section": "Objective Function?",
    "text": "Objective Function?\n\n\n\n\n\n\nOur objective is to:\n\n\nMinimize the expected response time of the emergency services by optimizing the assignment of BAs to departments.\n\n\n\n\nQuestion: How do we minimize response time?\n\nWe want to minimize total driving time\nConsider frequency of incidents in each BA\nDon’t include fixed costs (handled by constraints)"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#objective-function-1",
    "href": "lectures/lecture-08-presentation.html#objective-function-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Objective Function",
    "text": "Objective Function\nQuestion: What could be our objective function?\n\n\\[\n\\text{minimize} \\quad \\sum_{i \\in \\mathcal{I}}\\sum_{j \\in \\mathcal{J}} t_{i,j} \\times X_{i,j}\n\\]\n\n\n\n\n\n\n\n\nExpected Driving Time\n\n\n\nTotal driving time across all assignments\nWeighted by incident frequency\nConsiders all possible BA-department pairs"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#key-constraints",
    "href": "lectures/lecture-08-presentation.html#key-constraints",
    "title": "Lecture VIII - Police Districting",
    "section": "Key Constraints",
    "text": "Key Constraints\n\n\n\n\nQuestion: Constraints needed?\n\nBA must have one department\nLimit number of departments\nOnly assign active departments\nEnsure contiguous districts\nMaintain district compactness"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#single-assignment-constraint",
    "href": "lectures/lecture-08-presentation.html#single-assignment-constraint",
    "title": "Lecture VIII - Police Districting",
    "section": "Single Assignment Constraint?",
    "text": "Single Assignment Constraint?\nQuestion: Why do we need this constraint?\n\n\nEach BA must be assigned to exactly one department\nPrevents overlapping jurisdictions\nEnsures complete coverage\n\n\n\n\n\n\n\n\n\nWe need the following variables:\n\n\n\n\\(X_{i,j}\\) - 1 if BA \\(j\\) assigned to department \\(i\\), 0 otherwise"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#single-assignment-constraint-1",
    "href": "lectures/lecture-08-presentation.html#single-assignment-constraint-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Single Assignment Constraint?",
    "text": "Single Assignment Constraint?\nQuestion: What could the constraint look like?\n\n\\[\n\\sum_{i \\in \\mathcal{I}} X_{i,j} = 1 \\quad \\forall j \\in \\mathcal{J}\n\\]\n\n\n\n\n\n\n\n\nEach BA must be assigned to exactly one department."
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#department-count-constraint",
    "href": "lectures/lecture-08-presentation.html#department-count-constraint",
    "title": "Lecture VIII - Police Districting",
    "section": "Department Count Constraint?",
    "text": "Department Count Constraint?\n\n\n\n\n\n\nThe goal of these constraints is to:\n\n\nEnsure that exactly \\(p\\) departments are opened.\n\n\n\n\n\n\n\n\n\n\nWe need the following sets and variables:\n\n\n\n\\(\\mathcal{I}\\) - Set of potential department locations, indexed by \\(i\\)\n\\(\\mathcal{J}\\) - Set of BAs, indexed by \\(j\\)\n\\(X_{i,j}\\) - 1, if BA \\(j\\) assigned to department \\(i\\), 0 otherwise\n\\(p\\) - Number of departments"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#department-count-constraint-1",
    "href": "lectures/lecture-08-presentation.html#department-count-constraint-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Department Count Constraint",
    "text": "Department Count Constraint\nQuestion: What could the constraint look like?\n\n\\[\n\\sum_{i \\in \\mathcal{I}} X_{i,i} = p\n\\]\n\n\nQuestion: What happens if we have more departments than potential locations?\n\n\n\nWe can’t open more departments than there are locations\nThe model will be infeasible"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#active-department-constraint",
    "href": "lectures/lecture-08-presentation.html#active-department-constraint",
    "title": "Lecture VIII - Police Districting",
    "section": "Active Department Constraint?",
    "text": "Active Department Constraint?\n\n\n\n\n\n\nThe goal of these constraints is to:\n\n\nEnsure that each BA is assigned to an active department, e.g. a department that is opened and that could dispatch vehicles.\n\n\n\n\n\n\n\n\n\n\nWe need the following sets and variables:\n\n\n\n\\(X_{i,j}\\) - 1, if BA \\(j\\) assigned to department \\(i\\), 0 otherwise\n\n\n\n\nQuestion: How do we ensure assignments only to active departments?"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#active-department-constraint-1",
    "href": "lectures/lecture-08-presentation.html#active-department-constraint-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Active Department Constraint",
    "text": "Active Department Constraint\n\\[\nX_{i,j} \\leq X_{i,i} \\quad \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\]\n\n\n\n\n\n\n\nThis constraint creates a logical connection between department locations and BA assignments where BAs can only be assigned to opened departments."
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#p-median-problem",
    "href": "lectures/lecture-08-presentation.html#p-median-problem",
    "title": "Lecture VIII - Police Districting",
    "section": "p-Median Problem",
    "text": "p-Median Problem\n\\[\\begin{align}\n\\text{minimize} \\quad & \\sum_{i \\in \\mathcal{I}}\\sum_{j \\in \\mathcal{J}} t_{i,j} \\times X_{i,j} \\\\\n\\text{subject to:} \\quad & \\sum_{i \\in \\mathcal{I}} X_{i,j}= 1 && \\forall j \\in \\mathcal{J} \\\\\n& \\sum_{i \\in \\mathcal{I}} X_{i,i} = p &&  \\\\\n& X_{i,j} \\leq X_{i,i} &&  \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}  \\\\\n& X_{i,j} \\in \\{0,1\\}  && \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{align}\\]"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#contiguity-introduction",
    "href": "lectures/lecture-08-presentation.html#contiguity-introduction",
    "title": "Lecture VIII - Police Districting",
    "section": "Contiguity Introduction",
    "text": "Contiguity Introduction\n\n\n\n\nQuestion: Why is contiguity important?\n\nPrevents isolated areas\nEnsures contiguous patrol routes\nMaintains operational coherence"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#what-is-compactness",
    "href": "lectures/lecture-08-presentation.html#what-is-compactness",
    "title": "Lecture VIII - Police Districting",
    "section": "What is compactness?",
    "text": "What is compactness?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompactness\n\n\nCompactness has no univocal definition; a district is commonly declared compact if it is ‘somehow round-shaped and undistorted’ (Kalcsics, Nickel, and Schröder 2005)."
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#contiguity-and-compactness-1",
    "href": "lectures/lecture-08-presentation.html#contiguity-and-compactness-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Contiguity and Compactness",
    "text": "Contiguity and Compactness\n\n\n\n\nQuestion: Are our resulting districts based on the model contiguous and compact?\n\nThis depends on \\(t_{i,j}\\)\nIf Euclidean distance\n\nDistricts will be contiguous\nLikely of compact shape"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#compactness-p-median",
    "href": "lectures/lecture-08-presentation.html#compactness-p-median",
    "title": "Lecture VIII - Police Districting",
    "section": "Compactness p-Median",
    "text": "Compactness p-Median\nQuestion: Is this likely for police service districting?\n\n\nNo, as we minimize the driving time within a city\nHighways, Tunnels, etc.\nMultiplied by the differing number of requested cars\nThis can contribute to distorted district shapes"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#contiguity-sets",
    "href": "lectures/lecture-08-presentation.html#contiguity-sets",
    "title": "Lecture VIII - Police Districting",
    "section": "Contiguity Sets",
    "text": "Contiguity Sets\nAdditional Set and Parameter\n\n\\(e_{i,j}\\) - Euclidean distance between centroids\n\\(\\mathcal{A}_j\\) - Sets of BAs adjacent to BA \\(j\\)\n\n\n\\[\n\\mathcal{N}_{i,j}=\\{v \\in \\mathcal{A}_j | e_{i,v} &lt; e_{i,j}\\} \\quad \\forall i\\in \\mathcal{I}, \\forall j\\in \\mathcal{J}\n\\]\n\n\n\n\n\n\n\n\nThe idea\n\n\nBAs closer to department \\(i\\) than BA \\(j\\) on euclidian distance and adjacent to \\(j\\)!"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#example-a",
    "href": "lectures/lecture-08-presentation.html#example-a",
    "title": "Lecture VIII - Police Districting",
    "section": "Example A",
    "text": "Example A"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#example-a-1",
    "href": "lectures/lecture-08-presentation.html#example-a-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Example A",
    "text": "Example A"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#example-b",
    "href": "lectures/lecture-08-presentation.html#example-b",
    "title": "Lecture VIII - Police Districting",
    "section": "Example B",
    "text": "Example B"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#example-b-1",
    "href": "lectures/lecture-08-presentation.html#example-b-1",
    "title": "Lecture VIII - Police Districting",
    "section": "Example B",
    "text": "Example B"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#enforcing-contiguity",
    "href": "lectures/lecture-08-presentation.html#enforcing-contiguity",
    "title": "Lecture VIII - Police Districting",
    "section": "Enforcing Contiguity",
    "text": "Enforcing Contiguity\nAll districts have to be contiguous\n\\[\nX_{i,j} \\leq \\sum_{v \\in \\mathcal{N}_{i,j}} X_{i,v} \\quad \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J} \\setminus \\mathcal{A}_i: i \\neq j\n\\]\n\n\n\n\n\n\n\nThe idea\n\n\nAt least one department has to be assigned to a BA that is adjacent to BA \\(j\\) and closer to department \\(i\\)!"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#contiguity-and-compactness-2",
    "href": "lectures/lecture-08-presentation.html#contiguity-and-compactness-2",
    "title": "Lecture VIII - Police Districting",
    "section": "Contiguity and Compactness",
    "text": "Contiguity and Compactness\nAll districts have to be contiguous and compact\n\\[\\begin{align*}\nX_{i,j} &\\leq \\sum_{v \\in \\mathcal{N}_{i,j}}X_{i,v} && \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J} \\setminus \\mathcal{A}_i:|\\mathcal{N}_{i,j}|= 1 \\wedge i \\neq j \\\\\n2X_{i,j} &\\leq \\sum_{v \\in \\mathcal{N}_{i,j}}X_{i,v} && \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J} \\setminus \\mathcal{A}_i:|\\mathcal{N}_{i,j}|&gt; 1 \\wedge i \\neq j\n\\end{align*}\\]\n\n\n\n\n\n\n\nThe idea\n\n\nAt least one department has to be assigned to two BAs that are adjacent to BA \\(j\\) and closer to department \\(i\\)!"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#comparison",
    "href": "lectures/lecture-08-presentation.html#comparison",
    "title": "Lecture VIII - Police Districting",
    "section": "Comparison",
    "text": "Comparison\n\n\n\n\n\nOne department\n\n\n\n\n\n\nTwo departments\n\n\n\n\n\n\nUp to three departments\n\n\n\n\n\n\n\n\n\n\nWhy does this work?\n\n\nDue to the constraints, there is always a path back to the department if a BA is assigned to a department!"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#characteristics",
    "href": "lectures/lecture-08-presentation.html#characteristics",
    "title": "Lecture VIII - Police Districting",
    "section": "Characteristics",
    "text": "Characteristics\nQuestions: On model characteristics\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domains do we have?\nWhat do you think, can the model be solved quickly?\nHave we prevented isolated districts?"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#model-assumptions",
    "href": "lectures/lecture-08-presentation.html#model-assumptions",
    "title": "Lecture VIII - Police Districting",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\nWhat assumptions have we made?\nUse Euclidean distances to approximate driving time?\nCan we rely on incident data collected by the police?"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#overview-of-studies",
    "href": "lectures/lecture-08-presentation.html#overview-of-studies",
    "title": "Lecture VIII - Police Districting",
    "section": "Overview of Studies",
    "text": "Overview of Studies\n\nQuestion: Where did we apply our model?\n\nTwo distinct environments:\n\nLarge metropolitan area (Germany)\nRural region (Belgium)\n\nDifferent challenges and requirements\nFocus on response time optimization"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#german-metropolitan-case",
    "href": "lectures/lecture-08-presentation.html#german-metropolitan-case",
    "title": "Lecture VIII - Police Districting",
    "section": "German Metropolitan Case",
    "text": "German Metropolitan Case\n\n\n\n1.8 mio incidents (2015-2019)\n~20 department locations\n1,596 basic areas\nDense urban environment\n\n\n\n\n\nGoal: Redesign districts to improve response time."
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#german-metropolitan-results",
    "href": "lectures/lecture-08-presentation.html#german-metropolitan-results",
    "title": "Lecture VIII - Police Districting",
    "section": "German Metropolitan Results",
    "text": "German Metropolitan Results"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#belgian-rural-case",
    "href": "lectures/lecture-08-presentation.html#belgian-rural-case",
    "title": "Lecture VIII - Police Districting",
    "section": "Belgian Rural Case",
    "text": "Belgian Rural Case\n\n\n\n50,000 incidents (2019-2020)\n2 existing + 1 planned location\n1,233 basic areas\nDispersed rural setting\n\n\n\n\n\nGoal: Optimize coverage with limited resources."
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#belgian-rural-results",
    "href": "lectures/lecture-08-presentation.html#belgian-rural-results",
    "title": "Lecture VIII - Police Districting",
    "section": "Belgian Rural Results",
    "text": "Belgian Rural Results"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#simulation-framework",
    "href": "lectures/lecture-08-presentation.html#simulation-framework",
    "title": "Lecture VIII - Police Districting",
    "section": "Simulation Framework",
    "text": "Simulation Framework\nQuestion: How did we validate the results?\n\n\n\nSpatial and temporal patterns\nShift schedules\nPriority handling\nRush hours\nInter-district support\nVariable driving times"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#results",
    "href": "lectures/lecture-08-presentation.html#results",
    "title": "Lecture VIII - Police Districting",
    "section": "Results",
    "text": "Results\n\nResponse time reduction up to 14.52%\nBetter workload distribution\nImproved coverage equity\nMore efficient resource utilization\n\n\n\n\n\n\n\n\nAll improvements are without additional staff!"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#conclusions",
    "href": "lectures/lecture-08-presentation.html#conclusions",
    "title": "Lecture VIII - Police Districting",
    "section": "Conclusions",
    "text": "Conclusions\n\nModel adaptability crucial\nLocal context matters\nStakeholder buy-in essential\nData quality critical\n\n\n\n\n\n\n\n\nSuccess requires balancing theoretical optimization with practical constraints!"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#future-applications",
    "href": "lectures/lecture-08-presentation.html#future-applications",
    "title": "Lecture VIII - Police Districting",
    "section": "Future Applications",
    "text": "Future Applications\nQuestion: Where else could this approach be useful?\n\nOther emergency services\nDifferent urban contexts\nResource allocation problems\nService territory design\n\n\n\n\n\n\n\n\nThe methodology is adaptable to various public service optimization scenarios."
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#wrap-up",
    "href": "lectures/lecture-08-presentation.html#wrap-up",
    "title": "Lecture VIII - Police Districting",
    "section": "Wrap Up",
    "text": "Wrap Up\n\n\n\n\n\n\nAnd that’s it for todays lecture!\n\n\nWe now have covered districting problems and are ready to start solving some tasks in the upcoming tutorial."
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#section-3",
    "href": "lectures/lecture-08-presentation.html#section-3",
    "title": "Lecture VIII - Police Districting",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#literature-i",
    "href": "lectures/lecture-08-presentation.html#literature-i",
    "title": "Lecture VIII - Police Districting",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lecture-08-presentation.html#literature-ii",
    "href": "lectures/lecture-08-presentation.html#literature-ii",
    "title": "Lecture VIII - Police Districting",
    "section": "Literature II",
    "text": "Literature II\n\n\n\n\nBodily, Samuel E. 1978. “Police Sector Design Incorporating Preferences of Interest Groups for Equality and Efficiency.” Management Science 24 (12): 1301–13. https://doi.org/10.1287/mnsc.24.12.1301.\n\n\nBruce, Christopher. 2009. “Districting and Resource Allocation: A Question of Balance.” A Quarterly Bulletin of Applied Geography for the Study of Crime & Public Safety 1 (4): 1–3.\n\n\nD’Amico, Steven J., Shoou-Jiun Wang, Rajan Batta, and Christopher M. Rump. 2002. “A Simulated Annealing Approach to Police District Design.” Computers & Operations Research 29 (6): 667–84. https://doi.org/10.1016/s0305-0548(01)00056-9.\n\n\nKalcsics, Jörg, Stefan Nickel, and Michael Schröder. 2005. “Towards a Unified Territorial Design Approach — Applications, Algorithms and GIS Integration.” Top 13 (1): 1–56. https://doi.org/10.1007/BF02578982.\n\n\nLiberatore, Federico, Miguel Camacho-Collados, and Begoña Vitoriano. 2020. “Police Districting Problem: Literature Review and Annotated Bibliography.” In International Series in Operations Research & Management Science: Optimal Districting and Territory Design, edited by Roger Z. Ríos-Mercado, 9–29. Cham: Springer International Publishing. https://doi.org/10.1007/978-3-030-34312-5_2.\n\n\nMayer, Allison. 2009. “Geospatial Technology Helps East Orange Crack down on Crime.” A Quarterly Bulletin of Applied Geography for the Study of Crime & Public Safety 1 (4): 8–10.\n\n\nMiller, Herbert F., and Bastiaan A. Knoppers. 1972. “Computer Simulation of Police Dispatching and Patrol Functions.” In International Symposium on Criminal Justice Information and Statistics Systems Proceedings, edited by Gary Cooper, 167–79. National Institute of Justice.\n\n\nVlćek, Tobias, Knut Haase, Malte Fliedner, and Tobias Cors. 2024. “Police Service District Planning.” OR Spectrum, February. https://doi.org/10.1007/s00291-024-00745-3.\n\n\nWang, Jue, and Mei-Po Kwan. 2018. “Hexagon-Based Adaptive Crystal Growth Voronoi Diagrams Based on Weighted Planes for Service Area Delimitation.” ISPRS International Journal of Geo-Information 7: 257. https://doi.org/10.3390/ijgi7070257.\n\n\nZoltners, Andris A., and Prabhakant Sinha. 1983. “Sales Territory Alignment: A Review and Model.” Management Science 29 (11): 1237–56. https://doi.org/10.1287/mnsc.29.11.1237."
  },
  {
    "objectID": "lectures/lecture-10-intermission.html",
    "href": "lectures/lecture-10-intermission.html",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "",
    "text": "Today’s lecture is a little bit different\nManage your expectations\nGive you a better idea of what to expect from the exam\nWe will go through some examples together!\n\n\n\n\n\nExam consists of three parts\nFree modelling, questions, Julia coding\nEach point corresponds to approximately 1 minute of work\n\n. . .\n\n\n\n\n\n\nYou can take a handwritten DIN A4 sheet of paper with you!\n\n\n\n\n\n\n\n\n\n\n\n\nTipBefore starting the exam:\n\n\n\n\nReview modeling notation conventions\nPractice writing sets, parameters, and variables\nReview common constraint patterns\nPractice Julia syntax\nPrepare your DIN A4 cheat sheet",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#todays-lecture",
    "href": "lectures/lecture-10-intermission.html#todays-lecture",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "",
    "text": "Today’s lecture is a little bit different\nManage your expectations\nGive you a better idea of what to expect from the exam\nWe will go through some examples together!",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#exams-structure",
    "href": "lectures/lecture-10-intermission.html#exams-structure",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "",
    "text": "Exam consists of three parts\nFree modelling, questions, Julia coding\nEach point corresponds to approximately 1 minute of work\n\n. . .\n\n\n\n\n\n\nYou can take a handwritten DIN A4 sheet of paper with you!",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#exam-preparation-checklist",
    "href": "lectures/lecture-10-intermission.html#exam-preparation-checklist",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "",
    "text": "TipBefore starting the exam:\n\n\n\n\nReview modeling notation conventions\nPractice writing sets, parameters, and variables\nReview common constraint patterns\nPractice Julia syntax\nPrepare your DIN A4 cheat sheet",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#a-6-points",
    "href": "lectures/lecture-10-intermission.html#a-6-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "1.a (6 Points)",
    "text": "1.a (6 Points)\nA company that ships ice cream wants to maximize their profit. It can do that by transporting its different sorts of ice cream from their only production facility to several supermarkets.\nEach delivered sort of ice cream makes the ice cream company a different profit per unit. The transportation costs per truckload are totally negligible as is the routing, as all supermarkets are located very close to each other. The company should maximally deliver the agreed number of units of each ice cream sort to each individual supermarket.\nTo do so, the company owns one truck which has a fixed total capacity for a number of units of ice cream. Note, that each unit of ice cream consumes a different amount of space in the truck! The required space for each unit of ice cream is given for each sort. The optimal number of units from each sort to ship to each supermarket should be computed by the model.\nDefine all sets, parameters and variables required to model the problem described above. Select a suitable notation of your choice. Make sure to explicitly state in your notation which elements are sets, parameters and variables.\n\n\n\n\n\n\nNote that the problem does not have to be modeled yet!\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#b-2-points",
    "href": "lectures/lecture-10-intermission.html#b-2-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "1.b (2 Points)",
    "text": "1.b (2 Points)\nPlease define the objective function to model the described problem based on your defined notation.\n\n\n\n\n\n\nIf you need additional sets, parameters or variables that are not yet defined, please define them as well.\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#c-4-points",
    "href": "lectures/lecture-10-intermission.html#c-4-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "1.c (4 Points)",
    "text": "1.c (4 Points)\nPlease define all necessary constraints and the variable ranges to model the described problem based on your notation.\n\n\n\n\n\n\nIf you need additional sets, parameters or variables that are not yet defined, please define them as well.\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#d-2-points",
    "href": "lectures/lecture-10-intermission.html#d-2-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "1.d (2 Points)",
    "text": "1.d (2 Points)\nIs the model formulation a linear problem with binary variables?\nPlease explain your answer briefly.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#e-8-points",
    "href": "lectures/lecture-10-intermission.html#e-8-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "1.e (8 Points)",
    "text": "1.e (8 Points)\nThe supermarkets are furious because the company doesn’t always deliver the agreed truckloads of ice cream. Therefore, they want to penalize the company in the future, if it delivers less than the agreed amount. For each demand of a supermarket that could not be fulfilled, the company will have to pay a one-time fee for the ice-cream sort.\nHow can you expand your model to reflect this new situation? Write down all additional or modified sets, parameters, variables, constraints and the objective function while describing each with a few words.\n\n\n\n\n\n\nNote, that you only need to write down new and modified elements!\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#f-8-points",
    "href": "lectures/lecture-10-intermission.html#f-8-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "1.f (8 Points)",
    "text": "1.f (8 Points)\nNext to the production facility of the ice cream company sits a company that sells frozen fish. Due to declining fish stocks in the ocean, the company does not need all of its trucks. It offers to rent their trucks for a certain price to the ice cream company so it can transport more ice cream. These trucks have twice the capacity of the truck currently in use by the ice cream company.\nHow can you expand your model to reflect this new situation? Write down all additional or modified Sets, parameters, variables, constraints and the objective function while describing each with a few words.\n\n\n\n\n\n\nNote, that you only need to write down new and modified elements! If you haven’t solved the previous task, work with the model defined before.\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#a-3-points",
    "href": "lectures/lecture-10-intermission.html#a-3-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "2.a (3 Points)",
    "text": "2.a (3 Points)\nWhat is the goal of the Territory Design Problem (Districting Problem)?\nPlease answer in 2-3 sentences.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#b-3-points",
    "href": "lectures/lecture-10-intermission.html#b-3-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "2.b (3 Points)",
    "text": "2.b (3 Points)\n\n\n\n\n\n\\(t_{mi}\\)\nA\nB\nC\nD\n\n\n\n\n1\n0\n0\n1\n1\n\n\n2\n1\n0\n1\n0\n\n\n3\n1\n0\n0\n1\n\n\n4\n1\n0\n1\n1\n\n\n5\n1\n1\n0\n1\n\n\n6\n1\n1\n0\n1\n\n\n\n\nPlease compute the coappearance matrix that results from these transactions.\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#c-2-points",
    "href": "lectures/lecture-10-intermission.html#c-2-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "2.c (2 Points)",
    "text": "2.c (2 Points)\nBriefly explain in 2-3 sentences what a global optimum in an optimization problem is.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#d-3-points",
    "href": "lectures/lecture-10-intermission.html#d-3-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "2.d (3 Points)",
    "text": "2.d (3 Points)\nName three optimization problems, e.g. Knapsack Problem.\nYou are welcome to answer this question in bullet points.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#e-4-points",
    "href": "lectures/lecture-10-intermission.html#e-4-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "2.e (4 Points)",
    "text": "2.e (4 Points)\nExplain briefly in 2-3 sentences what so-called “Big-M” constraints can be used for in mathematical modeling.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#hints",
    "href": "lectures/lecture-10-intermission.html#hints",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "Hints",
    "text": "Hints\n\n\n\n\n\n\nNoteProgramming Tips\n\n\n\n\nPay attention to variable names and consistency\nCheck for proper package imports\nVerify array indexing\nRemember to use the correct comparison operators\nMake sure to use proper JuMP syntax",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#a-7-points",
    "href": "lectures/lecture-10-intermission.html#a-7-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "3.a (7 Points)",
    "text": "3.a (7 Points)\nThe following Julia code contains seven errors. Highlight the errors in the code and briefly describe what would need to be done to correct them.\n\n\n\n\n\n\nAssume that all variables containing data are loaded correctly, e.g. availablePanels and requestedPanels are already defined.\n\n\n\n# Load the necessary packages\nusing JuMP\nusing HiGHS\n\n# Define the size of the problem instance\nnrSuppliers = length(availablePanels)\nnrCustomers = length(requestedPanels)\n\n# Create model instance\ntransport = Model(HiGHS.Optimizer)\n\n# Define variable\n@variable(transport_model, X[i = nrSuppliers,j = 1:nrCustomers], Bin)\n\n# Define objective\n@objective(transport_model, Max,\n    sum(travelCosts[i,j]* X[i] for i in 1:nrSuppliers, j in 1:nrCustomers)\n    )\n# Define the constraints\n@constraint(transport_model,\n    restrictAvailable[i=1:nrSuppliers],\n    sum(X[i,j] for j in 1:nrCustomers) &lt;= available[i]\n    )\n@constraint(transport_model,\n    restrictDemand[j=1:nrCustomers],\n    sum(X[i,j] for i in 1:nrSuppliers) === requested[j]\n    )\n# Start optimization\nstart_optimization(transport_model)\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#b-4-points",
    "href": "lectures/lecture-10-intermission.html#b-4-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "3.b (4 Points)",
    "text": "3.b (4 Points)\nIn an optimization model, the following equations are given:\n\\[\n\\sum_{m\\in \\mathcal{M}} 7 * U_{gm} * T_m - \\sum_{k \\in \\mathcal{K}} R_k \\leq D_g \\quad \\forall g \\in \\mathcal{G}\n\\]\nPlease define the equations in correct Julia syntax.\n\n\n\n\n\n\nAssume that all required sets, variables, and parameters have already been defined.\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#c-2-points-1",
    "href": "lectures/lecture-10-intermission.html#c-2-points-1",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "3.c (2 Points)",
    "text": "3.c (2 Points)\nFor an optimization model the following binary variable is supposed to be created:\n\\(X_{i,j}\\) where \\(i \\in \\{1,2,...,10\\}\\) and \\(j \\in \\{1,2,...,5\\}\\).\nSpecify the definition of the variable in correct Julia syntax.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#d-2-points-1",
    "href": "lectures/lecture-10-intermission.html#d-2-points-1",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "3.d (2 Points)",
    "text": "3.d (2 Points)\nWhat is the difference between a linear and a nonlinear problem? Please describe the difference in a few sentences.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#key-takeaways",
    "href": "lectures/lecture-10-intermission.html#key-takeaways",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "Key Takeaways",
    "text": "Key Takeaways\n\n\n\n\n\n\nImportantRemember\n\n\n\n\nTime management is crucial\nRead questions carefully\nDescribe your work clearly\nUse your cheat sheet strategically\nDouble-check your answers if time permits",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#the-end",
    "href": "lectures/lecture-10-intermission.html#the-end",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "The end",
    "text": "The end\n\n\n\n\n\n\nNoteAnd that’s it for todays lecture!\n\n\n\nWe now have covered the structure of the exam and you have a better idea of what to expect from the exam. In our upcoming tuorial, we will go through some additional examples and practice tasks.",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#section",
    "href": "lectures/lecture-10-intermission.html#section",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-intermission.html#literature-i",
    "href": "lectures/lecture-10-intermission.html#literature-i",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "10 Intermission",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#todays-lecture",
    "href": "lectures/lecture-10-presentation.html#todays-lecture",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "Today’s lecture",
    "text": "Today’s lecture\n\nToday’s lecture is a little bit different\nManage your expectations\nGive you a better idea of what to expect from the exam\nWe will go through some examples together!"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#exams-structure",
    "href": "lectures/lecture-10-presentation.html#exams-structure",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "Exam’s structure",
    "text": "Exam’s structure\n\nExam consists of three parts\nFree modelling, questions, Julia coding\nEach point corresponds to approximately 1 minute of work\n\n\n\n\n\n\n\n\nYou can take a handwritten DIN A4 sheet of paper with you!"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#exam-preparation-checklist",
    "href": "lectures/lecture-10-presentation.html#exam-preparation-checklist",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "Exam Preparation Checklist",
    "text": "Exam Preparation Checklist\n\n\n\n\n\n\nBefore starting the exam:\n\n\n\nReview modeling notation conventions\nPractice writing sets, parameters, and variables\nReview common constraint patterns\nPractice Julia syntax\nPrepare your DIN A4 cheat sheet"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#a-6-points",
    "href": "lectures/lecture-10-presentation.html#a-6-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "1.a (6 Points)",
    "text": "1.a (6 Points)\nA company that ships ice cream wants to maximize their profit. It can do that by transporting its different sorts of ice cream from their only production facility to several supermarkets.\nEach delivered sort of ice cream makes the ice cream company a different profit per unit. The transportation costs per truckload are totally negligible as is the routing, as all supermarkets are located very close to each other. The company should maximally deliver the agreed number of units of each ice cream sort to each individual supermarket.\nTo do so, the company owns one truck which has a fixed total capacity for a number of units of ice cream. Note, that each unit of ice cream consumes a different amount of space in the truck! The required space for each unit of ice cream is given for each sort. The optimal number of units from each sort to ship to each supermarket should be computed by the model.\nDefine all sets, parameters and variables required to model the problem described above. Select a suitable notation of your choice. Make sure to explicitly state in your notation which elements are sets, parameters and variables.\n\n\n\n\n\n\nNote that the problem does not have to be modeled yet!\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#b-2-points",
    "href": "lectures/lecture-10-presentation.html#b-2-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "1.b (2 Points)",
    "text": "1.b (2 Points)\nPlease define the objective function to model the described problem based on your defined notation.\n\n\n\n\n\n\nIf you need additional sets, parameters or variables that are not yet defined, please define them as well.\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#c-4-points",
    "href": "lectures/lecture-10-presentation.html#c-4-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "1.c (4 Points)",
    "text": "1.c (4 Points)\nPlease define all necessary constraints and the variable ranges to model the described problem based on your notation.\n\n\n\n\n\n\nIf you need additional sets, parameters or variables that are not yet defined, please define them as well.\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#d-2-points",
    "href": "lectures/lecture-10-presentation.html#d-2-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "1.d (2 Points)",
    "text": "1.d (2 Points)\nIs the model formulation a linear problem with binary variables?\nPlease explain your answer briefly.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#e-8-points",
    "href": "lectures/lecture-10-presentation.html#e-8-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "1.e (8 Points)",
    "text": "1.e (8 Points)\nThe supermarkets are furious because the company doesn’t always deliver the agreed truckloads of ice cream. Therefore, they want to penalize the company in the future, if it delivers less than the agreed amount. For each demand of a supermarket that could not be fulfilled, the company will have to pay a one-time fee for the ice-cream sort.\nHow can you expand your model to reflect this new situation? Write down all additional or modified sets, parameters, variables, constraints and the objective function while describing each with a few words.\n\n\n\n\n\n\nNote, that you only need to write down new and modified elements!\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#f-8-points",
    "href": "lectures/lecture-10-presentation.html#f-8-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "1.f (8 Points)",
    "text": "1.f (8 Points)\nNext to the production facility of the ice cream company sits a company that sells frozen fish. Due to declining fish stocks in the ocean, the company does not need all of its trucks. It offers to rent their trucks for a certain price to the ice cream company so it can transport more ice cream. These trucks have twice the capacity of the truck currently in use by the ice cream company.\nHow can you expand your model to reflect this new situation? Write down all additional or modified Sets, parameters, variables, constraints and the objective function while describing each with a few words.\n\n\n\n\n\n\nNote, that you only need to write down new and modified elements! If you haven’t solved the previous task, work with the model defined before.\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#a-3-points",
    "href": "lectures/lecture-10-presentation.html#a-3-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "2.a (3 Points)",
    "text": "2.a (3 Points)\nWhat is the goal of the Territory Design Problem (Districting Problem)?\nPlease answer in 2-3 sentences.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#b-3-points",
    "href": "lectures/lecture-10-presentation.html#b-3-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "2.b (3 Points)",
    "text": "2.b (3 Points)\n\n\n\n\n\n\\(t_{mi}\\)\nA\nB\nC\nD\n\n\n\n\n1\n0\n0\n1\n1\n\n\n2\n1\n0\n1\n0\n\n\n3\n1\n0\n0\n1\n\n\n4\n1\n0\n1\n1\n\n\n5\n1\n1\n0\n1\n\n\n6\n1\n1\n0\n1\n\n\n\n\nPlease compute the coappearance matrix that results from these transactions.\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#c-2-points",
    "href": "lectures/lecture-10-presentation.html#c-2-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "2.c (2 Points)",
    "text": "2.c (2 Points)\nBriefly explain in 2-3 sentences what a global optimum in an optimization problem is.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#d-3-points",
    "href": "lectures/lecture-10-presentation.html#d-3-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "2.d (3 Points)",
    "text": "2.d (3 Points)\nName three optimization problems, e.g. Knapsack Problem.\nYou are welcome to answer this question in bullet points.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#e-4-points",
    "href": "lectures/lecture-10-presentation.html#e-4-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "2.e (4 Points)",
    "text": "2.e (4 Points)\nExplain briefly in 2-3 sentences what so-called “Big-M” constraints can be used for in mathematical modeling.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#hints",
    "href": "lectures/lecture-10-presentation.html#hints",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "Hints",
    "text": "Hints\n\n\n\n\n\n\nProgramming Tips\n\n\n\nPay attention to variable names and consistency\nCheck for proper package imports\nVerify array indexing\nRemember to use the correct comparison operators\nMake sure to use proper JuMP syntax"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#a-7-points",
    "href": "lectures/lecture-10-presentation.html#a-7-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "3.a (7 Points)",
    "text": "3.a (7 Points)\nThe following Julia code contains seven errors. Highlight the errors in the code and briefly describe what would need to be done to correct them.\n\n\n\n\n\n\nAssume that all variables containing data are loaded correctly, e.g. availablePanels and requestedPanels are already defined.\n\n\n\n# Load the necessary packages\nusing JuMP\nusing HiGHS\n\n# Define the size of the problem instance\nnrSuppliers = length(availablePanels)\nnrCustomers = length(requestedPanels)\n\n# Create model instance\ntransport = Model(HiGHS.Optimizer)\n\n# Define variable\n@variable(transport_model, X[i = nrSuppliers,j = 1:nrCustomers], Bin)\n\n# Define objective\n@objective(transport_model, Max,\n    sum(travelCosts[i,j]* X[i] for i in 1:nrSuppliers, j in 1:nrCustomers)\n    )\n# Define the constraints\n@constraint(transport_model,\n    restrictAvailable[i=1:nrSuppliers],\n    sum(X[i,j] for j in 1:nrCustomers) &lt;= available[i]\n    )\n@constraint(transport_model,\n    restrictDemand[j=1:nrCustomers],\n    sum(X[i,j] for i in 1:nrSuppliers) === requested[j]\n    )\n# Start optimization\nstart_optimization(transport_model)\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#b-4-points",
    "href": "lectures/lecture-10-presentation.html#b-4-points",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "3.b (4 Points)",
    "text": "3.b (4 Points)\nIn an optimization model, the following equations are given:\n\\[\n\\sum_{m\\in \\mathcal{M}} 7 * U_{gm} * T_m - \\sum_{k \\in \\mathcal{K}} R_k \\leq D_g \\quad \\forall g \\in \\mathcal{G}\n\\]\nPlease define the equations in correct Julia syntax.\n\n\n\n\n\n\nAssume that all required sets, variables, and parameters have already been defined.\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#c-2-points-1",
    "href": "lectures/lecture-10-presentation.html#c-2-points-1",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "3.c (2 Points)",
    "text": "3.c (2 Points)\nFor an optimization model the following binary variable is supposed to be created:\n\\(X_{i,j}\\) where \\(i \\in \\{1,2,...,10\\}\\) and \\(j \\in \\{1,2,...,5\\}\\).\nSpecify the definition of the variable in correct Julia syntax.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#d-2-points-1",
    "href": "lectures/lecture-10-presentation.html#d-2-points-1",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "3.d (2 Points)",
    "text": "3.d (2 Points)\nWhat is the difference between a linear and a nonlinear problem? Please describe the difference in a few sentences.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#key-takeaways",
    "href": "lectures/lecture-10-presentation.html#key-takeaways",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "Key Takeaways",
    "text": "Key Takeaways\n\n\n\n\n\n\nRemember\n\n\n\nTime management is crucial\nRead questions carefully\nDescribe your work clearly\nUse your cheat sheet strategically\nDouble-check your answers if time permits"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#the-end",
    "href": "lectures/lecture-10-presentation.html#the-end",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "The end",
    "text": "The end\n\n\n\n\n\n\nAnd that’s it for todays lecture!\n\n\nWe now have covered the structure of the exam and you have a better idea of what to expect from the exam. In our upcoming tuorial, we will go through some additional examples and practice tasks."
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#section",
    "href": "lectures/lecture-10-presentation.html#section",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "lectures/lecture-10-presentation.html#literature-i",
    "href": "lectures/lecture-10-presentation.html#literature-i",
    "title": "Lecture X - Intermission: Exam Preparation",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lecture-12-rail.html",
    "href": "lectures/lecture-12-rail.html",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "FIFA Worldcup 2022 took place in a small region\nThe capacity of the metro system was finite\nMore than 1 million tourists where expected\nMetro usage was free for all ticket holders\nTransport methods were expected to be overloaded\n\n. . .\nQuestion: What could become an issue?\n\n\n\n\n\n\n\n\n\nQuestion: Where could crowd disasters happen?\n. . .\n\nAt event venues and in waiting areas\nAt intersections of multiple pedestrian flows\nIn narrow passages and entrances\nOn crowded metro platforms and transfer stations\nAt ticket/turnstile bottlenecks and emergency exits\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion: What could be a potential bottleneck?\n. . .\n\nRed Line has twice the capacity of the Green and Gold Line\nPeople use the metro to get to the event venues\n\n. . .\nQuestion: What could be the issue?\n\nImagine a match at a stadium along the Gold line\nPeople from Red and Green line will try to get there\nThis will cause a massive crowd at transfer stations\n\n\n\n\n\n\n\n\n\n\n10 people want to start per minute at each station\nEverybody wants to get to station D\n\n\n\n\n\n\n\n\n\n\n\n\n\nCapacities inside the stations are limited as well\nThese include the escalators, stairs, and elevators\nBut also the platforms and the ticket gates\n\n. . .\n\n\n\n\n\n\nThis can lead to overcrowding and potential crowd disasters!\n\n\n\n\n\n\n\nQuestion: What could also be an issue?\n. . .\n\nOften unknown how many people exactly will participate\nGathering data is extremely importand and difficult\nCrowd behavior can be unpredictable and dynamic\nWeather conditions may affect transportation preferences\nCultural factors influence crowd movement patterns\nEmergency situations require flexible contingency plans\n\n\n\n\n\nLet’s take a\ncloser look at the\nproblem structure!",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#public-transport",
    "href": "lectures/lecture-12-rail.html#public-transport",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "FIFA Worldcup 2022 took place in a small region\nThe capacity of the metro system was finite\nMore than 1 million tourists where expected\nMetro usage was free for all ticket holders\nTransport methods were expected to be overloaded\n\n. . .\nQuestion: What could become an issue?",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#potential-locations",
    "href": "lectures/lecture-12-rail.html#potential-locations",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "Question: Where could crowd disasters happen?\n. . .\n\nAt event venues and in waiting areas\nAt intersections of multiple pedestrian flows\nIn narrow passages and entrances\nOn crowded metro platforms and transfer stations\nAt ticket/turnstile bottlenecks and emergency exits",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#main-bottleneck",
    "href": "lectures/lecture-12-rail.html#main-bottleneck",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "Question: What could be a potential bottleneck?\n. . .\n\nRed Line has twice the capacity of the Green and Gold Line\nPeople use the metro to get to the event venues\n\n. . .\nQuestion: What could be the issue?\n\nImagine a match at a stadium along the Gold line\nPeople from Red and Green line will try to get there\nThis will cause a massive crowd at transfer stations",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#visualization",
    "href": "lectures/lecture-12-rail.html#visualization",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "10 people want to start per minute at each station\nEverybody wants to get to station D",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#capacities-inside-the-stations",
    "href": "lectures/lecture-12-rail.html#capacities-inside-the-stations",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "Capacities inside the stations are limited as well\nThese include the escalators, stairs, and elevators\nBut also the platforms and the ticket gates\n\n. . .\n\n\n\n\n\n\nThis can lead to overcrowding and potential crowd disasters!",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#general-issues",
    "href": "lectures/lecture-12-rail.html#general-issues",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "Question: What could also be an issue?\n. . .\n\nOften unknown how many people exactly will participate\nGathering data is extremely importand and difficult\nCrowd behavior can be unpredictable and dynamic\nWeather conditions may affect transportation preferences\nCultural factors influence crowd movement patterns\nEmergency situations require flexible contingency plans",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#section",
    "href": "lectures/lecture-12-rail.html#section",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "Let’s take a\ncloser look at the\nproblem structure!",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#objective",
    "href": "lectures/lecture-12-rail.html#objective",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Objective",
    "text": "Objective\nQuestion: What could be the objectives of the authorities?\n. . .\n\nA safe and successful event as host country\nGood publicity and a positive recognition worldwide\nSatisfied visitors that enjoyed their time\n\n. . .\n\n\n\n\n\n\nNoteNote: We can model none of the above directly!\n\n\n\nBut we can assist in the estimation of transport demands and the design of operational plans to ensure public safety and a smooth transportation through the city.",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#underlying-problem",
    "href": "lectures/lecture-12-rail.html#underlying-problem",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Underlying Problem",
    "text": "Underlying Problem\nQuestion: Can we just start modeling?\n. . .\n\nFirst, we need to understand the movement patterns\nEvent is unprecedented, movement patterns are unknown\nMultiple concurrent events affect flow patterns\n\n. . .\n\n\n\n\n\n\nTipTip: We need to estimate the data first!\n\n\n\nThis is a huge challenge, but we can use simulation to estimate the data.",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#simulation",
    "href": "lectures/lecture-12-rail.html#simulation",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Simulation",
    "text": "Simulation\n\nBased on publicly available data from the area\nSimulates all individuals participating at the event\nIncludes all transportation infrastructure\nIndividual mode choice based on a choice model\n\n. . .\n\n\n\n\n\n\nTipTip: Julia is a great tool for this!\n\n\n\nSimulations was build in Julia. With 1,000,000 individuals walking,using cars, busses, and the metro, a day took less than 5 minutes.",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#results-of-the-simulation",
    "href": "lectures/lecture-12-rail.html#results-of-the-simulation",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Results of the Simulation",
    "text": "Results of the Simulation\n\n\n\n\n\nDetailed movement patterns throughout the region\nPotential sections at risk in the transport infrastructure\nPotential capacity overloads at event locations",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#section-1",
    "href": "lectures/lecture-12-rail.html#section-1",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "But it is still\nbased on a lot\nof assumptions!",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#main-risk-metro",
    "href": "lectures/lecture-12-rail.html#main-risk-metro",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Main risk: Metro",
    "text": "Main risk: Metro",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#idea",
    "href": "lectures/lecture-12-rail.html#idea",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Idea",
    "text": "Idea\nQuestion: What can we do to prevent crowd disasters?\n. . .\n\nRegulate the inflow at each individual station\nEnsure utilized capacity is always within bounds\n\n. . .\nQuestion: What could we try to model?\n. . .\n\nMinimize the queues outside of the metro stations\nBased on the allowed inflow and origin-destination data\nAdhering to the capacity constraints",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#difficulty",
    "href": "lectures/lecture-12-rail.html#difficulty",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Difficulty",
    "text": "Difficulty\n\n\n\n\n\n. . .\n\nMovement patterns have different origin-destination pairs\nRegulating the inflow does not affect the destination",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#graph-sets",
    "href": "lectures/lecture-12-rail.html#graph-sets",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Graph Sets?",
    "text": "Graph Sets?\nQuestion: What could be the sets for the graph?",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#graph-sets-1",
    "href": "lectures/lecture-12-rail.html#graph-sets-1",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Graph Sets?",
    "text": "Graph Sets?\n\n\\(\\mathcal{G}\\) - Connected digraph of the metro network \\(\\mathcal{G}=(\\mathcal{O},\\mathcal{E})\\)\n\\(\\mathcal{O}\\) - Set of metro stations, indexed by \\(o\\)\n\\(\\mathcal{E}\\) - Set of directed arcs between connected stations\n\n. . .\n\n\n\n\n\n\nNoteNote: These are the easier sets.\n\n\n\nThese simply help us to represent the entire metro system as a graph with different nodes \\(\\mathcal{O}\\) and arcs \\(\\mathcal{E}\\) between connected stations.",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#time-sets",
    "href": "lectures/lecture-12-rail.html#time-sets",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Time Sets?",
    "text": "Time Sets?\nQuestion: What could be the time sets?\n\n\n\\(\\mathcal{T}\\) - Set of minutes in the time horizon, indexed by \\(t\\)\n\\(\\mathcal{P}\\) - Set of periods in the observed time horizon, where \\(p \\in \\{1, 2, \\dots,n\\}\\)\n\n\n. . .\n\n\n\n\n\n\nNoteNote: Number of periods\n\n\n\nWe further define \\(n\\) as the number of periods in observed time horizon.",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#periods",
    "href": "lectures/lecture-12-rail.html#periods",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Periods",
    "text": "Periods\nQuestion: Why do we add periods here?\n. . .\n\nStaff needs clear, consistent instructions\nFrequent changes in flow increase risk of errors\nEasier to manage and communicate for planners\n\n. . .\n\n\n\n\n\n\nNoteNote: Period Length\n\n\n\nWe define the period length as the length of the period in minutes measured as \\(m\\) minutes, which is the same for all periods.",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#mapping-minutes-to-periods",
    "href": "lectures/lecture-12-rail.html#mapping-minutes-to-periods",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Mapping Minutes to Periods",
    "text": "Mapping Minutes to Periods\n\nWe can define an additional set with their relation\nIt specifies the relation of periods \\(p\\) to minutes \\(t\\).\n\n\\[\n    I_p =\\{t \\in \\mathcal{T}|(p-1) \\times m + 1 \\leq t \\leq p \\times m\\} \\quad \\forall p \\in \\mathcal{P}\n\\]\n. . .\nQuestion: Can anybody explain it?\n. . .\n\n\\(I_p\\) is the set of minutes \\(t\\) that belong to period \\(p\\)\nMinutes are not overlapping, but they are continuous",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#parameters",
    "href": "lectures/lecture-12-rail.html#parameters",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Parameters?",
    "text": "Parameters?\nQuestion: What could be possible parameters?\n. . .\n\n\\(q_{o,d,p}\\) - Demand from station \\(o\\) to \\(d\\) with \\(o,d \\in \\mathcal{O}\\) in \\(p\\)\n\\(d_{e}\\) - Travel time (min) of the arcs \\(e \\in \\mathcal{E}\\)\n\\(c_e\\) - Max. allowed arc entry rate \\(e\\) per minute with \\(e \\in \\mathcal{E}\\)\n\\(c_{o}^{min}\\) - Min. station entry rate \\(o\\) per minute with \\(o \\in \\mathcal{O}\\)\n\\(c_{o}^{max}\\) - Max. station entry rate \\(o\\) per minute with \\(o \\in \\mathcal{O}\\)\n\\(\\alpha\\) - Maximal allowed arc utilization (\\(0 &lt; \\alpha &lt; 1\\))",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#metro-movement",
    "href": "lectures/lecture-12-rail.html#metro-movement",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Metro Movement",
    "text": "Metro Movement\nQuestion: How do people move inside the metro?\n. . .\n\nSimple network: assume people use the shortest path\nUse Djikstra’s algorithm to compute it\nFrom each station to all other stations\n\n. . .\n\n\n\n\n\n\nTipTip: We can save the results in a new set \\(\\mathcal{C}_{o,d}\\)\n\n\n\nThis will help us to model the movement inside the metro.",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#shortest-paths-sp",
    "href": "lectures/lecture-12-rail.html#shortest-paths-sp",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Shortest Paths (SP)",
    "text": "Shortest Paths (SP)\n\n\\(\\mathcal{C}_{o,d}\\) - Set of arcs \\(e \\in \\mathcal{E}\\) on the SP from \\(o,d \\in \\mathcal{O}\\)\n\n. . .\n\n\n\n\n\n\nNow we compute the travel time on the shortest paths. One parameter for the SP from station to station and one for the SP from station to arc.\n\n\n\n. . .\n\n\\(d_{o,d}\\) - travel time (min) on SP from \\(o \\in \\mathcal{O}\\) to \\(d \\in \\mathcal{O}\\)\n\\(d_{o,e}\\) - travel time (min) on SP from \\(o \\in \\mathcal{O}\\) to \\(e \\in \\mathcal{E}\\)",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#people-spreading",
    "href": "lectures/lecture-12-rail.html#people-spreading",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "People Spreading",
    "text": "People Spreading\nQuestion: How do people spread?",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#ratio-of-origin-destination",
    "href": "lectures/lecture-12-rail.html#ratio-of-origin-destination",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Ratio of Origin-Destination",
    "text": "Ratio of Origin-Destination\n\nWe cannot control the destination of the passengers\nThus we assume that people spread based on destination\n\n. . .\n\\[\\frac{q_{o,d,p}}{\\sum_{d \\in \\mathcal{O}} q_{o,d,p}} \\quad \\forall o,d \\in \\mathcal{O}, p\\in \\mathcal{P}\\]\n. . .\n\n\n\n\n\n\nBased on the ratio of the different destinations \\(d\\) to the total queue for each station \\(o \\in \\mathcal{O}\\) in each period \\(p \\in \\mathcal{P}\\).",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#decision-variable",
    "href": "lectures/lecture-12-rail.html#decision-variable",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Decision Variable?",
    "text": "Decision Variable?\n\n\n\n\n\n\nImportantOur goal is to:\n\n\n\nRegulate the inflow at each individual station to minimize the queues outside the metro stations based on the allowed inflow while adhering to the capacity constraints.\n\n\n\n\n\n\n\n\nThere is one queue for all passenger flow directions, as managing multiple queues would be too complex for the planners!",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#decision-variable-1",
    "href": "lectures/lecture-12-rail.html#decision-variable-1",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Decision Variable",
    "text": "Decision Variable\n\n\n\n\n\n\nNoteWe need the following sets:\n\n\n\n\nAll the metro stations, \\(o \\in \\mathcal{O}\\)\nAll periods under observation, \\(p \\in \\mathcal{P}\\)\n\n\n\nQuestion: What could be our decision variable?\n. . .\n\n\\(X_{o,p}\\) - Allowed inflow (per minute) at station \\(o\\) in period \\(p\\)",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#objective-function",
    "href": "lectures/lecture-12-rail.html#objective-function",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Objective Function?",
    "text": "Objective Function?\n\n\n\n\n\n\nImportantOur main objective is to:\n\n\n\nRegulate the inflow at each individual station to minimize the queues outside the metro stations based on the allowed inflow while adhering to the capacity constraints.\n\n\n. . .\nQuestion: How again are queues minimized?\n. . .\n\nBy the allowed inflow \\(X_{o,p}\\) subtracted from the queue",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#objective-function-1",
    "href": "lectures/lecture-12-rail.html#objective-function-1",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Objective Function",
    "text": "Objective Function\n\n\n\n\n\n\nNoteWe need the following parameters and variables:\n\n\n\n\n\\(q_{o,d,p}\\) - People queued to travel from station \\(o\\) to \\(d\\) with \\(o,d \\in \\mathcal{O}\\) in period \\(p\\)\n\\(X_{o,p}\\) - Allowed inflow (per minute) at station \\(o\\) in period \\(p\\)\n\n\n\n. . .\nQuestion: What could be our objective function?\n. . .\n\\[\n\\text{minimize} \\quad \\sum_{o \\in \\mathcal{O}} \\sum_{p \\in \\mathcal{P}} (\\sum_{d \\in \\mathcal{O}} q_{o,d,p} - m \\times X_{o,p})\n\\]",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#necessary-constraints",
    "href": "lectures/lecture-12-rail.html#necessary-constraints",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Necessary Constraints",
    "text": "Necessary Constraints\nQuestion: What constraints do we need?\n\n\n\n\n\n. . .\n\nThe capacity of each arc is not exceeded\nDo not dispatch more people than are queued\nDo not dispatch less than the minimum allowed inflow",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#section-2",
    "href": "lectures/lecture-12-rail.html#section-2",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "Things are going to\nget a little\ncomplicated now!",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#central-question",
    "href": "lectures/lecture-12-rail.html#central-question",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Central Question",
    "text": "Central Question\nQuestion: When do people flowing into the metro system change the arcs?\n. . .\n\nPeople enter metro station at \\(o\\) with destination \\(d\\)\nThey will lead to a usage of an arc \\(e\\) on their SP\nThis usage depends on their path and the travel times\n\n. . .\n\n\n\n\n\n\nTipTip: You’ll likely know what we need now!\n\n\n\nWe can add a new set \\(\\mathcal{R}_{e,t}\\) to help us with this.",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#set-of-time-delays",
    "href": "lectures/lecture-12-rail.html#set-of-time-delays",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Set of Time-Delays",
    "text": "Set of Time-Delays\n\\[\n\\mathcal{R}_{e,t} = \\{(o,d,p) \\mid\n    \\begin{array}{l}\n    (o,d) | o,d \\in \\mathcal{O}, \\\\\n    q_{o,d,p} &gt; 0, \\\\\n    e \\in \\mathcal{C}_{o,d}, \\\\\n    t-d_{o,e} \\in I_p, \\\\\n    p \\in \\mathcal{P}\\}\n    \\end{array}\n    \\quad \\forall e \\in \\mathcal{E}, t \\in \\mathcal{T}\n\\]\n. . .\nQuestion: Who can explain this set?\n. . .\nThe set \\(\\mathcal{R}_{e,t}\\) contains all combinations \\((o,d,p)\\) which trigger a capacity utilization of arc \\(e\\) in period \\(t\\).",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#small-example",
    "href": "lectures/lecture-12-rail.html#small-example",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Small Example",
    "text": "Small Example\n\n\n\n\n\n. . .\n\n\n\n\n\n\nThe set contains all possible o-d pairs and periods, that result in passengers starting at arc \\((C,D)\\) at minute \\(22\\). For m=2, it would be:\n\\(\\{((A,D),3),((B,D),5),((C,D),11),((E,D),9)\\}\\).",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#section-3",
    "href": "lectures/lecture-12-rail.html#section-3",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "Essentially, we can use this\nset to compute the utilization\nof an arc at each minute based\non the inflow level at the\ndifferent stations and periods.",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#ensure-capacity-utilization",
    "href": "lectures/lecture-12-rail.html#ensure-capacity-utilization",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Ensure Capacity Utilization?",
    "text": "Ensure Capacity Utilization?\n\n\n\n\n\n\nImportantThe goal of this constraint is to:\n\n\n\nEnsure that the capacity of each arc is not exceeded at any minute.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following variable, parameter and set:\n\n\n\n\n\\(q_{o,d,p}\\) - people waiting to travel from station \\(o \\in \\mathcal{O}\\) to station \\(d \\in \\mathcal{O}\\) in \\(p\\)\n\\(c_e\\) - people max. allowed to enter arc \\(e\\) per minute with \\(e \\in \\mathcal{E}\\)\n\\(\\mathcal{R}_{e,t}\\) - mapping of station entries to arc \\(e\\) in time \\(t\\) with \\(e \\in \\mathcal{E}\\) and \\(t \\in \\mathcal{T}\\)\n\\(\\alpha\\) - maximal allowed arc utilization (\\(0 &lt; \\alpha &lt; 1\\))\n\\(X_{o,p}\\) - the allowed inflow per minute at metro station \\(o\\) in the period \\(p\\)",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#ensure-capacity-utilization-1",
    "href": "lectures/lecture-12-rail.html#ensure-capacity-utilization-1",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Ensure Capacity Utilization",
    "text": "Ensure Capacity Utilization\nQuestion: What could be the constraint?\n. . .\n\\[\n\\sum_{(o,d,p) \\in \\mathcal{R}_{e,t}} X_{o,p} \\times \\frac{q_{o,d,p}}{\\sum_{f \\in \\mathcal{O}} q_{o,f,p}} \\leq \\alpha \\times c_{e} \\quad \\forall e \\in \\mathcal{E}, t \\in \\mathcal{T}\n\\]\n. . .\n\n\n\n\n\n\nHere, we combine the inflow at each station based on the o-d proportion and let the people spread through the network, checking that no arc is over-utilized at any minute.",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#dispatch-only-available-people",
    "href": "lectures/lecture-12-rail.html#dispatch-only-available-people",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Dispatch Only Available People?",
    "text": "Dispatch Only Available People?\n\n\n\n\n\n\nImportantThe goal of this constraint is to:\n\n\n\nEnsure that we do not dispatch more people than are queued and less than the minimum allowed inflow, preventing over- and under-dispatching.\n\n\n. . .\n\n\n\n\n\n\nNoteWe need the following variables and parameters:\n\n\n\n\n\\(X_{o,p}\\) - Allowed inflow (per minute) at station \\(o\\) in period \\(p\\)\n\\(q_{o,d,p}\\) - People queued to travel from station \\(o\\) to \\(d\\) with \\(o,d \\in \\mathcal{O}\\) in \\(p\\)\n\\(m\\) - period length in minutes",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#dispatch-only-available-people-1",
    "href": "lectures/lecture-12-rail.html#dispatch-only-available-people-1",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Dispatch Only Available People",
    "text": "Dispatch Only Available People\nQuestion: What could be the constraint?\n. . .\n\n\n\\[\n\\min\\{\\frac{\\sum_{d \\in \\mathcal{O}} q_{o,d,p}}{m},c_{o}^{\\min}\\} \\leq X_{o,p} \\leq \\min\\{\\frac{\\sum_{d \\in \\mathcal{O}} q_{o,d,p}}{m},c_{o}^{\\max}\\} \\quad \\forall o \\in \\mathcal{O}, p \\in \\mathcal{P}\n\\]\n\n. . .\n\n\n\n\n\n\nWe need this constraint for two reasons:\n\nWe could also dispatch more people than there are as this would minimize the objective value. \nWe also need to ensure that we can dispatch at least the minimum allowed inflow or less if the queue is smaller than the minimum allowed inflow.",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#metro-inflow-model",
    "href": "lectures/lecture-12-rail.html#metro-inflow-model",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Metro Inflow Model",
    "text": "Metro Inflow Model\n\n\n\\[\\begin{align*}\n    \\text{minimize} \\quad \\sum_{o \\in \\mathcal{O}} \\sum_{p \\in \\mathcal{P}} (\\sum_{d \\in \\mathcal{O}} q_{o,d,p} - m \\times X_{o,p})\n\\end{align*}\\] subject to: \\[\\begin{align*}\n    &  \\sum_{(o,d,p) \\in \\mathcal{R}_{e,t}} X_{o,p} \\times \\frac{q_{o,d,p}}{\\sum_{f \\in \\mathcal{O}} q_{o,f,p}} \\leq \\alpha \\times c_{e} && \\forall e \\in \\mathcal{E}, t \\in \\mathcal{T} \\\\\n    & min\\{\\frac{\\sum_{d \\in \\mathcal{O}} q_{o,d,p}}{m},c_{o}^{min}\\} \\leq X_{o,p} \\leq min\\{\\frac{\\sum_{d \\in \\mathcal{O}} q_{o,d,p}}{m},c_{o}^{max}\\} && \\forall o \\in \\mathcal{O}, p \\in \\mathcal{P}\n\\end{align*}\\]",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#characteristics",
    "href": "lectures/lecture-12-rail.html#characteristics",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Characteristics",
    "text": "Characteristics\nQuestions: On model characteristics\n\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domains do we have?",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#model-assumptions",
    "href": "lectures/lecture-12-rail.html#model-assumptions",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\n\nWhat assumptions have we made?\nWhat are likely issues that can arise if applied?\nHave we thought in detail about queues?\nAre shortest paths a feasible assumption?",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#metro-inflow-optimization",
    "href": "lectures/lecture-12-rail.html#metro-inflow-optimization",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Metro Inflow Optimization",
    "text": "Metro Inflow Optimization\n. . .\nQuestion: Can this be applied?",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#metro-inflow-problem",
    "href": "lectures/lecture-12-rail.html#metro-inflow-problem",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Metro Inflow Problem",
    "text": "Metro Inflow Problem\n\nSolved very fast within seconds for realistic problem sizes\nBut we cannot plan or control the metro inflow\nQueues are too simplified with passengers disappearing\n\n. . .\nQuestion: Any ideas, how the current model could be improved or how it could be embedded into a heuristic?",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#heuristic-step-wise-optimization",
    "href": "lectures/lecture-12-rail.html#heuristic-step-wise-optimization",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Heuristic: Step-Wise Optimization",
    "text": "Heuristic: Step-Wise Optimization\n\nSolve the model for the time-horizon of a few periods\nFix the inflow in the current first period\nDecrease capacity in the network based on the inflow\nTransfer remaining queues into the subsequent period\nSolve the model again\nRepeat, until the inflow is computed for all periods",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#transport-demand",
    "href": "lectures/lecture-12-rail.html#transport-demand",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Transport Demand",
    "text": "Transport Demand",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#utilization-analysis",
    "href": "lectures/lecture-12-rail.html#utilization-analysis",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Utilization Analysis",
    "text": "Utilization Analysis",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#implementation",
    "href": "lectures/lecture-12-rail.html#implementation",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Implementation",
    "text": "Implementation\n\nAssumption of known destinations based is strong\nMovements seemed to follow our forecasts\nWe did achieve our goal of metro inflow control\nSimulation was used to estimate the inflows\n\n. . .\n\n\n\n\n\n\nFew dangerous situations, especially at the FIFA Fan Fest, were handled well by the authorities.",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#wrap-up",
    "href": "lectures/lecture-12-rail.html#wrap-up",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Wrap Up",
    "text": "Wrap Up\n\nModel can help to achieve a good balance\nCan be adapted easily to any metro system worldwide \nEspecially interesting for larger Asian cities\n\n. . .\n\n\n\n\n\n\nNoteAnd that’s it for todays lecture!\n\n\n\nWe now have covered a metro inflow control problem based on a real-world application and are ready to start solving some new tasks in the upcoming tutorial.",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#section-4",
    "href": "lectures/lecture-12-rail.html#section-4",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-rail.html#literature-i",
    "href": "lectures/lecture-12-rail.html#literature-i",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "12 Metro",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#fifa-world-cup-2022-in-qatar",
    "href": "lectures/lecture-12-presentation.html#fifa-world-cup-2022-in-qatar",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "FIFA World Cup 2022 in Qatar",
    "text": "FIFA World Cup 2022 in Qatar"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#public-transport",
    "href": "lectures/lecture-12-presentation.html#public-transport",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Public transport",
    "text": "Public transport\n\nFIFA Worldcup 2022 took place in a small region\nThe capacity of the metro system was finite\nMore than 1 million tourists where expected\nMetro usage was free for all ticket holders\nTransport methods were expected to be overloaded\n\n\nQuestion: What could become an issue?"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#crowd-disasters",
    "href": "lectures/lecture-12-presentation.html#crowd-disasters",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Crowd Disasters",
    "text": "Crowd Disasters"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#potential-locations",
    "href": "lectures/lecture-12-presentation.html#potential-locations",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Potential locations",
    "text": "Potential locations\nQuestion: Where could crowd disasters happen?\n\n\nAt event venues and in waiting areas\nAt intersections of multiple pedestrian flows\nIn narrow passages and entrances\nOn crowded metro platforms and transfer stations\nAt ticket/turnstile bottlenecks and emergency exits"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#metrosystem-of-doha",
    "href": "lectures/lecture-12-presentation.html#metrosystem-of-doha",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Metrosystem of Doha",
    "text": "Metrosystem of Doha"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#main-bottleneck",
    "href": "lectures/lecture-12-presentation.html#main-bottleneck",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Main Bottleneck",
    "text": "Main Bottleneck\nQuestion: What could be a potential bottleneck?\n\n\nRed Line has twice the capacity of the Green and Gold Line\nPeople use the metro to get to the event venues\n\n\n\nQuestion: What could be the issue?\n\nImagine a match at a stadium along the Gold line\nPeople from Red and Green line will try to get there\nThis will cause a massive crowd at transfer stations"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#visualization",
    "href": "lectures/lecture-12-presentation.html#visualization",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Visualization",
    "text": "Visualization\n\n\n10 people want to start per minute at each station\nEverybody wants to get to station D"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#closer-look-at-the-metro-system",
    "href": "lectures/lecture-12-presentation.html#closer-look-at-the-metro-system",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Closer look at the Metro System",
    "text": "Closer look at the Metro System"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#capacities-inside-the-stations",
    "href": "lectures/lecture-12-presentation.html#capacities-inside-the-stations",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Capacities inside the stations",
    "text": "Capacities inside the stations\n\nCapacities inside the stations are limited as well\nThese include the escalators, stairs, and elevators\nBut also the platforms and the ticket gates\n\n\n\n\n\n\n\n\nThis can lead to overcrowding and potential crowd disasters!"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#general-issues",
    "href": "lectures/lecture-12-presentation.html#general-issues",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "General Issues",
    "text": "General Issues\nQuestion: What could also be an issue?\n\n\nOften unknown how many people exactly will participate\nGathering data is extremely importand and difficult\nCrowd behavior can be unpredictable and dynamic\nWeather conditions may affect transportation preferences\nCultural factors influence crowd movement patterns\nEmergency situations require flexible contingency plans"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#section",
    "href": "lectures/lecture-12-presentation.html#section",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "Let’s take a\ncloser look at the\nproblem structure!"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#objective",
    "href": "lectures/lecture-12-presentation.html#objective",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Objective",
    "text": "Objective\nQuestion: What could be the objectives of the authorities?\n\n\nA safe and successful event as host country\nGood publicity and a positive recognition worldwide\nSatisfied visitors that enjoyed their time\n\n\n\n\n\n\n\n\n\nNote: We can model none of the above directly!\n\n\nBut we can assist in the estimation of transport demands and the design of operational plans to ensure public safety and a smooth transportation through the city."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#underlying-problem",
    "href": "lectures/lecture-12-presentation.html#underlying-problem",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Underlying Problem",
    "text": "Underlying Problem\nQuestion: Can we just start modeling?\n\n\nFirst, we need to understand the movement patterns\nEvent is unprecedented, movement patterns are unknown\nMultiple concurrent events affect flow patterns\n\n\n\n\n\n\n\n\n\nTip: We need to estimate the data first!\n\n\nThis is a huge challenge, but we can use simulation to estimate the data."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#simulation",
    "href": "lectures/lecture-12-presentation.html#simulation",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Simulation",
    "text": "Simulation\n\nBased on publicly available data from the area\nSimulates all individuals participating at the event\nIncludes all transportation infrastructure\nIndividual mode choice based on a choice model\n\n\n\n\n\n\n\n\nTip: Julia is a great tool for this!\n\n\nSimulations was build in Julia. With 1,000,000 individuals walking,using cars, busses, and the metro, a day took less than 5 minutes."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#results-of-the-simulation",
    "href": "lectures/lecture-12-presentation.html#results-of-the-simulation",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Results of the Simulation",
    "text": "Results of the Simulation\n\n\n\n\nDetailed movement patterns throughout the region\nPotential sections at risk in the transport infrastructure\nPotential capacity overloads at event locations"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#section-1",
    "href": "lectures/lecture-12-presentation.html#section-1",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "But it is still\nbased on a lot\nof assumptions!"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#main-risk-metro",
    "href": "lectures/lecture-12-presentation.html#main-risk-metro",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Main risk: Metro",
    "text": "Main risk: Metro"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#idea",
    "href": "lectures/lecture-12-presentation.html#idea",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Idea",
    "text": "Idea\nQuestion: What can we do to prevent crowd disasters?\n\n\nRegulate the inflow at each individual station\nEnsure utilized capacity is always within bounds\n\n\n\nQuestion: What could we try to model?\n\n\n\nMinimize the queues outside of the metro stations\nBased on the allowed inflow and origin-destination data\nAdhering to the capacity constraints"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#difficulty",
    "href": "lectures/lecture-12-presentation.html#difficulty",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Difficulty",
    "text": "Difficulty\n\n\n\nMovement patterns have different origin-destination pairs\nRegulating the inflow does not affect the destination"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#graph-sets",
    "href": "lectures/lecture-12-presentation.html#graph-sets",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Graph Sets?",
    "text": "Graph Sets?\nQuestion: What could be the sets for the graph?"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#graph-sets-1",
    "href": "lectures/lecture-12-presentation.html#graph-sets-1",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Graph Sets?",
    "text": "Graph Sets?\n\n\\(\\mathcal{G}\\) - Connected digraph of the metro network \\(\\mathcal{G}=(\\mathcal{O},\\mathcal{E})\\)\n\\(\\mathcal{O}\\) - Set of metro stations, indexed by \\(o\\)\n\\(\\mathcal{E}\\) - Set of directed arcs between connected stations\n\n\n\n\n\n\n\n\nNote: These are the easier sets.\n\n\nThese simply help us to represent the entire metro system as a graph with different nodes \\(\\mathcal{O}\\) and arcs \\(\\mathcal{E}\\) between connected stations."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#time-sets",
    "href": "lectures/lecture-12-presentation.html#time-sets",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Time Sets?",
    "text": "Time Sets?\nQuestion: What could be the time sets?\n\n\\(\\mathcal{T}\\) - Set of minutes in the time horizon, indexed by \\(t\\)\n\\(\\mathcal{P}\\) - Set of periods in the observed time horizon, where \\(p \\in \\{1, 2, \\dots,n\\}\\)\n\n\n\n\n\n\n\n\nNote: Number of periods\n\n\nWe further define \\(n\\) as the number of periods in observed time horizon."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#periods",
    "href": "lectures/lecture-12-presentation.html#periods",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Periods",
    "text": "Periods\nQuestion: Why do we add periods here?\n\n\nStaff needs clear, consistent instructions\nFrequent changes in flow increase risk of errors\nEasier to manage and communicate for planners\n\n\n\n\n\n\n\n\n\nNote: Period Length\n\n\nWe define the period length as the length of the period in minutes measured as \\(m\\) minutes, which is the same for all periods."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#mapping-minutes-to-periods",
    "href": "lectures/lecture-12-presentation.html#mapping-minutes-to-periods",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Mapping Minutes to Periods",
    "text": "Mapping Minutes to Periods\n\nWe can define an additional set with their relation\nIt specifies the relation of periods \\(p\\) to minutes \\(t\\).\n\n\\[\n    I_p =\\{t \\in \\mathcal{T}|(p-1) \\times m + 1 \\leq t \\leq p \\times m\\} \\quad \\forall p \\in \\mathcal{P}\n\\]\n\nQuestion: Can anybody explain it?\n\n\n\n\\(I_p\\) is the set of minutes \\(t\\) that belong to period \\(p\\)\nMinutes are not overlapping, but they are continuous"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#parameters",
    "href": "lectures/lecture-12-presentation.html#parameters",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Parameters?",
    "text": "Parameters?\nQuestion: What could be possible parameters?\n\n\n\\(q_{o,d,p}\\) - Demand from station \\(o\\) to \\(d\\) with \\(o,d \\in \\mathcal{O}\\) in \\(p\\)\n\\(d_{e}\\) - Travel time (min) of the arcs \\(e \\in \\mathcal{E}\\)\n\\(c_e\\) - Max. allowed arc entry rate \\(e\\) per minute with \\(e \\in \\mathcal{E}\\)\n\\(c_{o}^{min}\\) - Min. station entry rate \\(o\\) per minute with \\(o \\in \\mathcal{O}\\)\n\\(c_{o}^{max}\\) - Max. station entry rate \\(o\\) per minute with \\(o \\in \\mathcal{O}\\)\n\\(\\alpha\\) - Maximal allowed arc utilization (\\(0 &lt; \\alpha &lt; 1\\))"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#metro-movement",
    "href": "lectures/lecture-12-presentation.html#metro-movement",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Metro Movement",
    "text": "Metro Movement\nQuestion: How do people move inside the metro?\n\n\nSimple network: assume people use the shortest path\nUse Djikstra’s algorithm to compute it\nFrom each station to all other stations\n\n\n\n\n\n\n\n\n\nTip: We can save the results in a new set \\(\\mathcal{C}_{o,d}\\)\n\n\nThis will help us to model the movement inside the metro."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#shortest-paths-sp",
    "href": "lectures/lecture-12-presentation.html#shortest-paths-sp",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Shortest Paths (SP)",
    "text": "Shortest Paths (SP)\n\n\\(\\mathcal{C}_{o,d}\\) - Set of arcs \\(e \\in \\mathcal{E}\\) on the SP from \\(o,d \\in \\mathcal{O}\\)\n\n\n\n\n\n\n\n\nNow we compute the travel time on the shortest paths. One parameter for the SP from station to station and one for the SP from station to arc.\n\n\n\n\n\n\n\\(d_{o,d}\\) - travel time (min) on SP from \\(o \\in \\mathcal{O}\\) to \\(d \\in \\mathcal{O}\\)\n\\(d_{o,e}\\) - travel time (min) on SP from \\(o \\in \\mathcal{O}\\) to \\(e \\in \\mathcal{E}\\)"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#people-spreading",
    "href": "lectures/lecture-12-presentation.html#people-spreading",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "People Spreading",
    "text": "People Spreading\nQuestion: How do people spread?"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#ratio-of-origin-destination",
    "href": "lectures/lecture-12-presentation.html#ratio-of-origin-destination",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Ratio of Origin-Destination",
    "text": "Ratio of Origin-Destination\n\nWe cannot control the destination of the passengers\nThus we assume that people spread based on destination\n\n\n\\[\\frac{q_{o,d,p}}{\\sum_{d \\in \\mathcal{O}} q_{o,d,p}} \\quad \\forall o,d \\in \\mathcal{O}, p\\in \\mathcal{P}\\]\n\n\n\n\n\n\n\n\nBased on the ratio of the different destinations \\(d\\) to the total queue for each station \\(o \\in \\mathcal{O}\\) in each period \\(p \\in \\mathcal{P}\\)."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#decision-variable",
    "href": "lectures/lecture-12-presentation.html#decision-variable",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Decision Variable?",
    "text": "Decision Variable?\n\n\n\n\n\n\nOur goal is to:\n\n\nRegulate the inflow at each individual station to minimize the queues outside the metro stations based on the allowed inflow while adhering to the capacity constraints.\n\n\n\n\n\n\n\n\n\nThere is one queue for all passenger flow directions, as managing multiple queues would be too complex for the planners!"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#decision-variable-1",
    "href": "lectures/lecture-12-presentation.html#decision-variable-1",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Decision Variable",
    "text": "Decision Variable\n\n\n\n\n\n\nWe need the following sets:\n\n\n\nAll the metro stations, \\(o \\in \\mathcal{O}\\)\nAll periods under observation, \\(p \\in \\mathcal{P}\\)\n\n\n\n\nQuestion: What could be our decision variable?\n\n\n\\(X_{o,p}\\) - Allowed inflow (per minute) at station \\(o\\) in period \\(p\\)"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#objective-function",
    "href": "lectures/lecture-12-presentation.html#objective-function",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Objective Function?",
    "text": "Objective Function?\n\n\n\n\n\n\nOur main objective is to:\n\n\nRegulate the inflow at each individual station to minimize the queues outside the metro stations based on the allowed inflow while adhering to the capacity constraints.\n\n\n\n\nQuestion: How again are queues minimized?\n\n\n\nBy the allowed inflow \\(X_{o,p}\\) subtracted from the queue"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#objective-function-1",
    "href": "lectures/lecture-12-presentation.html#objective-function-1",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Objective Function",
    "text": "Objective Function\n\n\n\n\n\n\nWe need the following parameters and variables:\n\n\n\n\\(q_{o,d,p}\\) - People queued to travel from station \\(o\\) to \\(d\\) with \\(o,d \\in \\mathcal{O}\\) in period \\(p\\)\n\\(X_{o,p}\\) - Allowed inflow (per minute) at station \\(o\\) in period \\(p\\)\n\n\n\n\n\nQuestion: What could be our objective function?\n\n\n\\[\n\\text{minimize} \\quad \\sum_{o \\in \\mathcal{O}} \\sum_{p \\in \\mathcal{P}} (\\sum_{d \\in \\mathcal{O}} q_{o,d,p} - m \\times X_{o,p})\n\\]"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#necessary-constraints",
    "href": "lectures/lecture-12-presentation.html#necessary-constraints",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Necessary Constraints",
    "text": "Necessary Constraints\nQuestion: What constraints do we need?\n\n\n\nThe capacity of each arc is not exceeded\nDo not dispatch more people than are queued\nDo not dispatch less than the minimum allowed inflow"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#section-2",
    "href": "lectures/lecture-12-presentation.html#section-2",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "Things are going to\nget a little\ncomplicated now!"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#central-question",
    "href": "lectures/lecture-12-presentation.html#central-question",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Central Question",
    "text": "Central Question\nQuestion: When do people flowing into the metro system change the arcs?\n\n\nPeople enter metro station at \\(o\\) with destination \\(d\\)\nThey will lead to a usage of an arc \\(e\\) on their SP\nThis usage depends on their path and the travel times\n\n\n\n\n\n\n\n\n\nTip: You’ll likely know what we need now!\n\n\nWe can add a new set \\(\\mathcal{R}_{e,t}\\) to help us with this."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#set-of-time-delays",
    "href": "lectures/lecture-12-presentation.html#set-of-time-delays",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Set of Time-Delays",
    "text": "Set of Time-Delays\n\\[\n\\mathcal{R}_{e,t} = \\{(o,d,p) \\mid\n    \\begin{array}{l}\n    (o,d) | o,d \\in \\mathcal{O}, \\\\\n    q_{o,d,p} &gt; 0, \\\\\n    e \\in \\mathcal{C}_{o,d}, \\\\\n    t-d_{o,e} \\in I_p, \\\\\n    p \\in \\mathcal{P}\\}\n    \\end{array}\n    \\quad \\forall e \\in \\mathcal{E}, t \\in \\mathcal{T}\n\\]\n\nQuestion: Who can explain this set?\n\n\nThe set \\(\\mathcal{R}_{e,t}\\) contains all combinations \\((o,d,p)\\) which trigger a capacity utilization of arc \\(e\\) in period \\(t\\)."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#small-example",
    "href": "lectures/lecture-12-presentation.html#small-example",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Small Example",
    "text": "Small Example\n\n\n\n\n\n\n\n\nThe set contains all possible o-d pairs and periods, that result in passengers starting at arc \\((C,D)\\) at minute \\(22\\). For m=2, it would be:\n\\(\\{((A,D),3),((B,D),5),((C,D),11),((E,D),9)\\}\\)."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#section-3",
    "href": "lectures/lecture-12-presentation.html#section-3",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "Essentially, we can use this\nset to compute the utilization\nof an arc at each minute based\non the inflow level at the\ndifferent stations and periods."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#ensure-capacity-utilization",
    "href": "lectures/lecture-12-presentation.html#ensure-capacity-utilization",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Ensure Capacity Utilization?",
    "text": "Ensure Capacity Utilization?\n\n\n\n\n\n\nThe goal of this constraint is to:\n\n\nEnsure that the capacity of each arc is not exceeded at any minute.\n\n\n\n\n\n\n\n\n\n\nWe need the following variable, parameter and set:\n\n\n\n\\(q_{o,d,p}\\) - people waiting to travel from station \\(o \\in \\mathcal{O}\\) to station \\(d \\in \\mathcal{O}\\) in \\(p\\)\n\\(c_e\\) - people max. allowed to enter arc \\(e\\) per minute with \\(e \\in \\mathcal{E}\\)\n\\(\\mathcal{R}_{e,t}\\) - mapping of station entries to arc \\(e\\) in time \\(t\\) with \\(e \\in \\mathcal{E}\\) and \\(t \\in \\mathcal{T}\\)\n\\(\\alpha\\) - maximal allowed arc utilization (\\(0 &lt; \\alpha &lt; 1\\))\n\\(X_{o,p}\\) - the allowed inflow per minute at metro station \\(o\\) in the period \\(p\\)"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#ensure-capacity-utilization-1",
    "href": "lectures/lecture-12-presentation.html#ensure-capacity-utilization-1",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Ensure Capacity Utilization",
    "text": "Ensure Capacity Utilization\nQuestion: What could be the constraint?\n\n\\[\n\\sum_{(o,d,p) \\in \\mathcal{R}_{e,t}} X_{o,p} \\times \\frac{q_{o,d,p}}{\\sum_{f \\in \\mathcal{O}} q_{o,f,p}} \\leq \\alpha \\times c_{e} \\quad \\forall e \\in \\mathcal{E}, t \\in \\mathcal{T}\n\\]\n\n\n\n\n\n\n\n\nHere, we combine the inflow at each station based on the o-d proportion and let the people spread through the network, checking that no arc is over-utilized at any minute."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#dispatch-only-available-people",
    "href": "lectures/lecture-12-presentation.html#dispatch-only-available-people",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Dispatch Only Available People?",
    "text": "Dispatch Only Available People?\n\n\n\n\n\n\nThe goal of this constraint is to:\n\n\nEnsure that we do not dispatch more people than are queued and less than the minimum allowed inflow, preventing over- and under-dispatching.\n\n\n\n\n\n\n\n\n\n\nWe need the following variables and parameters:\n\n\n\n\\(X_{o,p}\\) - Allowed inflow (per minute) at station \\(o\\) in period \\(p\\)\n\\(q_{o,d,p}\\) - People queued to travel from station \\(o\\) to \\(d\\) with \\(o,d \\in \\mathcal{O}\\) in \\(p\\)\n\\(m\\) - period length in minutes"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#dispatch-only-available-people-1",
    "href": "lectures/lecture-12-presentation.html#dispatch-only-available-people-1",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Dispatch Only Available People",
    "text": "Dispatch Only Available People\nQuestion: What could be the constraint?\n\n\n\n\\[\n\\min\\{\\frac{\\sum_{d \\in \\mathcal{O}} q_{o,d,p}}{m},c_{o}^{\\min}\\} \\leq X_{o,p} \\leq \\min\\{\\frac{\\sum_{d \\in \\mathcal{O}} q_{o,d,p}}{m},c_{o}^{\\max}\\} \\quad \\forall o \\in \\mathcal{O}, p \\in \\mathcal{P}\n\\]\n\n\n\n\n\n\n\n\n\nWe need this constraint for two reasons:\n\nWe could also dispatch more people than there are as this would minimize the objective value. \nWe also need to ensure that we can dispatch at least the minimum allowed inflow or less if the queue is smaller than the minimum allowed inflow."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#metro-inflow-model",
    "href": "lectures/lecture-12-presentation.html#metro-inflow-model",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Metro Inflow Model",
    "text": "Metro Inflow Model\n\n\n\\[\\begin{align*}\n    \\text{minimize} \\quad \\sum_{o \\in \\mathcal{O}} \\sum_{p \\in \\mathcal{P}} (\\sum_{d \\in \\mathcal{O}} q_{o,d,p} - m \\times X_{o,p})\n\\end{align*}\\] subject to: \\[\\begin{align*}\n    &  \\sum_{(o,d,p) \\in \\mathcal{R}_{e,t}} X_{o,p} \\times \\frac{q_{o,d,p}}{\\sum_{f \\in \\mathcal{O}} q_{o,f,p}} \\leq \\alpha \\times c_{e} && \\forall e \\in \\mathcal{E}, t \\in \\mathcal{T} \\\\\n    & min\\{\\frac{\\sum_{d \\in \\mathcal{O}} q_{o,d,p}}{m},c_{o}^{min}\\} \\leq X_{o,p} \\leq min\\{\\frac{\\sum_{d \\in \\mathcal{O}} q_{o,d,p}}{m},c_{o}^{max}\\} && \\forall o \\in \\mathcal{O}, p \\in \\mathcal{P}\n\\end{align*}\\]"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#characteristics",
    "href": "lectures/lecture-12-presentation.html#characteristics",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Characteristics",
    "text": "Characteristics\nQuestions: On model characteristics\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domains do we have?"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#model-assumptions",
    "href": "lectures/lecture-12-presentation.html#model-assumptions",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\nWhat assumptions have we made?\nWhat are likely issues that can arise if applied?\nHave we thought in detail about queues?\nAre shortest paths a feasible assumption?"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#metro-inflow-optimization",
    "href": "lectures/lecture-12-presentation.html#metro-inflow-optimization",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Metro Inflow Optimization",
    "text": "Metro Inflow Optimization\n\nQuestion: Can this be applied?"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#metro-inflow-problem",
    "href": "lectures/lecture-12-presentation.html#metro-inflow-problem",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Metro Inflow Problem",
    "text": "Metro Inflow Problem\n\nSolved very fast within seconds for realistic problem sizes\nBut we cannot plan or control the metro inflow\nQueues are too simplified with passengers disappearing\n\n\nQuestion: Any ideas, how the current model could be improved or how it could be embedded into a heuristic?"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#heuristic-step-wise-optimization",
    "href": "lectures/lecture-12-presentation.html#heuristic-step-wise-optimization",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Heuristic: Step-Wise Optimization",
    "text": "Heuristic: Step-Wise Optimization\n\nSolve the model for the time-horizon of a few periods\nFix the inflow in the current first period\nDecrease capacity in the network based on the inflow\nTransfer remaining queues into the subsequent period\nSolve the model again\nRepeat, until the inflow is computed for all periods"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#transport-demand",
    "href": "lectures/lecture-12-presentation.html#transport-demand",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Transport Demand",
    "text": "Transport Demand"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#utilization-analysis",
    "href": "lectures/lecture-12-presentation.html#utilization-analysis",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Utilization Analysis",
    "text": "Utilization Analysis"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#implementation",
    "href": "lectures/lecture-12-presentation.html#implementation",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Implementation",
    "text": "Implementation\n\nAssumption of known destinations based is strong\nMovements seemed to follow our forecasts\nWe did achieve our goal of metro inflow control\nSimulation was used to estimate the inflows\n\n\n\n\n\n\n\n\nFew dangerous situations, especially at the FIFA Fan Fest, were handled well by the authorities."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#wrap-up",
    "href": "lectures/lecture-12-presentation.html#wrap-up",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Wrap Up",
    "text": "Wrap Up\n\nModel can help to achieve a good balance\nCan be adapted easily to any metro system worldwide \nEspecially interesting for larger Asian cities\n\n\n\n\n\n\n\n\nAnd that’s it for todays lecture!\n\n\nWe now have covered a metro inflow control problem based on a real-world application and are ready to start solving some new tasks in the upcoming tutorial."
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#section-4",
    "href": "lectures/lecture-12-presentation.html#section-4",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "lectures/lecture-12-presentation.html#literature-i",
    "href": "lectures/lecture-12-presentation.html#literature-i",
    "title": "Lecture XII - Passenger Flow Control in Urban Rail",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "tutorials/tutorial-02-01-variables.html",
    "href": "tutorials/tutorial-02-01-variables.html",
    "title": "Tutorial II.I - Variables and Types",
    "section": "",
    "text": "Welcome to this interactive Julia tutorial which introduces the basics of variables and types. Understanding variables and their types is crucial as they are the building blocks of any program. They determine how data is stored, manipulated, and how efficiently your code runs.\nThis script is designed to be interactive. Follow the instructions, write your code in the designated code blocks, and then execute the corresponding code. Each exercise is followed by an @assert statement that checks your solution.\nThere are two ways to run the code:\n\nRunning Julia notebooks in VS Code\nRunning Julia notebooks in the browser\n\n\n\n\nFirst, install the Julia and the Jupyter Extension from the menu on the left side.\nNow you can open the downloaded .ipynb files but you can’t run them yet!\nOpen the terminal and copy and paste the following code snippets:\n\njulia (This will activate Julia)\nusing Pkg(This will load the package manager (more on this later))\nPkg.activate(\"applied-optimization\")(This will activate an environment for our course)\nPkg.add(\"IJulia\") (This will add IJulia - the support for notebooks - to the environment)\nusing IJulia (This will tell the system to load IJulia for the session)\n\nOn the right side in the upper corner click there is a button saying something like “Julia Release Channel” or “Pick kernel”. Click this button.\nNow, select the field “Select another kernel”, click it, and then select “Jupyter Kernel”\nFinally, select the Julia kernel which contains the word applied-optimization.\n\n\n\n\n\n\n\nSorry, that this start is rather complicated. But in following this, we have a clean environment we can work in and you basically cannot break anything with the installation of packages.\n\n\n\n\n\n\n\n\n\nActivating an environment creates some files in your folder. These essentially save which packages our environment needs to work properly.\n\n\n\n\n\n\n\nFirst, follow steps 1 to 3 from the previous section to install IJulia.\nNow, each time you want to start it from the terminal open a new terminal first.\nThen, use the following code snippets:\n\njulia (This will activate Julia (again) in the terminal)\nusing Pkg(This will load the package manager first, which allows us to load the environment\nPkg.activate(\"applied-optimization\")(This will activate our created environment)\nusing IJulia; notebook() (This will load the web browser with IJulia for you)\n\nNow, in the browser you can open the .ipynb files.\nTo run a file, select the correct kernel on the right side (contains “applied-optimization”)\n\n\n\n\n\n\n\nAlways replace ‘YOUR CODE BELOW’ with your actual code.",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-01-variables.html#julia-in-vs-code",
    "href": "tutorials/tutorial-02-01-variables.html#julia-in-vs-code",
    "title": "Tutorial II.I - Variables and Types",
    "section": "",
    "text": "First, install the Julia and the Jupyter Extension from the menu on the left side.\nNow you can open the downloaded .ipynb files but you can’t run them yet!\nOpen the terminal and copy and paste the following code snippets:\n\njulia (This will activate Julia)\nusing Pkg(This will load the package manager (more on this later))\nPkg.activate(\"applied-optimization\")(This will activate an environment for our course)\nPkg.add(\"IJulia\") (This will add IJulia - the support for notebooks - to the environment)\nusing IJulia (This will tell the system to load IJulia for the session)\n\nOn the right side in the upper corner click there is a button saying something like “Julia Release Channel” or “Pick kernel”. Click this button.\nNow, select the field “Select another kernel”, click it, and then select “Jupyter Kernel”\nFinally, select the Julia kernel which contains the word applied-optimization.\n\n\n\n\n\n\n\nSorry, that this start is rather complicated. But in following this, we have a clean environment we can work in and you basically cannot break anything with the installation of packages.\n\n\n\n\n\n\n\n\n\nActivating an environment creates some files in your folder. These essentially save which packages our environment needs to work properly.",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-01-variables.html#julia-in-the-browser",
    "href": "tutorials/tutorial-02-01-variables.html#julia-in-the-browser",
    "title": "Tutorial II.I - Variables and Types",
    "section": "",
    "text": "First, follow steps 1 to 3 from the previous section to install IJulia.\nNow, each time you want to start it from the terminal open a new terminal first.\nThen, use the following code snippets:\n\njulia (This will activate Julia (again) in the terminal)\nusing Pkg(This will load the package manager first, which allows us to load the environment\nPkg.activate(\"applied-optimization\")(This will activate our created environment)\nusing IJulia; notebook() (This will load the web browser with IJulia for you)\n\nNow, in the browser you can open the .ipynb files.\nTo run a file, select the correct kernel on the right side (contains “applied-optimization”)\n\n\n\n\n\n\n\nAlways replace ‘YOUR CODE BELOW’ with your actual code.",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-01-variables.html#exercise-1.1---declare-a-variable",
    "href": "tutorials/tutorial-02-01-variables.html#exercise-1.1---declare-a-variable",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 1.1 - Declare a Variable",
    "text": "Exercise 1.1 - Declare a Variable\nDeclare a variable named x and assign it the value 1.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert x == 1 \"Check again, the value of x should be 1. Remember to assign the value directly to x.\"\nprintln(\"Great, you have correctly assigned the value $x to the variable 'x'.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-01-variables.html#exercise-1.2---declare-a-string-variable",
    "href": "tutorials/tutorial-02-01-variables.html#exercise-1.2---declare-a-string-variable",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 1.2 - Declare a String Variable",
    "text": "Exercise 1.2 - Declare a String Variable\nDeclare a variable named hi and assign it the string \"Hello, Optimization!\".\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert hi == \"Hello, Optimization!\" \"Make sure the variable 'hi' contains the exact string \\\"Hello, Optimization\\\"!\"\nprintln(\"Good, the variable 'hi' now states \\\"$hi\\\".\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-01-variables.html#exercise-2.1---create-an-integer-variable",
    "href": "tutorials/tutorial-02-01-variables.html#exercise-2.1---create-an-integer-variable",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 2.1 - Create an Integer Variable",
    "text": "Exercise 2.1 - Create an Integer Variable\nCreate an Integer variable answerUniverse and set it to 42.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert answerUniverse == 42 \"The variable 'answerUniverse' should hold 42.\"\nprintln(\"Great, the answer to all questions on the universe is $answerUniverse now.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-01-variables.html#exercise-2.2---create-a-float-variable",
    "href": "tutorials/tutorial-02-01-variables.html#exercise-2.2---create-a-float-variable",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 2.2 - Create a Float Variable",
    "text": "Exercise 2.2 - Create a Float Variable\nCreate a Float variable money and set it to 1.35.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert money == 1.35 \"The variable 'money' should hold the Float64 1.35.\"\nprintln(\"Perfect, the you have stored $money in the variable 'money'.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-01-variables.html#exercise-2.3---create-a-boolean-variable",
    "href": "tutorials/tutorial-02-01-variables.html#exercise-2.3---create-a-boolean-variable",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 2.3 - Create a Boolean Variable",
    "text": "Exercise 2.3 - Create a Boolean Variable\nCreate a Boolean variable isStudent and set it to true.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert isStudent == true \"The variable 'isStudent' should be set to true.\"\nprintln(\"Correct, you are a student now.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-01-variables.html#exercise-3.1---type-annotation",
    "href": "tutorials/tutorial-02-01-variables.html#exercise-3.1---type-annotation",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 3.1 - Type Annotation",
    "text": "Exercise 3.1 - Type Annotation\nDeclare a variable y with an explicit type annotation of Int64 and assign it the value 5.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert y == 5 && typeof(y) == Int64 \"Make sure 'y' is of type Int64 and has the value 5.\"\nprintln(\"Great! You've created an Int64 variable 'y' with the value $y.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-01-variables.html#exercise-4.1---string-interpolation",
    "href": "tutorials/tutorial-02-01-variables.html#exercise-4.1---string-interpolation",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 4.1 - String Interpolation",
    "text": "Exercise 4.1 - String Interpolation\nCreate a string message that says \"y is [value of y]\" using string interpolation.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert message == \"y is 5\" \"Make sure your string includes the correct value of y.\"\nprintln(\"Excellent! Your interpolated string is: $message\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-03-comparisons.html",
    "href": "tutorials/tutorial-02-03-comparisons.html",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "",
    "text": "Imagine you’re teaching a computer to make decisions. Just like we compare things in everyday life (“Is it raining?”, “Do I have enough money?”), computers need ways to compare values and make choices. This tutorial will show you how to help computers make these comparisons!\nFollow the instructions, write your code in the designated code blocks, and execute the corresponding code cell.",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-03-comparisons.html#exercise-1.1---compare-if-10-is-greater-than-5",
    "href": "tutorials/tutorial-02-03-comparisons.html#exercise-1.1---compare-if-10-is-greater-than-5",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 1.1 - Compare if 10 is greater than 5",
    "text": "Exercise 1.1 - Compare if 10 is greater than 5\nCompare if 10 is greater than 5 and store the result in comparison1.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert comparison1 == true\nprintln(\"comparison1 is \", comparison1)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-03-comparisons.html#exercise-1.2---compare-if-x-is-not-equal-to-y",
    "href": "tutorials/tutorial-02-03-comparisons.html#exercise-1.2---compare-if-x-is-not-equal-to-y",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 1.2 - Compare if x is not equal to y",
    "text": "Exercise 1.2 - Compare if x is not equal to y\nDefine variables x with value \"Hello\" and y with value \"world\". Compare if x is not equal to y and store the result in comparison2.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert x == \"Hello\"\n@assert y == \"world\"\n@assert comparison2 == true\nprintln(\"Comparison2 is \", comparison2)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-03-comparisons.html#exercise-2.1---use-the-and-operator",
    "href": "tutorials/tutorial-02-03-comparisons.html#exercise-2.1---use-the-and-operator",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 2.1 - Use the AND operator",
    "text": "Exercise 2.1 - Use the AND operator\nUse the AND operator to check if 10 is greater than 5 and hello is equal to hello. Store the result in logic1.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert logic1 == true\nprintln(\"logic1 is \", logic1)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-03-comparisons.html#exercise-2.2---use-the-or-operator",
    "href": "tutorials/tutorial-02-03-comparisons.html#exercise-2.2---use-the-or-operator",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 2.2 - Use the OR operator",
    "text": "Exercise 2.2 - Use the OR operator\nUse the OR operator to check if 10 is less than 5 or hello is equal to hello. Store the result in logic2.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert logic2 == true\nprintln(\"logic2 is \", logic2)\n\n\n\n\n\n\n\n\nJulia uses short-circuit evaluation for && and || operators. This means that the second operand is only evaluated if necessary.",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-03-comparisons.html#exercise-2.3---use-the-not-operator",
    "href": "tutorials/tutorial-02-03-comparisons.html#exercise-2.3---use-the-not-operator",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 2.3 - Use the NOT operator",
    "text": "Exercise 2.3 - Use the NOT operator\nCheck whether 10 is greater than 5 and store the result in logic3. Then, use the NOT operator to invert logic3. Store the result in logic4.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert logic3 == true\n@assert logic4 == false\nprintln(\"logic3 is \", logic3,\" and logic4 is\", logic4)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-03-comparisons.html#exercise-2.4---chaining-comparisons",
    "href": "tutorials/tutorial-02-03-comparisons.html#exercise-2.4---chaining-comparisons",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 2.4 - Chaining Comparisons",
    "text": "Exercise 2.4 - Chaining Comparisons\nJulia has a neat feature that lets you write comparisons the way you think about them:\n# Instead of writing:\nage &gt;= 13 && age &lt;= 19    # Is age between 13 and 19?\n\n# You can write:\n13 &lt;= age &lt;= 19          # Much more natural!\nReal-world examples:\n# Is the body temperature normal?\nnormal_temperature = (36.5 &lt;= body_temp &lt;= 37.5)\n\n# Is the current hour within working hours?\nworking_hours = (9 &lt;= current_hour &lt; 17)\nCheck if x is between 1 and 10 (exclusive) using a chained comparison. Store the result in chained_comparison.\n\nx = 5\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert chained_comparison == true\nprintln(\"chained_comparison is \", chained_comparison)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-05-dicts.html",
    "href": "tutorials/tutorial-02-05-dicts.html",
    "title": "Tutorial II.V - Dictionaries",
    "section": "",
    "text": "Imagine you have a school directory where each student’s name is associated with their unique student ID. This is similar to how dictionaries work in programming - they allow you to store and retrieve information using key-value pairs.\nFollow the structured instructions, implement your code in the designated blocks, and affirm your comprehension with @assert statements.",
    "crumbs": [
      "02 First Steps",
      "05 - Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-05-dicts.html#exercise-1.1---create-and-modify-a-dictionary",
    "href": "tutorials/tutorial-02-05-dicts.html#exercise-1.1---create-and-modify-a-dictionary",
    "title": "Tutorial II.V - Dictionaries",
    "section": "Exercise 1.1 - Create and Modify a Dictionary",
    "text": "Exercise 1.1 - Create and Modify a Dictionary\nAdd a new book called “Harry Potter and the Philosopher’s Stone” with the author “J.K. Rowling” to the created dictionary.\n\n# Creates a dictionary of books and authors\nbooks = Dict(\n    \"1984\" =&gt; \"George Orwell\",\n    \"Nexus\" =&gt; \"Yuval Noah Harari\"\n)\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert haskey(books, \"Harry Potter and the Philosopher's Stone\")\nprintln(\"Great! You've successfully added a new book to the books dictionary.\")",
    "crumbs": [
      "02 First Steps",
      "05 - Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-05-dicts.html#exercise-1.2---modify-a-dictionary",
    "href": "tutorials/tutorial-02-05-dicts.html#exercise-1.2---modify-a-dictionary",
    "title": "Tutorial II.V - Dictionaries",
    "section": "Exercise 1.2 - Modify a Dictionary",
    "text": "Exercise 1.2 - Modify a Dictionary\nChange the author of “1984” to “Eric Blair” (George Orwell’s real name).\n\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert books[\"1984\"] == \"Eric Blair\"\nprintln(\"Great! You've successfully modified the books dictionary.\")",
    "crumbs": [
      "02 First Steps",
      "05 - Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02-05-dicts.html#conclusion",
    "href": "tutorials/tutorial-02-05-dicts.html#conclusion",
    "title": "Tutorial II.V - Dictionaries",
    "section": "Conclusion",
    "text": "Conclusion\nGreat! You’ve just navigated through the basics of dictionaries in Julia. Dictionaries are powerful data structures that allow for efficient data organization and retrieval. Continue to the next file to learn more advanced Julia concepts.",
    "crumbs": [
      "02 First Steps",
      "05 - Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-02-handling.html",
    "href": "tutorials/tutorial-03-02-handling.html",
    "title": "Tutorial III.II - Package Management",
    "section": "",
    "text": "Welcome to this beginner-friendly guide on understanding packages and package management in Julia!\nThink of packages as pre-written sets of tools that extend what Julia can do. It’s like having a toolbox where you can add new tools (packages) to help you solve specific problems. For example, there are packages for working with data, creating visualizations, or solving complex math problems.\nThe best part? Most Julia packages are free to use, thanks to the open-source community!\n\n\n\n\n\n\nWhile we’ll practice some commands here, you’ll typically manage packages in Julia’s REPL (Read-Eval-Print Loop), which is like Julia’s command center.",
    "crumbs": [
      "03 Data",
      "02 - Packages"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-02-handling.html#exercise-1.1---import-the-pkg-module",
    "href": "tutorials/tutorial-03-02-handling.html#exercise-1.1---import-the-pkg-module",
    "title": "Tutorial III.II - Package Management",
    "section": "Exercise 1.1 - Import the Pkg Module",
    "text": "Exercise 1.1 - Import the Pkg Module\nImport the Pkg module to start managing packages effectively.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\ntry\n    Pkg.update()\n    println(\"Pkg module imported successfully and packages were updated!\")\ncatch e\n    @error \"The Pkg module was not imported yet! Have you used the correct syntax?\"\nend",
    "crumbs": [
      "03 Data",
      "02 - Packages"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-02-handling.html#exercise-2.1---add-the-dataframes-package",
    "href": "tutorials/tutorial-03-02-handling.html#exercise-2.1---add-the-dataframes-package",
    "title": "Tutorial III.II - Package Management",
    "section": "Exercise 2.1 - Add the DataFrames Package",
    "text": "Exercise 2.1 - Add the DataFrames Package\nLet’s add a popular package called DataFrames. It’s great for working with structured data, like spreadsheets.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\ntry\n    using DataFrames\n    println(\"Package added successfully!\")\ncatch e\n    @error \"Package was not added yet! Have you used the correct syntax?\"\nend",
    "crumbs": [
      "03 Data",
      "02 - Packages"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-02-handling.html#conclusion",
    "href": "tutorials/tutorial-03-02-handling.html#conclusion",
    "title": "Tutorial III.II - Package Management",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You’ve completed the tutorial on packages and package management in Julia. These skills are important for effectively managing and utilizing external libraries. Continue to the next file to learn more.",
    "crumbs": [
      "03 Data",
      "02 - Packages"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-04-IO.html",
    "href": "tutorials/tutorial-03-04-IO.html",
    "title": "Tutorial III.IV - Input and Output",
    "section": "",
    "text": "Welcome to this interactive Julia tutorial on working with external files! File Input/Output (I/O) operations are crucial in programming and data analysis, allowing us to persist data, share information between programs, and work with large datasets that don’t fit in memory. In this tutorial, we’ll cover reading and writing text files, handling CSV files, and working with delimited files using various Julia packages. These skills are fundamental for data preprocessing, analysis, and result storage in real-world applications.\nFollow the instructions, write your code in the designated code blocks, and validate your results with @assert statements.",
    "crumbs": [
      "03 Data",
      "04 - Input and Output"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-04-IO.html#exercise-1.1---read-a-csv-file",
    "href": "tutorials/tutorial-03-04-IO.html#exercise-1.1---read-a-csv-file",
    "title": "Tutorial III.IV - Input and Output",
    "section": "Exercise 1.1 - Read a CSV File",
    "text": "Exercise 1.1 - Read a CSV File\nNow it’s your turn! Let’s read the CSV file we just created.\n\n\n\n\n\n\nTo learn how to use a Julia function, you can type ? followed by the function name in the REPL (Julia’s command-line interface). For example, ?readdlm will show you information about the readdlm() function.\n\n\n\nUse the readdlm() function to read the ‘matrix.csv’ file we just created. Save the result in a variable called read_matrix.\n\n# YOUR CODE BELOW\n# Don't forget to use the @__DIR__ macro to get the correct file path!\n\n\n\nCode\n# Test your answer\n@assert read_matrix == new_data\nprintln(\"File 'matrix.csv' read successfully!\")",
    "crumbs": [
      "03 Data",
      "04 - Input and Output"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-04-IO.html#exercise-2.1---write-a-dataframe-to-a-csv-file",
    "href": "tutorials/tutorial-03-04-IO.html#exercise-2.1---write-a-dataframe-to-a-csv-file",
    "title": "Tutorial III.IV - Input and Output",
    "section": "Exercise 2.1 - Write a DataFrame to a CSV File",
    "text": "Exercise 2.1 - Write a DataFrame to a CSV File\nWrite the following given DataFrame to a CSV file table_out.csv in the folder ExampleData. This can be done by using the function CSV.write(). To learn the syntax, ask the inbuild help with ? and the function name.\n\nusing CSV, DataFrames\ndata = DataFrame(Name = [\"Elio\", \"Bob\", \"Yola\"], Age = [18, 25, 29])\ncsv_file_path = \"$(@__DIR__)/ExampleData/table_out.csv\"\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert isfile(\"ExampleData/table_out.csv\") \"Sorry, the file could not be found.\n    Have you followed all steps?\"\nprintln(\"CSV file 'data.csv' written successfully!\")",
    "crumbs": [
      "03 Data",
      "04 - Input and Output"
    ]
  },
  {
    "objectID": "tutorials/tutorial-03-04-IO.html#exercise-2.2---read-a-csv-file-in",
    "href": "tutorials/tutorial-03-04-IO.html#exercise-2.2---read-a-csv-file-in",
    "title": "Tutorial III.IV - Input and Output",
    "section": "Exercise 2.2 - Read a CSV File in",
    "text": "Exercise 2.2 - Read a CSV File in\nRead the CSV file table_out.csv in the folder ExampleData into the variable read_data. Here you can use the function CSV.read(), e.g.:\nread_data = CSV.read(\"Path/datatable.csv\", DataFrame)\n\n\n\n\n\n\nNote, that you need to provide a sink for the data when using CSV.read(), e.g. a DataFrame.\n\n\n\n\n# YOUR CODE BELOW\n# Again, don't forget to use the @__DIR__ macro to get the correct file path!\n\n\n\nCode\n# Test your answer\n@assert read_data[1,1] == \"Elio\"\nprintln(\"CSV file 'table_out.csv' read successfully!\")",
    "crumbs": [
      "03 Data",
      "04 - Input and Output"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-01-jump.html",
    "href": "tutorials/tutorial-04-01-jump.html",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "",
    "text": "Welcome to this beginner-friendly tutorial on mathematical optimization using JuMP and the HiGHS solver in Julia! Don’t worry if these terms sound unfamiliar – we’ll explain everything step by step.\nIn this tutorial, you’ll learn how to:\n\nSet up a simple optimization problem\nDefine variables and constraints\nCreate an objective function\nSolve the problem and interpret the results\n\nWe’ll use a real-world example to make these concepts more relatable. Imagine you’re managing a small factory that produces two types of products. Your goal is to maximize profit while working within certain limitations. This is exactly the kind of problem that mathematical optimization can solve!\n\n\nJuMP (Julia for Mathematical Programming) is a powerful tool that helps us describe optimization problems in a way that computers can understand and solve. Think of it as a translator between your business problem and the mathematical solver.\n\n\n\nHiGHS is an open-source solver that can find solutions to the optimization problems we describe using JuMP. It’s like a very smart calculator that can handle complex problems quickly and efficiently.\n\n\n\nLet’s break down our factory management problem:\n\nYou produce two products: Product A and Product B\nEach product gives you a different profit:\n\nProduct A: 100 profit per unit\nProduct B: 150 profit per unit\n\nYou have two departments: Cutting and Finishing\nEach product requires different amounts of time in each department:\n\nProduct A: 2 hours in Cutting, 4 hours in Finishing\nProduct B: 4 hours in Cutting, 3 hours in Finishing\n\nYou have limited time available in each department:\n\nCutting: 40 hours total\nFinishing: 60 hours total\n\n\nYour goal is to decide how many of each product to make to maximize your total profit, while not exceeding the available time in each department.\n\n\n\nFirst, we need to install and load the necessary packages. If you haven’t already installed JuMP and HiGHS, run the following code:\n\nimport Pkg\nPkg.activate(\"applied-optimization\")\nPkg.add([\"JuMP\",\"HiGHS\"])\n\nNow, let’s load these packages:\n\nusing JuMP, HiGHS\n\n\n[ Info: Precompiling JuMP [4076af6c-e467-56ae-b986-b466b2749572] (cache misses: wrong dep version loaded (2), wrong source (2))\n\n\n\nSYSTEM: caught exception of type :MethodError while trying to print a failed Task notice; giving up\n\n┌ Error: Error during loading of extension SpecialFunctionsExt of ColorVectorSpace, use `Base.retry_load_extensions()` to retry.\n\n│   exception =\n\n│    1-element ExceptionStack:\n\n│    ArgumentError: Package SpecialFunctionsExt [997ecda8-951a-5f50-90ea-61382e97704b] is required but does not seem to be installed:\n\n│     - Run `Pkg.instantiate()` to install all recorded dependencies.\n\n│    \n\n│    Stacktrace:\n\n│      [1] __require_prelocked(pkg::Base.PkgId, env::Nothing)\n\n│        @ Base ./loading.jl:2587\n\n│      [2] _require_prelocked(uuidkey::Base.PkgId, env::Nothing)\n\n│        @ Base ./loading.jl:2465\n\n│      [3] _require_prelocked(uuidkey::Base.PkgId)\n\n│        @ Base ./loading.jl:2459\n\n│      [4] run_extension_callbacks(extid::Base.ExtensionId)\n\n│        @ Base ./loading.jl:1579\n\n│      [5] run_extension_callbacks(pkgid::Base.PkgId)\n\n│        @ Base ./loading.jl:1616\n\n│      [6] run_package_callbacks(modkey::Base.PkgId)\n\n│        @ Base ./loading.jl:1432\n\n│      [7] _tryrequire_from_serialized(modkey::Base.PkgId, build_id::UInt128)\n\n│        @ Base ./loading.jl:1930\n\n│      [8] _tryrequire_from_serialized(pkg::Base.PkgId, path::String, ocachepath::String)\n\n│        @ Base ./loading.jl:1968\n\n│      [9] __require_prelocked(pkg::Base.PkgId, env::String)\n\n│        @ Base ./loading.jl:2668\n\n│     [10] _require_prelocked(uuidkey::Base.PkgId, env::String)\n\n│        @ Base ./loading.jl:2465\n\n│     [11] macro expansion\n\n│        @ ./loading.jl:2393 [inlined]\n\n│     [12] macro expansion\n\n│        @ ./lock.jl:376 [inlined]\n\n│     [13] __require(into::Module, mod::Symbol)\n\n│        @ Base ./loading.jl:2358\n\n│     [14] require(into::Module, mod::Symbol)\n\n│        @ Base ./loading.jl:2334\n\n│     [15] eval(m::Module, e::Any)\n\n│        @ Core ./boot.jl:489\n\n│     [16] include_string(mapexpr::typeof(REPL.softscope), mod::Module, code::String, filename::String)\n\n│        @ Base ./loading.jl:2843\n\n│     [17] softscope_include_string(m::Module, code::String, filename::String)\n\n│        @ SoftGlobalScope ~/.julia/packages/SoftGlobalScope/u4UzH/src/SoftGlobalScope.jl:65\n\n│     [18] execute_request(socket::ZMQ.Socket, msg::IJulia.Msg)\n\n│        @ IJulia ~/.julia/packages/IJulia/eenvU/src/execute_request.jl:81\n\n│     [19] eventloop(socket::ZMQ.Socket)\n\n│        @ IJulia ~/.julia/packages/IJulia/eenvU/src/eventloop.jl:14\n\n│     [20] (::IJulia.var\"#waitloop##2#waitloop##3\")()\n\n│        @ IJulia ~/.julia/packages/IJulia/eenvU/src/eventloop.jl:58\n\n└ @ Base loading.jl:1589\n\n\n\nSYSTEM: caught exception of type :MethodError while trying to print a failed Task notice; giving up\n\n[ Info: Precompiling HiGHS [87dc4568-4c63-4d18-b0c0-bb2238e4078b] (cache misses: wrong dep version loaded (4))\n\n\n\nSYSTEM: caught exception of type :MethodError while trying to print a failed Task notice; giving up\n\n\n\nSYSTEM: caught exception of type :MethodError while trying to print a failed Task notice; giving up\n\n\n\n\nGreat! We’re now ready to start building our optimization model.",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-01-jump.html#what-is-jump",
    "href": "tutorials/tutorial-04-01-jump.html#what-is-jump",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "",
    "text": "JuMP (Julia for Mathematical Programming) is a powerful tool that helps us describe optimization problems in a way that computers can understand and solve. Think of it as a translator between your business problem and the mathematical solver.",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-01-jump.html#what-is-highs",
    "href": "tutorials/tutorial-04-01-jump.html#what-is-highs",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "",
    "text": "HiGHS is an open-source solver that can find solutions to the optimization problems we describe using JuMP. It’s like a very smart calculator that can handle complex problems quickly and efficiently.",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-01-jump.html#our-example-problem",
    "href": "tutorials/tutorial-04-01-jump.html#our-example-problem",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "",
    "text": "Let’s break down our factory management problem:\n\nYou produce two products: Product A and Product B\nEach product gives you a different profit:\n\nProduct A: 100 profit per unit\nProduct B: 150 profit per unit\n\nYou have two departments: Cutting and Finishing\nEach product requires different amounts of time in each department:\n\nProduct A: 2 hours in Cutting, 4 hours in Finishing\nProduct B: 4 hours in Cutting, 3 hours in Finishing\n\nYou have limited time available in each department:\n\nCutting: 40 hours total\nFinishing: 60 hours total\n\n\nYour goal is to decide how many of each product to make to maximize your total profit, while not exceeding the available time in each department.",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-01-jump.html#setting-up",
    "href": "tutorials/tutorial-04-01-jump.html#setting-up",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "",
    "text": "First, we need to install and load the necessary packages. If you haven’t already installed JuMP and HiGHS, run the following code:\n\nimport Pkg\nPkg.activate(\"applied-optimization\")\nPkg.add([\"JuMP\",\"HiGHS\"])\n\nNow, let’s load these packages:\n\nusing JuMP, HiGHS\n\n\n[ Info: Precompiling JuMP [4076af6c-e467-56ae-b986-b466b2749572] (cache misses: wrong dep version loaded (2), wrong source (2))\n\n\n\nSYSTEM: caught exception of type :MethodError while trying to print a failed Task notice; giving up\n\n┌ Error: Error during loading of extension SpecialFunctionsExt of ColorVectorSpace, use `Base.retry_load_extensions()` to retry.\n\n│   exception =\n\n│    1-element ExceptionStack:\n\n│    ArgumentError: Package SpecialFunctionsExt [997ecda8-951a-5f50-90ea-61382e97704b] is required but does not seem to be installed:\n\n│     - Run `Pkg.instantiate()` to install all recorded dependencies.\n\n│    \n\n│    Stacktrace:\n\n│      [1] __require_prelocked(pkg::Base.PkgId, env::Nothing)\n\n│        @ Base ./loading.jl:2587\n\n│      [2] _require_prelocked(uuidkey::Base.PkgId, env::Nothing)\n\n│        @ Base ./loading.jl:2465\n\n│      [3] _require_prelocked(uuidkey::Base.PkgId)\n\n│        @ Base ./loading.jl:2459\n\n│      [4] run_extension_callbacks(extid::Base.ExtensionId)\n\n│        @ Base ./loading.jl:1579\n\n│      [5] run_extension_callbacks(pkgid::Base.PkgId)\n\n│        @ Base ./loading.jl:1616\n\n│      [6] run_package_callbacks(modkey::Base.PkgId)\n\n│        @ Base ./loading.jl:1432\n\n│      [7] _tryrequire_from_serialized(modkey::Base.PkgId, build_id::UInt128)\n\n│        @ Base ./loading.jl:1930\n\n│      [8] _tryrequire_from_serialized(pkg::Base.PkgId, path::String, ocachepath::String)\n\n│        @ Base ./loading.jl:1968\n\n│      [9] __require_prelocked(pkg::Base.PkgId, env::String)\n\n│        @ Base ./loading.jl:2668\n\n│     [10] _require_prelocked(uuidkey::Base.PkgId, env::String)\n\n│        @ Base ./loading.jl:2465\n\n│     [11] macro expansion\n\n│        @ ./loading.jl:2393 [inlined]\n\n│     [12] macro expansion\n\n│        @ ./lock.jl:376 [inlined]\n\n│     [13] __require(into::Module, mod::Symbol)\n\n│        @ Base ./loading.jl:2358\n\n│     [14] require(into::Module, mod::Symbol)\n\n│        @ Base ./loading.jl:2334\n\n│     [15] eval(m::Module, e::Any)\n\n│        @ Core ./boot.jl:489\n\n│     [16] include_string(mapexpr::typeof(REPL.softscope), mod::Module, code::String, filename::String)\n\n│        @ Base ./loading.jl:2843\n\n│     [17] softscope_include_string(m::Module, code::String, filename::String)\n\n│        @ SoftGlobalScope ~/.julia/packages/SoftGlobalScope/u4UzH/src/SoftGlobalScope.jl:65\n\n│     [18] execute_request(socket::ZMQ.Socket, msg::IJulia.Msg)\n\n│        @ IJulia ~/.julia/packages/IJulia/eenvU/src/execute_request.jl:81\n\n│     [19] eventloop(socket::ZMQ.Socket)\n\n│        @ IJulia ~/.julia/packages/IJulia/eenvU/src/eventloop.jl:14\n\n│     [20] (::IJulia.var\"#waitloop##2#waitloop##3\")()\n\n│        @ IJulia ~/.julia/packages/IJulia/eenvU/src/eventloop.jl:58\n\n└ @ Base loading.jl:1589\n\n\n\nSYSTEM: caught exception of type :MethodError while trying to print a failed Task notice; giving up\n\n[ Info: Precompiling HiGHS [87dc4568-4c63-4d18-b0c0-bb2238e4078b] (cache misses: wrong dep version loaded (4))\n\n\n\nSYSTEM: caught exception of type :MethodError while trying to print a failed Task notice; giving up\n\n\n\nSYSTEM: caught exception of type :MethodError while trying to print a failed Task notice; giving up\n\n\n\n\nGreat! We’re now ready to start building our optimization model.",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-01-jump.html#exercise-2.1---create-variables",
    "href": "tutorials/tutorial-04-01-jump.html#exercise-2.1---create-variables",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "Exercise 2.1 - Create Variables",
    "text": "Exercise 2.1 - Create Variables\nNow it’s your turn! Create two continuous variables equal to or larger than 0 called productA and productB that represent the number of units produced in our problem for our model model.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert @isdefined productA\n@assert typeof(productA) == VariableRef\n@assert has_upper_bound(productA) == false\n@assert has_lower_bound(productA) == true\n@assert lower_bound(productA) == 0\n@assert @isdefined productA\n@assert typeof(productB) == VariableRef\n@assert has_upper_bound(productB) == false\n@assert has_lower_bound(productB) == true\n@assert lower_bound(productB) == 0\nprintln(\"Variables added to the model successfully!\")",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-01-jump.html#exercise-3.1---create-constraints",
    "href": "tutorials/tutorial-04-01-jump.html#exercise-3.1---create-constraints",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "Exercise 3.1 - Create Constraints",
    "text": "Exercise 3.1 - Create Constraints\nCreate two constraints based on the on the Cutting and Finishing department hours of the problem description in this tutorial. Call the first constraint cutting_constraint and the second constraint finishing_constraint.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert is_valid(model, cutting_constraint)\n@assert is_valid(model, finishing_constraint)\nprintln(\"Constraints added to the model successfully!\")\nprintln(\"Note, that only the existence of these constraints was checked!\")\nprintln(\"The optimization later will show, whether the formulation was correct.\")",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-01-jump.html#exercise-4.1---create-the-objective-function",
    "href": "tutorials/tutorial-04-01-jump.html#exercise-4.1---create-the-objective-function",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "Exercise 4.1 - Create the Objective Function",
    "text": "Exercise 4.1 - Create the Objective Function\nCreate the objective function based on the problem description of this tutorial. The objective is to maximize profit based on the values of productA and productB.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert typeof(objective_function(model)) == AffExpr\nprintln(\"An objective function defined successfully!\")\nprintln(\"The optimization later will show, whether the formulation was correct.\")",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-03-constraints.html",
    "href": "tutorials/tutorial-04-03-constraints.html",
    "title": "Tutorial IV.III - Constraints in JuMP",
    "section": "",
    "text": "Welcome to this tutorial on constraints in JuMP! In this lesson, we’ll explore how to add rules (constraints) to our optimization problems.\nBy the end of this tutorial, you’ll be able to: 1. Create simple constraints for your optimization problems 2. Use containers (like arrays) to manage multiple similar constraints 3. Create more complex constraints based on conditions\nLet’s start by loading the necessary packages:\n\nusing JuMP, HiGHS\n\nNow, let’s create a model that we’ll use throughout this tutorial:\n\nanother_model = Model(HiGHS.Optimizer)\nprintln(\"Great! We've created a new optimization model.\")",
    "crumbs": [
      "04 Optimization",
      "03 - Constraints"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-03-constraints.html#exercise-1.1---define-arrays",
    "href": "tutorials/tutorial-04-03-constraints.html#exercise-1.1---define-arrays",
    "title": "Tutorial IV.III - Constraints in JuMP",
    "section": "Exercise 1.1 - Define arrays",
    "text": "Exercise 1.1 - Define arrays\nScenario: Imagine you’re optimizing the production of 8 different products in a factory. Each product has a different profit margin, and you want to maximize total profit.\nDefine an array of variables and an objective function for another_model. The variables should be called profits and have a range from 1:8. It has a lower bound of 0. The objective should be a Maximization of the sum of all profits.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert length(profits) == 8 && all(lower_bound(profits[i]) == 0 for i in 1:8)\n@assert typeof(objective_function(another_model)) == AffExpr\nprintln(\"Objective function with container variables defined successfully!\")",
    "crumbs": [
      "04 Optimization",
      "03 - Constraints"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-03-constraints.html#exercise-3.1---add-a-conditional-constraints",
    "href": "tutorials/tutorial-04-03-constraints.html#exercise-3.1---add-a-conditional-constraints",
    "title": "Tutorial IV.III - Constraints in JuMP",
    "section": "Exercise 3.1 - Add a conditional constraints",
    "text": "Exercise 3.1 - Add a conditional constraints\nScenario extension: The first 4 products are new and have limited market demand.\nAdd a conditional constraint smallProfit to the previous model. Condition: Only the first 4 variables profit have to be lower or equalthan 5.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert all(is_valid(another_model, smallProfit[i]) for i in 1:4)\nprintln(\"Conditional constraint implemented successfully!\")\nprintln(\"Checking successful implementation.\")\noptimize!(another_model)\nstatus = termination_status(another_model)\n@assert status == MOI.OPTIMAL \"Sorry, something didn't work out as the model status is $status\"\n@assert objective_value(another_model) ≈ 68 atol=1e-4 \"Although you have an optimal solution,\n    the should be 68 not $(objective_value(another_model)). Is the model correct?\"\nprintln(\"Model components validated successfully!\")",
    "crumbs": [
      "04 Optimization",
      "03 - Constraints"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-05-transport.html",
    "href": "tutorials/tutorial-04-05-transport.html",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "",
    "text": "Welcome to this tutorial on the transportation problem using JuMP! As always, don’t worry if you’re new to optimization - we’ll walk through everything step by step using a real-world example.\nImagine you’re running a solar panel distribution company. You have several warehouses (suppliers) and need to ship solar panels to various solar farms (customers). Your goal is to minimize the total cost of transportation while meeting all customer demands.\nBy the end of this tutorial, you’ll be able to:\n\nUnderstand what a transportation problem is\nSet up a transportation problem using JuMP\nSolve the problem and interpret the results\n\nLet’s start by loading the necessary packages:\n\nusing JuMP, HiGHS\nusing DataFrames, CSV",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-05-transport.html#exercise-1.1---understand-the-data",
    "href": "tutorials/tutorial-04-05-transport.html#exercise-1.1---understand-the-data",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Exercise 1.1 - Understand the Data",
    "text": "Exercise 1.1 - Understand the Data\nTake a moment to look at the data. Can you answer these questions?\n\nHow many warehouses do we have? Save the number in a variable called num_warehouses.\nHow many solar farms are we supplying? Save the number in a variable called num_solar_farms.\n\n\n# YOUR ANSWERS BELOW\n# Hint: Use the `nrow()` function to count rows\n\n\n\nCode\n# Test your understanding\n@assert num_warehouses == nrow(available)\n@assert num_solar_farms == nrow(requested)\n\nprintln(\"Great job! Here are the answers:\")\nprintln(\"Number of warehouses: \", num_warehouses)\nprintln(\"Number of solar farms: \", num_solar_farms)",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-05-transport.html#exercise-3.1---creating-the-model-instance",
    "href": "tutorials/tutorial-04-05-transport.html#exercise-3.1---creating-the-model-instance",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Exercise 3.1 - Creating the model instance",
    "text": "Exercise 3.1 - Creating the model instance\nFrom the last tutorial, you should know how to do this. Create a model instance called transport_model and set the optimizer to HiGHS.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert typeof(transport_model) == JuMP.Model\nprintln(\"Model instance created successfully!\")",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-05-transport.html#define-the-variables",
    "href": "tutorials/tutorial-04-05-transport.html#define-the-variables",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Define the variables",
    "text": "Define the variables\nWe can now define the variables of our model. We need to define a variable for each supplier and customer pair. As before, we can use the @variable macro to define the variables. The syntax is @variable(model, varname[index1,index2] &gt;= 0), where model is the model instance, varname is the name of the variable, and index1 and index2 are the indices of the variable. We can use vectors as input for the indices, but we could also use the keys of the dictionaries. In the following code block we mixed both options, to show you that it is possible.\n\n# Define variable\n@variable(\n    transport_model,\n    X[available.supplier,keys(requested_dict)] &gt;= 0\n)",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-05-transport.html#define-the-objective",
    "href": "tutorials/tutorial-04-05-transport.html#define-the-objective",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Define the objective",
    "text": "Define the objective\nNext, we can define the objective of our model. We want to maximize the profit, which is the revenue minus the variable costs and the transportation costs. As before, we can use the @objective macro to define the objective. The syntax is @objective(model, Max, expression), where model is the model instance, Max indicates that we want to maximize the expression, and expression is the expression we want to maximize.\n\n@objective(transport_model, Max,\n    sum((revenue-varCosts-travelCosts_dict[(i,j)]) * X[i,j]\n    for i in keys(available_dict), j in keys(requested_dict))\n)",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-05-transport.html#define-the-constraints",
    "href": "tutorials/tutorial-04-05-transport.html#define-the-constraints",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Define the constraints",
    "text": "Define the constraints\nWe can now define the constraints of our model. We need to ensure that the supply from each supplier is enough to cover the demand of each customer. We can use the @constraint macro to define the constraints. The syntax is @constraint(model, expression), where model is the model instance and expression is the expression we want to constrain.\nTo illustrate the use of dictionaries, we will again use the keys of the dictionaries to define the constraints in the following code block.\n\n@constraint(transport_model,\n    restrictAvailable[i in keys(available_dict)],\n    sum(X[i,j] for j in keys(requested_dict)) &lt;= available_dict[i]\n)\n\nNaturally, we could also use the vectors with the names from the DataFrames to define the constraints or we could also just work with ranges from the beginning, e.g. 1:length(available.supplier) and 1:length(requested.solar_farm). Working with names is often more convenient, though.\n\n@constraint(transport_model,\n    restrictDemand[j in requested.solar_farm],\n    sum(X[i,j] for i in available.supplier) &lt;= requested_dict[j]\n)\n\nAnd that’s it! We have now defined the model and can start optimizing.",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "tutorials/tutorial-04-05-transport.html#exercise-5.1---start-optimization",
    "href": "tutorials/tutorial-04-05-transport.html#exercise-5.1---start-optimization",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Exercise 5.1 - Start optimization",
    "text": "Exercise 5.1 - Start optimization\nStart the optimization as usual by calling the optimize! function on the model instance.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert termination_status(transport_model) == MOI.OPTIMAL\nprintln(\"Model optimized successfully!\")\n\n\nNow, we can access the values of the variables at the optimal solution. But remember, we defined the variables with the keys of the dictionaries, so we need to convert the result back to a DataFrame. Calling the variable itself will just show the structure of the variable, not the values.\n\nfirst(X,5)\n\nThus, we need to use the value function to extract the values from the variable.\n\ntransport_values = value.(X)\n\nThe result is a DenseAxisArray{Float64,2,...} with index sets. To convert it to a DataFrame, we just need to iterate over the keys dictionaries and store the values in a new DataFrame. As we are not interested in values which are zero, we can skip those.\nFirst, we need to initialize an empty DataFrame with the correct column names.\n\ntransport_df = DataFrame(\n    supplier = [],\n    solar_farm = [],\n    truckloads = []\n)\n\n0×3 DataFrame\n\n\n\nRow\nsupplier\nsolar_farm\ntruckloads\n\n\n\nAny\nAny\nAny\n\n\n\n\n\n\n\n\nThen, we can iterate over the keys of the dictionaries and store the values in the DataFrame if they are greater than zero.\n\nfor i in keys(available_dict)\n    for j in keys(requested_dict)\n        if transport_values[i,j] &gt; 0\n            push!(transport_df, (\n                supplier = i,\n                solar_farm = j,\n                truckloads = transport_values[i,j]\n                )\n            )\n        end\n    end\nend\n\nFinally, we can print the first few rows of the transportation plan to check if it looks correct.\n\nprintln(\"Begining of the transportation plan:\")\nfirst(transport_df,5)\n\n\n\n\n\n\n\nAlthough the above code looks rather complicated, it is essentially just iterating over the keys of the dictionaries and storing the values in a new DataFrame. This is a common pattern in optimization, as we often want to convert the result of an optimization problem into a more convenient format for reporting or further processing.",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "tutorials/tutorial-06-ordersplit.html",
    "href": "tutorials/tutorial-06-ordersplit.html",
    "title": "Tutorial VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "We are consulting for FitGear, a rapidly growing e-commerce company specializing in fitness equipment and athletic wear. FitGear is facing a challenge: customer complaints about split orders have increased by 40% in the last quarter. When a customer orders multiple items, they sometimes receive multiple packages from different warehouses, leading to higher shipping costs and frustrated customers.\nThis tutorial explores how to optimize SKU allocation across warehouses to minimize split orders using mathematical optimization.\n\n\n\nFirst, we need to understand which products are frequently purchased together. We’ll use a coappearance matrix. It shows how frequently items appear together in customer orders. For each pair of items (i,j), the matrix element Q[i,j] represents the number of orders containing both items i and j. Let’s start with a small sample of FitGear’s historical order data and determine the coappearance matrix of the transactional data set manually by hand.\n\n\n\n\\(t_{mi}\\)\nA\nB\nC\nD\n\n\n\n\n1\n1\n1\n1\n0\n\n\n2\n1\n1\n1\n0\n\n\n3\n1\n1\n0\n0\n\n\n4\n1\n0\n0\n1\n\n\n5\n1\n0\n0\n1\n\n\n6\n1\n0\n0\n1\n\n\n7\n1\n0\n0\n1\n\n\n8\n0\n0\n1\n1\n\n\n\nWhat is the resulting coappearance matrix from the transactional data set? Please provide it in the following cell as matrix by changing the 0s to the correct values.\n\nQ = [\n    0 0 0 0;\n    0 0 0 0;\n    0 0 0 0;\n    0 0 0 0;\n]\n\n\n\n\n\nFitGear currently operates two warehouses - one in Hamburg and one in Berlin. Each warehouse has limited storage capacity:\n\nHamburg can store 3 different product types (SKUs)\nBerlin can also store 3 different product types\n\nBased on the coappearance matrix you have determined in the previous assignment, use the model from the lecture to maximise the coappearances manually by hand. What is the resulting objective function value of the assignment? Please provide it in the following cell.\n\nobjective_value_by_hand =\n\n\n\n\n\nBased on the output of the optimisation, we don’t know the number of split orders yet. Calculate the number of split orders manually from your previous solution.\n\nnumber_of_split_parcels =\n\n\n\n\n\n\n\nNoteBonus Question\n\n\n\nIs the solution of the QMKP the optimal solution for the underlying split parcel minimisation problem? Try to come up with another solution that has less split or the same number of split parcels.\n\n\n\n\n\n\nAs FitGear continues to grow, the operations team needs a solution that can handle their full product catalog. They now have:\n\n12 popular fitness products\n40 recent customer orders\nTwo warehouses with different capacities:\n\nHamburg: 7 SKUs\nBerlin: 6 SKUs\n\n\nThus, we’ll now implement a scalable solution using Julia and JuMP that can handle larger datasets.\n\nskus = [\n    \"Running Shoes\",\n    \"Athletic Socks\",\n    \"Water Bottle\",\n    \"Yoga Mat\",\n    \"Resistance Bands\",\n    \"Sports Bag\",\n    \"Protein Powder\",\n    \"Exercise Shorts\",\n    \"Training Shirt\",\n    \"Fitness Tracker\",\n    \"Foam Roller\",\n    \"Weight Gloves\"\n]\n\nwarehouses = [\"Hamburg\", \"Berlin\"]\n\ncapacity = [7, 6]\n\nT = [\n    # First set of transactions (1-20)\n    1 1 0 0 0 0 0 0 0 0 0 0;  # shoes + socks\n    1 1 0 0 0 1 0 0 0 0 0 0;  # shoes + socks + sports bag\n    0 0 0 1 1 0 0 0 0 0 1 0;  # yoga mat + bands + foam roller\n    0 0 1 1 0 0 0 0 0 0 0 0;  # water bottle + yoga mat\n    0 0 0 0 0 0 1 0 0 0 0 0;  # just protein powder\n    0 0 0 0 0 0 1 0 0 0 0 1;  # protein powder + gloves\n    0 0 0 0 0 0 0 1 1 0 0 0;  # shorts + shirt combo\n    0 0 0 0 1 0 0 1 1 0 0 0;  # workout outfit + bands\n    0 0 0 0 0 0 0 0 0 1 0 0;  # just fitness tracker\n    1 1 1 0 0 1 0 1 1 0 0 0;  # full running gear set\n    0 0 0 1 1 0 0 0 0 0 1 1;  # home gym basics\n    0 0 0 0 0 0 1 1 1 0 0 1;  # gym starter pack\n    0 0 1 0 1 0 0 0 0 0 0 0;  # water bottle + bands\n    1 1 0 0 0 0 0 1 1 0 0 0;  # running outfit complete\n    0 0 0 1 1 0 0 0 0 0 1 0;  # yoga equipment set\n    0 0 0 0 0 0 1 0 0 0 0 1;  # protein powder + gloves\n    0 0 1 0 0 0 1 0 0 0 0 0;  # water bottle + protein\n    1 0 0 0 0 1 0 0 0 1 0 0;  # shoes + bag + tracker\n    0 0 0 0 1 0 0 1 1 0 0 0;  # workout outfit + bands\n    0 0 0 1 0 0 0 0 0 0 1 0;  # yoga mat + foam roller\n    1 1 0 0 0 0 0 1 1 0 0 0;  # shoes + socks + workout clothes\n    1 1 0 0 0 1 0 0 0 1 0 0;  # shoes + socks + bag + tracker\n    0 0 0 1 1 0 0 0 0 0 1 1;  # yoga mat + bands + foam roller + gloves\n    0 0 1 1 1 0 0 0 0 0 0 0;  # water bottle + yoga mat + bands\n    0 0 1 0 0 0 1 0 0 0 0 1;  # protein powder + water bottle + gloves\n    0 0 0 0 1 0 1 0 0 0 0 1;  # protein powder + bands + gloves\n    0 0 0 0 0 0 0 1 1 1 0 0;  # shorts + shirt + tracker\n    1 0 0 0 1 0 0 1 1 0 0 0;  # shoes + workout outfit + bands\n    0 0 1 0 0 0 0 0 0 1 0 0;  # water bottle + tracker\n    1 1 1 0 0 1 0 1 1 1 0 0;  # deluxe running gear set\n    0 0 0 1 1 0 1 0 0 0 1 1;  # advanced home gym set\n    0 0 1 0 0 0 1 1 1 0 0 1;  # gym starter pack with water bottle\n    0 0 1 0 1 0 0 0 0 1 0 0;  # water bottle + bands + tracker\n    1 1 0 0 0 1 0 1 1 0 0 0;  # running outfit with bag\n    0 0 0 1 1 0 0 0 0 0 1 1;  # yoga equipment set with gloves\n    0 0 1 0 0 0 1 0 0 0 1 1;  # protein set with foam roller\n    0 0 1 0 0 1 1 0 0 0 0 0;  # water bottle + protein + bag\n    1 0 0 0 0 1 0 0 0 1 1 0;  # shoes + bag + tracker + foam roller\n    0 0 0 0 1 0 0 1 1 1 0 0;  # workout outfit + bands + tracker\n    0 0 0 1 0 0 0 0 0 1 1 0   # yoga mat + tracker + foam roller\n]\n\nImplement the model in Julia and solve it for the given data set.\n\n\n\n\n\n\nNoteEach SKU can only be allocated to one warehouse!\n\n\n\nThe retailer has another requirement: each SKU can only be allocated to one warehouse. Make sure to include this requirement in your model.\n\n\n\n\n\n\nIf you don’t have Juniper, Ipopt and/or HiGHS installed, add the solver via Pkg.add(“Juniper”) and Pkg.add(“Ipopt”) and Pkg.add(“HiGHS”). Juniper is a solver for nonlinear problems, that can be used in combination with Ipopt and HiGHS to solve mixed-integer quadratic problems. If you want to use SCIP, you can also do this by adding JuMP and SCIP and then change the solver in the model definition to warehouse_model = Model(SCIP.Optimizer()). Note, that this does not work automatically in Windows, as you will have to install the SCIP binaries manually. On Mac and Linux, it should work out of the box.\nFirst, we start by defining the model.\n\n# Definition of the warehouse model\nusing JuMP, Ipopt, HiGHS, Juniper\nipopt = optimizer_with_attributes(Ipopt.Optimizer, \"print_level\" =&gt; 0)\nhighs = optimizer_with_attributes(HiGHS.Optimizer, \"output_flag\" =&gt; false)\nwarehouse_model = Model(\n    optimizer_with_attributes(\n        Juniper.Optimizer,\n        \"nl_solver\" =&gt; ipopt,\n        \"mip_solver\" =&gt; highs,\n    ),\n)\n\nA JuMP Model\n├ solver: Juniper\n├ objective_sense: FEASIBILITY_SENSE\n├ num_variables: 0\n├ num_constraints: 0\n└ Names registered in the model: none\n\n\n\n\n\n\nNext, compute the coappearance matrix based on the transactional data provided in T.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assert whether the coappearance matrix is correct.\n@assert Q == Q' \"The coappearance matrix is not symmetric. Have you transposed the transactional data set?\"\n@assert Q[1,1] == 11 \"The coappearance matrix is not correct. Have you multiplied the transposed transactional data set with itself?\"\nprintln(\"Great! The coappearance matrix is correct.\")\n\n\n\n\n\n\nNow, define the decision variable for the SKU allocation. Please name the variable X.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assert whether the decision variable is correct.\n@assert typeof(X) &lt;: AbstractArray{VariableRef} \"The decision variable X should be an array of JuMP variables\"\n@assert all(is_binary.(X)) \"The decision variable X should be defined as binary\"\n@assert size(X) == (length(skus), length(warehouses)) \"The decision variable X should have dimensions [skus × warehouses]\"\nprintln(\"Great! The decision variable is correctly defined as a binary variable with proper dimensions.\")\n\n\n\n\n\n\nThen, define the objective function to maximize the coappearance.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assert whether the objective function is correct.\n@assert typeof(objective_function(warehouse_model)) &lt;: QuadExpr \"The objective function should be a quadratic expression of JuMP variables\"\nprintln(\"Great! The objective function is correctly defined.\")\n\n\n\n\n\n\nTo ensure that each SKU is allocated to one warehouse, add the first constraint.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assert whether the single allocation constraint is correct.\n@assert num_constraints(warehouse_model, AffExpr, MOI.EqualTo{Float64}) == length(skus) \"The single allocation constraint should have one constraint for each SKU\"\nprintln(\"Great! The single allocation constraint is correctly defined.\")\n\n\nTo ensure that the capacity of each warehouse is not exceeded, add the second constraint.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assert whether the capacity constraint is correct.\n@assert num_constraints(warehouse_model, AffExpr, MOI.LessThan{Float64}) == length(warehouses) \"The capacity constraint should have one constraint for each warehouse\"\nprintln(\"Great! The capacity constraint is correctly defined.\")\n\n\n\n\n\n\nFinally, solve the model with a solve statement.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assert whether the model is solved correctly.\n@assert termination_status(warehouse_model) == MOI.OPTIMAL || termination_status(warehouse_model) == MOI.LOCALLY_SOLVED \"The model should either be solved with an optimal solution or with a locally optimal solution\"\n@assert isapprox(objective_value(warehouse_model), 141) \"The objective value should approximaly be 141. Have you correctly implemented the objective function?\"\nprintln(\"Great! The model is correctly solved.\")\n\n\n\n\n\n\nThe following code prints the objective value, the SKU allocation and the warehouse capacities based on your optimal solution.\n\nprintln(\"Objective value: \", objective_value(warehouse_model))\nprintln()\nprintln(\"SKU Allocation:\")\nfor i in skus\n    for k in warehouses\n        if value(X[i,k]) &gt; 0.1\n            println(\"SKU: \", i, \" Allocation: \", k)\n        end\n    end\nend\nprintln()\nprintln(\"Warehouse Capacities:\")\nfor k in 1:length(warehouses)\n    println(\"Warehouse: \", warehouses[k], \" Capacity: \", capacity[k], \" Used: \", sum(value.(X[i,warehouses[k]]) for i in skus))\nend\n\n\n\n\n\nBased on the output of the optimisation, we still don’t know the number of split orders. The following code calculates the number of split orders from the SKU allocation for the optimal solution.\n\n# Binary matrix indicating whether a SKU is allocated to a warehouse.\nX_values = [value(X[i,j]) &gt; 0 ? true : false for i in skus, j in warehouses]\n\n# Function to count the number of split and regular parcels.\nfunction count_split_orders(X_input, transactional_data)\n    # Initialize the counters for split and regular parcels.\n    split_parcels = 0\n    regular_parcels = 0\n\n    # Iterate over each transaction in the transactional data set.\n    for t in 1:size(transactional_data,1)\n\n        # Check if the first warehouse can fulfill the transaction.\n        if all(X_input[:,1] .&gt;= transactional_data[t,:])\n            regular_parcels += 1\n\n        # Check if the second warehouse can fulfill the transaction.\n        elseif all(X_input[:,2] .&gt;= transactional_data[t,:])\n            regular_parcels += 1\n\n        # If neither warehouse can fulfill the transaction, it is a split.\n        else\n            split_parcels += 1\n            regular_parcels += 1\n        end\n    end\n    return split_parcels, regular_parcels\nend\n\n# Count the number of split and regular parcels for the optimal solution.\nsplit_parcels, regular_parcels = count_split_orders(X_values, T)\n\n# Count the number of split and regular parcels for 100 random solutions.\nsplit_parcels_random = []\nregular_parcels_random = []\nfor trial in 1:100\n    X_random = [rand(Bool) for i in 1:length(skus), j in 1:length(warehouses)]\n    split_parcels_random_trial, regular_parcels_random_trial = count_split_orders(X_random, T)\n    push!(split_parcels_random, split_parcels_random_trial)\n    push!(regular_parcels_random, regular_parcels_random_trial)\nend\nsplit_parcels_random = sum(split_parcels_random)/100\nregular_parcels_random = sum(regular_parcels_random)/100\n\n# Print the number of split and regular parcels.\nprintln(\"Number of split orders (optimal): \", split_parcels)\nprintln(\"Number of regular orders (optimal): \", regular_parcels)\nprintln()\n\n# Print the number of split and regular parcels for the random solution.\nprintln(\"Number of split orders (random): \", split_parcels_random)\nprintln(\"Number of regular orders (random): \", regular_parcels_random)\n\n\n\n\n\nFitGear’s operations team needs to understand the business implications of this optimization:\n\nWhich product categories tend to cluster together in the same warehouse? For example, do workout clothes tend to be stored together?\nHow many fewer split shipments would FitGear have compared to their current random allocation?\nHow might this new allocation affect warehouse operations and picking efficiency?\n\nYour answer goes here, thinking from the business perspective. A few sentences are fully sufficient!\n\n# YOUR ANSWER BELOW\n#=\n\n\n\n=#",
    "crumbs": [
      "06 Warehouse",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-06-ordersplit.html#coappearance-matrix",
    "href": "tutorials/tutorial-06-ordersplit.html#coappearance-matrix",
    "title": "Tutorial VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "First, we need to understand which products are frequently purchased together. We’ll use a coappearance matrix. It shows how frequently items appear together in customer orders. For each pair of items (i,j), the matrix element Q[i,j] represents the number of orders containing both items i and j. Let’s start with a small sample of FitGear’s historical order data and determine the coappearance matrix of the transactional data set manually by hand.\n\n\n\n\\(t_{mi}\\)\nA\nB\nC\nD\n\n\n\n\n1\n1\n1\n1\n0\n\n\n2\n1\n1\n1\n0\n\n\n3\n1\n1\n0\n0\n\n\n4\n1\n0\n0\n1\n\n\n5\n1\n0\n0\n1\n\n\n6\n1\n0\n0\n1\n\n\n7\n1\n0\n0\n1\n\n\n8\n0\n0\n1\n1\n\n\n\nWhat is the resulting coappearance matrix from the transactional data set? Please provide it in the following cell as matrix by changing the 0s to the correct values.\n\nQ = [\n    0 0 0 0;\n    0 0 0 0;\n    0 0 0 0;\n    0 0 0 0;\n]",
    "crumbs": [
      "06 Warehouse",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-06-ordersplit.html#maximizing-coappearances",
    "href": "tutorials/tutorial-06-ordersplit.html#maximizing-coappearances",
    "title": "Tutorial VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "FitGear currently operates two warehouses - one in Hamburg and one in Berlin. Each warehouse has limited storage capacity:\n\nHamburg can store 3 different product types (SKUs)\nBerlin can also store 3 different product types\n\nBased on the coappearance matrix you have determined in the previous assignment, use the model from the lecture to maximise the coappearances manually by hand. What is the resulting objective function value of the assignment? Please provide it in the following cell.\n\nobjective_value_by_hand =",
    "crumbs": [
      "06 Warehouse",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-06-ordersplit.html#counting-split-parcels",
    "href": "tutorials/tutorial-06-ordersplit.html#counting-split-parcels",
    "title": "Tutorial VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Based on the output of the optimisation, we don’t know the number of split orders yet. Calculate the number of split orders manually from your previous solution.\n\nnumber_of_split_parcels =\n\n\n\n\n\n\n\nNoteBonus Question\n\n\n\nIs the solution of the QMKP the optimal solution for the underlying split parcel minimisation problem? Try to come up with another solution that has less split or the same number of split parcels.",
    "crumbs": [
      "06 Warehouse",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-06-ordersplit.html#implementing-the-model",
    "href": "tutorials/tutorial-06-ordersplit.html#implementing-the-model",
    "title": "Tutorial VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "As FitGear continues to grow, the operations team needs a solution that can handle their full product catalog. They now have:\n\n12 popular fitness products\n40 recent customer orders\nTwo warehouses with different capacities:\n\nHamburg: 7 SKUs\nBerlin: 6 SKUs\n\n\nThus, we’ll now implement a scalable solution using Julia and JuMP that can handle larger datasets.\n\nskus = [\n    \"Running Shoes\",\n    \"Athletic Socks\",\n    \"Water Bottle\",\n    \"Yoga Mat\",\n    \"Resistance Bands\",\n    \"Sports Bag\",\n    \"Protein Powder\",\n    \"Exercise Shorts\",\n    \"Training Shirt\",\n    \"Fitness Tracker\",\n    \"Foam Roller\",\n    \"Weight Gloves\"\n]\n\nwarehouses = [\"Hamburg\", \"Berlin\"]\n\ncapacity = [7, 6]\n\nT = [\n    # First set of transactions (1-20)\n    1 1 0 0 0 0 0 0 0 0 0 0;  # shoes + socks\n    1 1 0 0 0 1 0 0 0 0 0 0;  # shoes + socks + sports bag\n    0 0 0 1 1 0 0 0 0 0 1 0;  # yoga mat + bands + foam roller\n    0 0 1 1 0 0 0 0 0 0 0 0;  # water bottle + yoga mat\n    0 0 0 0 0 0 1 0 0 0 0 0;  # just protein powder\n    0 0 0 0 0 0 1 0 0 0 0 1;  # protein powder + gloves\n    0 0 0 0 0 0 0 1 1 0 0 0;  # shorts + shirt combo\n    0 0 0 0 1 0 0 1 1 0 0 0;  # workout outfit + bands\n    0 0 0 0 0 0 0 0 0 1 0 0;  # just fitness tracker\n    1 1 1 0 0 1 0 1 1 0 0 0;  # full running gear set\n    0 0 0 1 1 0 0 0 0 0 1 1;  # home gym basics\n    0 0 0 0 0 0 1 1 1 0 0 1;  # gym starter pack\n    0 0 1 0 1 0 0 0 0 0 0 0;  # water bottle + bands\n    1 1 0 0 0 0 0 1 1 0 0 0;  # running outfit complete\n    0 0 0 1 1 0 0 0 0 0 1 0;  # yoga equipment set\n    0 0 0 0 0 0 1 0 0 0 0 1;  # protein powder + gloves\n    0 0 1 0 0 0 1 0 0 0 0 0;  # water bottle + protein\n    1 0 0 0 0 1 0 0 0 1 0 0;  # shoes + bag + tracker\n    0 0 0 0 1 0 0 1 1 0 0 0;  # workout outfit + bands\n    0 0 0 1 0 0 0 0 0 0 1 0;  # yoga mat + foam roller\n    1 1 0 0 0 0 0 1 1 0 0 0;  # shoes + socks + workout clothes\n    1 1 0 0 0 1 0 0 0 1 0 0;  # shoes + socks + bag + tracker\n    0 0 0 1 1 0 0 0 0 0 1 1;  # yoga mat + bands + foam roller + gloves\n    0 0 1 1 1 0 0 0 0 0 0 0;  # water bottle + yoga mat + bands\n    0 0 1 0 0 0 1 0 0 0 0 1;  # protein powder + water bottle + gloves\n    0 0 0 0 1 0 1 0 0 0 0 1;  # protein powder + bands + gloves\n    0 0 0 0 0 0 0 1 1 1 0 0;  # shorts + shirt + tracker\n    1 0 0 0 1 0 0 1 1 0 0 0;  # shoes + workout outfit + bands\n    0 0 1 0 0 0 0 0 0 1 0 0;  # water bottle + tracker\n    1 1 1 0 0 1 0 1 1 1 0 0;  # deluxe running gear set\n    0 0 0 1 1 0 1 0 0 0 1 1;  # advanced home gym set\n    0 0 1 0 0 0 1 1 1 0 0 1;  # gym starter pack with water bottle\n    0 0 1 0 1 0 0 0 0 1 0 0;  # water bottle + bands + tracker\n    1 1 0 0 0 1 0 1 1 0 0 0;  # running outfit with bag\n    0 0 0 1 1 0 0 0 0 0 1 1;  # yoga equipment set with gloves\n    0 0 1 0 0 0 1 0 0 0 1 1;  # protein set with foam roller\n    0 0 1 0 0 1 1 0 0 0 0 0;  # water bottle + protein + bag\n    1 0 0 0 0 1 0 0 0 1 1 0;  # shoes + bag + tracker + foam roller\n    0 0 0 0 1 0 0 1 1 1 0 0;  # workout outfit + bands + tracker\n    0 0 0 1 0 0 0 0 0 1 1 0   # yoga mat + tracker + foam roller\n]\n\nImplement the model in Julia and solve it for the given data set.\n\n\n\n\n\n\nNoteEach SKU can only be allocated to one warehouse!\n\n\n\nThe retailer has another requirement: each SKU can only be allocated to one warehouse. Make sure to include this requirement in your model.",
    "crumbs": [
      "06 Warehouse",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-06-ordersplit.html#use-the-juniper-solver",
    "href": "tutorials/tutorial-06-ordersplit.html#use-the-juniper-solver",
    "title": "Tutorial VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "If you don’t have Juniper, Ipopt and/or HiGHS installed, add the solver via Pkg.add(“Juniper”) and Pkg.add(“Ipopt”) and Pkg.add(“HiGHS”). Juniper is a solver for nonlinear problems, that can be used in combination with Ipopt and HiGHS to solve mixed-integer quadratic problems. If you want to use SCIP, you can also do this by adding JuMP and SCIP and then change the solver in the model definition to warehouse_model = Model(SCIP.Optimizer()). Note, that this does not work automatically in Windows, as you will have to install the SCIP binaries manually. On Mac and Linux, it should work out of the box.\nFirst, we start by defining the model.\n\n# Definition of the warehouse model\nusing JuMP, Ipopt, HiGHS, Juniper\nipopt = optimizer_with_attributes(Ipopt.Optimizer, \"print_level\" =&gt; 0)\nhighs = optimizer_with_attributes(HiGHS.Optimizer, \"output_flag\" =&gt; false)\nwarehouse_model = Model(\n    optimizer_with_attributes(\n        Juniper.Optimizer,\n        \"nl_solver\" =&gt; ipopt,\n        \"mip_solver\" =&gt; highs,\n    ),\n)\n\nA JuMP Model\n├ solver: Juniper\n├ objective_sense: FEASIBILITY_SENSE\n├ num_variables: 0\n├ num_constraints: 0\n└ Names registered in the model: none",
    "crumbs": [
      "06 Warehouse",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-06-ordersplit.html#compute-the-coappearance-matrix",
    "href": "tutorials/tutorial-06-ordersplit.html#compute-the-coappearance-matrix",
    "title": "Tutorial VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Next, compute the coappearance matrix based on the transactional data provided in T.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assert whether the coappearance matrix is correct.\n@assert Q == Q' \"The coappearance matrix is not symmetric. Have you transposed the transactional data set?\"\n@assert Q[1,1] == 11 \"The coappearance matrix is not correct. Have you multiplied the transposed transactional data set with itself?\"\nprintln(\"Great! The coappearance matrix is correct.\")",
    "crumbs": [
      "06 Warehouse",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-06-ordersplit.html#define-the-decision-variable",
    "href": "tutorials/tutorial-06-ordersplit.html#define-the-decision-variable",
    "title": "Tutorial VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Now, define the decision variable for the SKU allocation. Please name the variable X.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assert whether the decision variable is correct.\n@assert typeof(X) &lt;: AbstractArray{VariableRef} \"The decision variable X should be an array of JuMP variables\"\n@assert all(is_binary.(X)) \"The decision variable X should be defined as binary\"\n@assert size(X) == (length(skus), length(warehouses)) \"The decision variable X should have dimensions [skus × warehouses]\"\nprintln(\"Great! The decision variable is correctly defined as a binary variable with proper dimensions.\")",
    "crumbs": [
      "06 Warehouse",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-06-ordersplit.html#define-the-objective-function",
    "href": "tutorials/tutorial-06-ordersplit.html#define-the-objective-function",
    "title": "Tutorial VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Then, define the objective function to maximize the coappearance.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assert whether the objective function is correct.\n@assert typeof(objective_function(warehouse_model)) &lt;: QuadExpr \"The objective function should be a quadratic expression of JuMP variables\"\nprintln(\"Great! The objective function is correctly defined.\")",
    "crumbs": [
      "06 Warehouse",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-06-ordersplit.html#define-the-constraints",
    "href": "tutorials/tutorial-06-ordersplit.html#define-the-constraints",
    "title": "Tutorial VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "To ensure that each SKU is allocated to one warehouse, add the first constraint.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assert whether the single allocation constraint is correct.\n@assert num_constraints(warehouse_model, AffExpr, MOI.EqualTo{Float64}) == length(skus) \"The single allocation constraint should have one constraint for each SKU\"\nprintln(\"Great! The single allocation constraint is correctly defined.\")\n\n\nTo ensure that the capacity of each warehouse is not exceeded, add the second constraint.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assert whether the capacity constraint is correct.\n@assert num_constraints(warehouse_model, AffExpr, MOI.LessThan{Float64}) == length(warehouses) \"The capacity constraint should have one constraint for each warehouse\"\nprintln(\"Great! The capacity constraint is correctly defined.\")",
    "crumbs": [
      "06 Warehouse",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-06-ordersplit.html#solve-the-model",
    "href": "tutorials/tutorial-06-ordersplit.html#solve-the-model",
    "title": "Tutorial VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Finally, solve the model with a solve statement.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assert whether the model is solved correctly.\n@assert termination_status(warehouse_model) == MOI.OPTIMAL || termination_status(warehouse_model) == MOI.LOCALLY_SOLVED \"The model should either be solved with an optimal solution or with a locally optimal solution\"\n@assert isapprox(objective_value(warehouse_model), 141) \"The objective value should approximaly be 141. Have you correctly implemented the objective function?\"\nprintln(\"Great! The model is correctly solved.\")",
    "crumbs": [
      "06 Warehouse",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-06-ordersplit.html#print-the-results",
    "href": "tutorials/tutorial-06-ordersplit.html#print-the-results",
    "title": "Tutorial VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "The following code prints the objective value, the SKU allocation and the warehouse capacities based on your optimal solution.\n\nprintln(\"Objective value: \", objective_value(warehouse_model))\nprintln()\nprintln(\"SKU Allocation:\")\nfor i in skus\n    for k in warehouses\n        if value(X[i,k]) &gt; 0.1\n            println(\"SKU: \", i, \" Allocation: \", k)\n        end\n    end\nend\nprintln()\nprintln(\"Warehouse Capacities:\")\nfor k in 1:length(warehouses)\n    println(\"Warehouse: \", warehouses[k], \" Capacity: \", capacity[k], \" Used: \", sum(value.(X[i,warehouses[k]]) for i in skus))\nend",
    "crumbs": [
      "06 Warehouse",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-06-ordersplit.html#count-the-number-of-split-orders",
    "href": "tutorials/tutorial-06-ordersplit.html#count-the-number-of-split-orders",
    "title": "Tutorial VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "Based on the output of the optimisation, we still don’t know the number of split orders. The following code calculates the number of split orders from the SKU allocation for the optimal solution.\n\n# Binary matrix indicating whether a SKU is allocated to a warehouse.\nX_values = [value(X[i,j]) &gt; 0 ? true : false for i in skus, j in warehouses]\n\n# Function to count the number of split and regular parcels.\nfunction count_split_orders(X_input, transactional_data)\n    # Initialize the counters for split and regular parcels.\n    split_parcels = 0\n    regular_parcels = 0\n\n    # Iterate over each transaction in the transactional data set.\n    for t in 1:size(transactional_data,1)\n\n        # Check if the first warehouse can fulfill the transaction.\n        if all(X_input[:,1] .&gt;= transactional_data[t,:])\n            regular_parcels += 1\n\n        # Check if the second warehouse can fulfill the transaction.\n        elseif all(X_input[:,2] .&gt;= transactional_data[t,:])\n            regular_parcels += 1\n\n        # If neither warehouse can fulfill the transaction, it is a split.\n        else\n            split_parcels += 1\n            regular_parcels += 1\n        end\n    end\n    return split_parcels, regular_parcels\nend\n\n# Count the number of split and regular parcels for the optimal solution.\nsplit_parcels, regular_parcels = count_split_orders(X_values, T)\n\n# Count the number of split and regular parcels for 100 random solutions.\nsplit_parcels_random = []\nregular_parcels_random = []\nfor trial in 1:100\n    X_random = [rand(Bool) for i in 1:length(skus), j in 1:length(warehouses)]\n    split_parcels_random_trial, regular_parcels_random_trial = count_split_orders(X_random, T)\n    push!(split_parcels_random, split_parcels_random_trial)\n    push!(regular_parcels_random, regular_parcels_random_trial)\nend\nsplit_parcels_random = sum(split_parcels_random)/100\nregular_parcels_random = sum(regular_parcels_random)/100\n\n# Print the number of split and regular parcels.\nprintln(\"Number of split orders (optimal): \", split_parcels)\nprintln(\"Number of regular orders (optimal): \", regular_parcels)\nprintln()\n\n# Print the number of split and regular parcels for the random solution.\nprintln(\"Number of split orders (random): \", split_parcels_random)\nprintln(\"Number of regular orders (random): \", regular_parcels_random)",
    "crumbs": [
      "06 Warehouse",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-06-ordersplit.html#analyzing-the-results",
    "href": "tutorials/tutorial-06-ordersplit.html#analyzing-the-results",
    "title": "Tutorial VI - Minimizing Split Orders in E-Commerce",
    "section": "",
    "text": "FitGear’s operations team needs to understand the business implications of this optimization:\n\nWhich product categories tend to cluster together in the same warehouse? For example, do workout clothes tend to be stored together?\nHow many fewer split shipments would FitGear have compared to their current random allocation?\nHow might this new allocation affect warehouse operations and picking efficiency?\n\nYour answer goes here, thinking from the business perspective. A few sentences are fully sufficient!\n\n# YOUR ANSWER BELOW\n#=\n\n\n\n=#",
    "crumbs": [
      "06 Warehouse",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-08-districting.html",
    "href": "tutorials/tutorial-08-districting.html",
    "title": "Tutorial VIII - Police Districting",
    "section": "",
    "text": "Imagine you’re the lead consultant for Hamburg’s police force modernization project. The city is facing increasing response times in certain districts, and the Chief of Police has hired you to optimize their district boundaries. Your mission: redesign Hamburg’s police districts to ensure rapid response times while meeting several critical operational requirements.\nKey Objectives:\n\nMinimize average response time to incidents\nEnsure every area has adequate police coverage\nEnable efficient backup support between districts\nAccount for real-world constraints like traffic patterns\n\nThroughout this tutorial, you’ll build this solution step-by-step, starting with a basic model and gradually adding real-world constraints that police departments face daily.",
    "crumbs": [
      "08 Districting",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-08-districting.html#loading-data-and-packages",
    "href": "tutorials/tutorial-08-districting.html#loading-data-and-packages",
    "title": "Tutorial VIII - Police Districting",
    "section": "Loading Data and Packages",
    "text": "Loading Data and Packages\nWe start by loading the new Shapefile package. No mistakes here!\n\nimport Pkg\nPkg.add(\"Shapefile\")\n\nWe then load the required packages. If you have not installed them yet, you can do so by modifying the code chunk above to include the missing packages. Still no mistakes!\n\nusing JuMP, HiGHS\nusing DelimitedFiles\nusing Shapefile\nusing DataFrames\nusing Plots\n\nWe then define the number of departments, load the data into scope and define the number of departments and the weighted driving times. Make sure to use the correct path to the data files - it should be relative to the location notebook file in a folder called data. Again, no mistakes!\n\n# Load the data into scope\nfile_directory = \"$(@__DIR__)/data\"\neuclidianDistances = readdlm(\"$file_directory/euclidianDistances0510.csv\",'\\t')\ndrivingTimes = readdlm(\"$file_directory/drivingTimes0510.csv\",'\\t')\nincidentWeights = vec(readdlm(\"$file_directory/incidentWeights0510.csv\",'\\t'))\n\n# Load the Shapefile for plotting\nhexshape = DataFrame(Shapefile.Table(\"$file_directory/grid0510.shp\"))\nsort!(hexshape, :id)\n\n# Define the number of departments\np = 10\n\n# Define the weighted driving times\nweightedDriving = drivingTimes .* transpose(incidentWeights)",
    "crumbs": [
      "08 Districting",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-08-districting.html#fixing-the-mistakes",
    "href": "tutorials/tutorial-08-districting.html#fixing-the-mistakes",
    "title": "Tutorial VIII - Police Districting",
    "section": "Fixing the Mistakes",
    "text": "Fixing the Mistakes\nFrom here on, the code contains 6 mistakes you need to correct in order to solve the model. Mistakes can be anything so be careful!\n\n# MISTAKES BELOW\n\n# Prepare the model instance\npMedianModel = Model(HiGHS.Optimizer)\nset_attribute(pMedianModel, \"presolve\", \"on\")\nset_attribute(model, \"time_limit\", 120.0)\nset_attribute(pMedianModel, \"mip_rel_gap\", 0.0)\n\n# Define the range of the problem instance\nrangeBAs = 1:2\nrangeDepartments = unique(rand(1:size(incidentWeights,1), 100))  # Ensure unique departments (This line is correct!)\n\n# Define variable\n@variable(pMedianModel, X[i = rangeDepartments,j = rangeDepartments], Bin)\n\n# Define objective function\n@objective(pMedianModel, Max,\n    sum(weightedDriving[i,j]* X[i,j] for i in rangeDepartments, j in rangeBAs)\n    )\n\n# Define the constraints\n@constraint(pMedianModel,\n    eachAllocated[j=rangeBAs],\n    sum(X[i,j] for i in rangeDepartments) == 0\n    )\n\n@constraint(pMedianModel,\n    pLocations,\n    sum(X[i,i] for i in rangeDepartments) == p\n    )\n\n@constraint(pMedianModel,\n    departmentNecessary[i=rangeDepartments,j=rangeBAs],\n    2 * X[i,j] &lt;= X[i,i]\n    )\n\n# Start optimization\noptimize!(pMedianModel)\n\n# MISTAKES ABOVE\n\nWe then check the solution. No mistakes here, as all mistakes are in the code in the cell above!\n\n\nCode\n# Function to print the model status\nfunction print_model_status(model)\n    begin\n        println()\n    if termination_status(pMedianModel) == OPTIMAL\n        println(\"Great, the solution is optimal.\")\n        println(\"The relative gap is $(relative_gap(pMedianModel))\")\n        println(\"The solve time (in seconds) is $(solve_time(pMedianModel))\")\n    elseif termination_status(pMedianModel) == TIME_LIMIT && has_values(pMedianModel)\n        println(\"Solution is suboptimal due to a time limit, but a primal solution is available\")\n    else\n        error(\"The model was not solved correctly.\")\n    end\n        println(\"The objective value is \", objective_value(pMedianModel))\n    end\nend\n\n\nprint_model_status (generic function with 1 method)\n\n\n\n\nCode\nprint_model_status(pMedianModel)\n@assert termination_status(pMedianModel) == OPTIMAL || (termination_status(pMedianModel) == TIME_LIMIT && has_values(pMedianModel)) \"Unfortunate, the model was not solved correctly. Have you corrected all mistakes?\"\nprintln(\"Great, the model was solved correctly.\")",
    "crumbs": [
      "08 Districting",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-08-districting.html#visualizing-the-results",
    "href": "tutorials/tutorial-08-districting.html#visualizing-the-results",
    "title": "Tutorial VIII - Police Districting",
    "section": "Visualizing the Results",
    "text": "Visualizing the Results\nThe following code then builds and uses a function to plot the results.\n\nfunction visualize_departments(hexshape, X, p)\n    # Convert solution matrix to regular Matrix\n    allAssignments = Matrix(value.(X))\n\n    # Find assignments where value &gt; 0.5 (accounting for potential floating-point imprecision)\n    assignments = findall(allAssignments .&gt; 0.5)\n\n    # Create copy of hexshape to avoid modifying original\n    plot_data = copy(hexshape)\n\n    # Assign departments and initialize colors\n    plot_data.department = rangeDepartments[map(x-&gt;x[1], assignments)]\n    plot_data.color = fill(RGB(0/255, 0/255, 0/255), nrow(plot_data))\n\n    # Get unique department locations and create color mapping\n    department_locations = unique(rangeDepartments[map(x-&gt;x[1], assignments)])\n    color_palette = cgrad(:Pastel1_9, p, categorical=true)\n    color_dict = Dict(department_locations[i] =&gt; color_palette[i] for i in 1:p)\n\n    # Color non-department locations\n    for hex in eachrow(plot_data)\n        if hex.id in department_locations\n            hex.color = RGB(0/255, 0/255, 0/255)\n        else\n            hex.color = color_dict[hex.department]\n        end\n    end\n\n    # Create and return plot\n    return plot(\n        plot_data.geometry,\n        color=plot_data.color',\n        legend=false,\n        axis=false,\n        ticks=false,\n        size=(800,450)\n    )\nend\n\n# Plot the results\nplot_area = visualize_departments(hexshape, X, p)",
    "crumbs": [
      "08 Districting",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-08-districting.html#conditional-constraints",
    "href": "tutorials/tutorial-08-districting.html#conditional-constraints",
    "title": "Tutorial VIII - Police Districting",
    "section": "Conditional Constraints",
    "text": "Conditional Constraints\nBefore we start, we will quickly repeat some basic concepts on constraints and conditions in JuMP. You can add conditions to constraints by using the ; operator. This is useful if you want to add a constraint only under certain conditions. In the example below, the constraint is only active if the Euclidean distance between two BAs is less than 1.5.\n\n@constraint(model,\n    conditionalConstraint[\n        i=rangeDepartments,\n        j=rangeBAs;\n        euclidianDistances[i,j] &lt; 1.5\n        ],\n    X[i,j] == 1\n    )\n\nFurthermore,we can use conditions within constraints by using the for keyword. For example, in the constraint below, the sum is only taken over the BAs that are within 1.5 units of BA \\(i\\).\n\n@constraint(model,\n    conditionalConstraint2[i=rangeDepartments],\n    sum(X[i,j] for j in rangeBAs if euclidianDistances[i,j] &lt; 1.5) &gt;= 1\n    )",
    "crumbs": [
      "08 Districting",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-08-districting.html#extending-the-model",
    "href": "tutorials/tutorial-08-districting.html#extending-the-model",
    "title": "Tutorial VIII - Police Districting",
    "section": "Extending the Model",
    "text": "Extending the Model\nNow, we can start to extend the model. Add the contiguity constraint from the lecture to the model.\n\n\n\n\n\n\nTake a careful look at the Euclidean distances, as you can use them to determine if two BAs are adjacent to each other. If the distance between two BAs is less than 1.5, then the BAs are adjacent to each other. You can use this information to define the new constraint.\n\n\n\n\n# YOUR CODE BELOW\n\nSolve the model again, this time with the contiguity constraint.\n\n# YOUR CODE BELOW\n\nThe following code prints the model status and visualizes the districts. If your implementation is correct, the districts should be contiguous and the model should have reached optimality or found a feasible solution before hitting the time limit.\n\nprint_model_status(pMedianModel)\ndisplay(visualize_departments(hexshape, X, p))",
    "crumbs": [
      "08 Districting",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-08-districting.html#compute-the-gap",
    "href": "tutorials/tutorial-08-districting.html#compute-the-gap",
    "title": "Tutorial VIII - Police Districting",
    "section": "Compute the Gap",
    "text": "Compute the Gap\nBased on your results, what is the gap between the solution in the previous task and this task? Write a comment answering the question in cell below. You can also use the cell, to compute the gap based on the objective values.\n\n#=\n\n\n\n=#\n\n\n\n\n\n\n\nIf you computer cannot determine the optimal solution, you can just use the best solutions you found after both runs to compute the gap.",
    "crumbs": [
      "08 Districting",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html",
    "href": "tutorials/tutorial-10-intermission.html",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "",
    "text": "This tutorial is another short intermission to give you an idea of the structure of the exam. You can hand in your answers at the end to receive half a bonus point, if at least 75 % of the answers are correct and you describe your work clearly. If you have any questions or suggestions on how to improve the structure of the exam, please ask them.\nThe exam is just meant to be a tool to check your understanding of the material and to give you a chance to show your skills. It is not meant to be a stressful event or a punishment. If you have followed the course and put in the effort, you should be able to pass the exam with a good grade.\n\n\n\n\n\n\nAs some of these tasks are difficult to answer on a computer, you can hand in your answer scanned or written digitally on an iPad or Laptop.",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html#a-6-points",
    "href": "tutorials/tutorial-10-intermission.html#a-6-points",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "1.a (6 Points)",
    "text": "1.a (6 Points)\nAs temperatures rise due to global warming, so does the demand for ice cream. The ice cream company was amazed by your transportation plan from the lecture and asked if you could help with their production plan.\nThe company wants to optimize its production to keep up with the customer demand. To do so, they offer different flavors of ice cream that are made and stored in a warehouse. Each flavor has a unique production time per unit of ice cream and no setup time for the production. In the first period, the company has 100 units of each flavor in storage at the end of the period.\nFurthermore, each setup of a different flavor costs a fixed amount of money identical for all flavors and periods, while the ice cream storage costs in the warehouse are different for each flavor but identical for all periods. These storage costs occur at the end of each period per unit of ice cream for all units not sold to cover the varying demand per flavor and period.\nEach period matches a shift length of a certain number of hours, identical for all periods. The objective is to minimize the total cost of production and storage while satisfying all demands and production capacities.\nDefine all sets, parameters and variables required to model the problem described above. Select a suitable notation of your choice. Make sure to explicitly state in your notation which elements are sets, parameters and variables.\n\n\n\n\n\n\nNote that the problem does not have to be modeled yet!\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html#b-3-points",
    "href": "tutorials/tutorial-10-intermission.html#b-3-points",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "1.b (3 Points)",
    "text": "1.b (3 Points)\nPlease define the objective function to model the described problem based on your defined notation.\n\n\n\n\n\n\nIf you need additional sets, parameters or variables that are not yet defined, please define them as well.\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html#c-6-points",
    "href": "tutorials/tutorial-10-intermission.html#c-6-points",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "1.c (6 Points)",
    "text": "1.c (6 Points)\nPlease define all necessary constraints and the variable ranges to model the described problem based on your notation.\n\n\n\n\n\n\nIf you need additional sets, parameters or variables that are not yet defined, please define them as well.\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html#d-2-points",
    "href": "tutorials/tutorial-10-intermission.html#d-2-points",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "1.d (2 Points)",
    "text": "1.d (2 Points)\nIs the model formulation a nonlinear problem with continuous variables?\nPlease explain your answer briefly.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html#e-9-points",
    "href": "tutorials/tutorial-10-intermission.html#e-9-points",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "1.e (9 Points)",
    "text": "1.e (9 Points)\nDue to the success of the companies, workers demand higher wages and a compensation for working overtime. Your task is to extend the model to reflect this new situation. In the future, each worked hour in a period has a fixed cost per shift hour, identical for all periods. If the production time in one period exceeds the shift-length, workers have to work overtime. For each hour working overtime, the fixed costs per hour are 50% higher than usual. Furthermore, more than an additional time of a half a shift length is not allowed due to legal reasons.\nHow can you expand your model to reflect this new situation? Write down all additional or modified sets, parameters, variables, constraints and the objective function while describing each with a few words.\n\n\n\n\n\n\nNote, that you only need to write down new and modified elements!\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html#f-4-points",
    "href": "tutorials/tutorial-10-intermission.html#f-4-points",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "1.f (4 points)",
    "text": "1.f (4 points)\nWhat assumptions are made in the model that might not hold in the real world?\nPlease describe at least two assumptions with a 1-3 sentences and explain briefly why they might not hold.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html#a-6-points-1",
    "href": "tutorials/tutorial-10-intermission.html#a-6-points-1",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "2.a (6 Points)",
    "text": "2.a (6 Points)\nThroughout the course, we covered several different optimization problems. For one of the following two problems, briefly:\n\nDescribe the main objective of the problem (2 points)\nDescribe two key assumptions of the model (2 points per assumption)\n\nChoose from:\n\nTransportation Problem (Solar Panel Transport)\nSplit Order Minimization Problem (E-Commerce)\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html#b-4-points",
    "href": "tutorials/tutorial-10-intermission.html#b-4-points",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "2.b (4 Points)",
    "text": "2.b (4 Points)\nYou are trying to solve the capacitated vehicle routing problem with more than 500 customers and 10 vehicles. Unfortunately, your computer is not able to handle the problem. What could you try to solve the problem instead?\nPlease describe one approach to adress the problem and describe the advantages and disadvantages of the approach in a few sentences.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html#c-3-points",
    "href": "tutorials/tutorial-10-intermission.html#c-3-points",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "2.c (3 Points)",
    "text": "2.c (3 Points)\nSuppose you aim to improve the shifts of workers in a hospital. As the administration finds it difficult to find new workers, they want to optimize the shifts of the current workers to improve their satisfaction. What potential objective could be used in an objective function?\nPlease describe the objective function and explain why it would be a good choice for the problem.\n\n\n\n\n\n\nYou don’t need to write any code or mathematical model here!\n\n\n\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html#d-2-points-1",
    "href": "tutorials/tutorial-10-intermission.html#d-2-points-1",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "2.d (2 Points)",
    "text": "2.d (2 Points)\nWhat is the purpose of a solver used in Mathematical Programming?\nPlease describe the answer in your own words in 2-3 sentences.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html#a-3-points",
    "href": "tutorials/tutorial-10-intermission.html#a-3-points",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "3.a (3 Points)",
    "text": "3.a (3 Points)\nCreate a JuMP variable with the following properties: A continuous variable Production[t,p] for time periods \\(t \\in 1:T\\) and products \\(p \\in 1:P\\) which must be non-negative and has an upper bound stored in parameter capacity[t,p]. All parameters (T, P, capacity) are already defined, the model is not created yet.\nSpecify the definition of the variable in correct Julia syntax.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html#b-3-points-1",
    "href": "tutorials/tutorial-10-intermission.html#b-3-points-1",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "3.b (3 Points)",
    "text": "3.b (3 Points)\nWrite JuMP code to implement the following constraint:\n\\[\\sum_{f \\in F} Y_{f,z} \\leq 1 \\quad \\forall z \\in Z\\]\nAssume variables Y is already defined as binary variables and the sets F and Z are already defined as well. The model is also already created.\nSpecify the definition of the constraint in correct Julia syntax.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html#c-2-points",
    "href": "tutorials/tutorial-10-intermission.html#c-2-points",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "3.c (2 Points)",
    "text": "3.c (2 Points)\nYou are given the following JuMP code with a constraint that is not correctly implemented.\n@constraint(sum(X[i,j] for i in 1:10, j in 1:5) == 10)\nPlease explain why the constraint is not correctly implemented and how it can be fixed.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html#d-2-points-2",
    "href": "tutorials/tutorial-10-intermission.html#d-2-points-2",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "3.d (2 Points)",
    "text": "3.d (2 Points)\nWhat is the difference between a tuple and an array (vector) in Julia?\nPlease describe the difference in a 1-3 sentences.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-10-intermission.html#e-5-points",
    "href": "tutorials/tutorial-10-intermission.html#e-5-points",
    "title": "Tutorial X - Intermission: Exam Preparation",
    "section": "3.e (5 Points)",
    "text": "3.e (5 Points)\nYou are given the following code in Julia:\n\nmySet = 1:8\nvectorA = [\"Hello\", \"World\"]\nfor i in mySet\n    if i &lt;= 2\n        println(vectorA[i])\n    elseif i &lt;= 4\n        println(vectorA[i-2])\n    elseif i &gt; 6 && i &lt;= 8\n        println(\"This is $i\")\n    elseif i == 9\n        break\n    else\n        println(\"Hi $i\")\n    end\nend\n\nPlease write down the output of the code.\n\n# Your answer here\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|",
    "crumbs": [
      "10 Intermission",
      "Tutorial"
    ]
  },
  {
    "objectID": "tutorials/tutorial-12-rail.html",
    "href": "tutorials/tutorial-12-rail.html",
    "title": "Tutorial XII - Passenger Flow Control in Urban Rail",
    "section": "",
    "text": "Introduction\n\n\nSolutions\nYou will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching explicitly for the exact answers to the exercises. Understanding someone else’s solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions.\n\nConsider the depicted ‘Golden Line’ on the left with 4 different stations A, B, C, D. For an upcoming timeframe of 10 minutes divided into 10 periods, the transportation demand is going to exceed the available capacity of the network and each origin-destination pair will be requested by at least 1 passenger. To handle the inflow, queues will be put in place at each metro station.\n\n\nThe Challenge\nYour task is to minimize the queues without exceeding the available transport capacity of max. 100 passengers per minute of each arc. A safety buffer per arc is not needed. Each station layout is excellent, with sufficient stairs and escalators. Thus, the station itself is fully capable of handling any inflow that may result from the optimized restricted inflow. Nonetheless, queues are still necessary as the arcs cannot handle each input.\n\n\n\n1. Flow Analysis\nSuppose we are in minute 7 at the arc of (D,A). Which inflows from which stations are going to impact the flow into the arc in this minute?\nWrite out the set \\(\\mathcal{R}_{(D,A),7}\\) and shortly explain your answer. You can write out the set in a comment, for example like this:\n#=\n{(A,B,1), (B,C,1), (C,D,1)}\n=#\n\n\n\n\n\n\nTo solve this task, it might be helpful to work with paper and pen to sketch the problem.\n\n\n\n\n#=\nYOUR ANSWER BELOW\n\n\n=#\n\n\n\n\n2. Inflow Control\n\n\n\n\n\nExample: Fluctuations\n\n\n\n\n\n\nExample: Smoothed\n\n\n\n\nAs there is a rather large fluctuation of allowed inflow between periods, you are asked to introduce new constraints for the model. In the first period, the inflow at each station is supposed to be unrestricted. Thereafter, it is maximally allowed to change by 20 persons in both directions per period at each station.\nCan you write out the decision variables and the additional constraints for the model as JuMP constraints?\n\n\n\n\n\n\nYou don’t need to solve the model or define the objective function. You just need to constraint the fluctuations and add the appropriate variables.\n\n\n\n\nusing JuMP\nmetro_model = Model()\n\n# YOUR CODE BELOW\n\n\n\n\n3. Bidirectional Flow\n\n\n\nBidirectional Metro Network\n\n\nThe metro was improved and there is now the possibility to travel in both directions. How would this change the set \\(\\mathcal{R}_{(MD,MA),7}\\) from 1.?\nWrite out the new set \\(\\mathcal{R}_{(D,A),7}\\) manually and shortly explain your answer.\n\n#=\n# YOUR ANSWER BELOW\n\n=#\n\n\n\n\n4. Capacity Analysis\nAlthough the system is two-directional now, the overall number of trains of the metro provider has not changed. Would the change from a one-directional metro system to a two-directional metro system decrease the likelihood of crowd-accidents due to insufficient arc-capacities?\nPlease explain your answer in a few sentences.\n\n#=\n# YOUR ANSWER BELOW\n\n=#\n\n\n\n\n5. Computing the Set \\(\\mathcal{R}_{e,t}\\)\nCan you compute the set \\(\\mathcal{R}_{e,t}\\) for the one-directional flow? Generate a dictionary \\(R\\) that contains \\(e \\times t\\) entries. Each entry \\(r_{e,t}\\) should contain a vector with all origin-destination pairs and the corresponding time period saved as a tuple. Use the results to check your answer from the first task.\n\n\n\n\n\n\nThis task can be a bit tricky, as it is a bit of a challenge. But as it is the last tutorial, I figured a small challenge is fine.\n\n\n\n\n# YOUR CODE BELOW\n\nIf you encounter any difficulties ad cannot solve the problem, please document your issues here:\n\n#=\n\n\n\n=#\n\n\n\n\nSolutions\nYou will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching explicitly for the exact answers to the exercises. Understanding someone else’s solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions.",
    "crumbs": [
      "12 Metro",
      "Tutorial"
    ]
  }
]