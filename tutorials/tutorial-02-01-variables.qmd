---
title: "Tutorial II.I - Variables and Types"
subtitle: "Applied Optimization with Julia"
code-links:
  - text: Julia
    icon: hand-thumbs-up
    href: tutorial-02-01-variables.jl
---

# Introduction

{{< include ../include/activate_environment.qmd >}}

Welcome to this interactive Julia tutorial which introduces the basics of variables and types. Understanding variables and their types is crucial as they are the building blocks of any program. They determine how data is stored, manipulated, and how efficiently your code runs.

This script is designed to be interactive. Follow the instructions, write your code in the designated code blocks, and then execute the corresponding code. Each exercise is followed by an `@assert` statement that checks your solution.

## Julia in VS Code

1. First, install the [Julia](https://marketplace.visualstudio.com/items?itemName=julialang.language-julia) and the [Jupyter Extension](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) from the menu on the left side.
2. Install the [Jupytext for Notebooks Extension](https://marketplace.visualstudio.com/items?itemName=congyiwu.vscode-jupytext)
3. Now you can open the downloaded `.jl` files but you can't run them as notebooks yet!
4. Open the terminal and copy and paste the following code snippets:
   - `julia` (This will activate Julia)
   - `using Pkg`(This will load the package manager (more on this later))
   - `Pkg.activate("applied-optimization")`(This will activate an environment for our course)
   - `Pkg.add("IJulia")` (This will add IJulia - the support for notebooks - to the environment)
   - `using IJulia` (This will tell the system to load IJulia for the session)
5. Now, you can right click on the downloaded file and select "Open with Jupyter Notebook".
6. On the right side in the upper corner click there is a button saying something like "Julia Release Channel" or "Pick kernel". Click this button.
7. Now, select the field "Select another kernel", click it, and then select "Jupyter Kernel"
8. Finally, select the Julia kernel which contains the word applied-optimization.

:::{.callout-note}
Sorry, that this start is rather complicated. But in following this, we have a clean environment we can work in and you basically cannot break anything with the installation of packages. Your file is saved as `.jl` file while also being a notebook which is great for Git (version control)!
:::

:::{.callout-tip}
Activating an environment creates some files in your folder. These essentially save which packages our environment needs to work properly.
:::

---

# Section 1 - Variables

Think of variables as labeled containers. Just like you might label a box "Books" to store books, in programming we label our data with variable names. For example:

```{julia}
#| eval: true
age = 30        # A box labeled "age" containing the number 30
```
```{julia}
#| eval: true
name = "Tobias"  # A box labeled "name" containing the text "Tobias"
```

## Exercise 1.1 - Declare a Variable

Declare a variable named `x` and assign it the value `1`.

```{julia}
#| eval: false
# YOUR CODE BELOW

```
```{julia}
#| eval: false
#| code-fold: true
# Test your answer
@assert x == 1 "Check again, the value of x should be 1. Remember to assign the value directly to x."
println("Great, you have correctly assigned the value $x to the variable 'x'.")
```

:::{.callout-note}
Always replace 'YOUR CODE BELOW' with your actual code.
:::

## Exercise 1.2 - Declare a String Variable

Declare a variable named `hi` and assign it the string `"Hello, Optimization!"`.

```{julia}
#| eval: false
# YOUR CODE BELOW
```
```{julia}
#| eval: false
#| code-fold: true
# Test your answer
@assert hi == "Hello, Optimization!" "Make sure the variable 'hi' contains the exact string \"Hello, Optimization\"!"
println("Good, the variable 'hi' now states \"$hi\".")
```

---

# Section 2 - Basic Types

Just like real containers come in different types (like boxes for books, refrigerators for food, etc.), variables in Julia have different types depending on what they store:

- Integers (Int): Whole numbers like `1`, `42`, `-10`
- Floats (Float64): Numbers with decimal points like `3.14`, `-0.5`
- Booleans (Bool): True/false values like `true`, `false`
- Strings (String): Text in quotes like `"Hello"`

You can check what type of "container" a variable is using `typeof()`. Try this:

```{julia}
#| eval: true
age = 25
typeof(age)     # Will show Int64 (integer type)
```
```{julia}
price = 19.99
typeof(price)   # Will show Float64 (decimal number type)
```

## Exercise 2.1 - Create an Integer Variable

Create an Integer variable `answerUniverse` and set it to `42`.

```{julia}
#| eval: false
# YOUR CODE BELOW

```
```{julia}
#| eval: false
#| code-fold: true
# Test your answer
@assert answerUniverse == 42 "The variable 'answerUniverse' should hold 42."
println("Great, the answer to all questions on the universe is $answerUniverse now.")
```

## Exercise 2.2 - Create a Float Variable

Create a Float variable `money` and set it to `1.35`.

```{julia}
#| eval: false
# YOUR CODE BELOW

```
```{julia}
#| eval: false
#| code-fold: true
# Test your answer
@assert money == 1.35 "The variable 'money' should hold the Float64 1.35."
println("Perfect, the you have stored $money in the variable 'money'.")
```

## Exercise 2.3 - Create a Boolean Variable

Create a Boolean variable `isStudent` and set it to `true`.

```{julia}
#| eval: false
# YOUR CODE BELOW

```
```{julia}
#| eval: false
#| code-fold: true
# Test your answer
@assert isStudent == true "The variable 'isStudent' should be set to true."
println("Correct, you are a student now.")
```

---

# Section 3 - Type Annotations and Inference

Sometimes we want to specify exactly what kind of "container" we want to use. In Julia, we can do this using type annotations:

```{julia}
#| eval: true
temperature::Float64 = 98.6    # Specifically saying we want a decimal number
```
```{julia}
count::Int64 = 100            # Specifically saying we want a whole number
```

## Exercise 3.1 - Type Annotation

Declare a variable `y` with an explicit type annotation of `Int64` and assign it the value `5`.

```{julia}
#| eval: false
# YOUR CODE BELOW

```
```{julia}
#| eval: false
#| code-fold: true
# Test your answer
@assert y == 5 && typeof(y) == Int64 "Make sure 'y' is of type Int64 and has the value 5."
println("Great! You've created an Int64 variable 'y' with the value $y.")
```

---

# Section 4 - String Interpolation

String interpolation is like filling in blanks in a sentence. Instead of writing:
```{julia}
#| eval: true
name = "Tobias"
age = 30
# The hard way:
message = "My name is " * name * " and I am " * string(age) * " years old"
```

We can use the `$` symbol to insert variables directly into our text:
```{julia}
#| eval: true
message = "My name is $name and I am $age years old"
```

It's like having a template where Julia automatically fills in the values for you! If you have paid attention to the previous excercise, you have already seen this in action. The following example illustrates this again:

```{julia}
#| eval: true
language = "Julia"
println("I'm learning $language")
```

## Exercise 4.1 - String Interpolation

Create a string `message` that says `"y is [value of y]"` using string interpolation.

```{julia}
#| eval: false
# YOUR CODE BELOW

```
```{julia}
#| eval: false
#| code-fold: true
# Test your answer
@assert message == "y is 5" "Make sure your string includes the correct value of y."
println("Excellent! Your interpolated string is: $message")
```

---

# Conclusion

Congratulations! You have completed the first tutorial on Variables and Types. You've learned about the basics of variables, integers, floats, booleans, and strings. Continue to the next file to learn more.

{{< include ../include/tutorial_end.qmd >}}
